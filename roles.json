{
  "roles/accessapproval.approver": {
    "name": "roles/accessapproval.approver",
    "title": "Access Approval Approver",
    "description": "Ability to view or act on access approval requests and view configuration",
    "includedPermissions": [
      "accessapproval.requests.approve",
      "accessapproval.requests.dismiss",
      "accessapproval.requests.get",
      "accessapproval.requests.list",
      "accessapproval.settings.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/accessapproval.configEditor": {
    "name": "roles/accessapproval.configEditor",
    "title": "Access Approval Config Editor",
    "description": "Ability update the Access Approval configuration",
    "includedPermissions": [
      "accessapproval.settings.delete",
      "accessapproval.settings.get",
      "accessapproval.settings.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/accessapproval.viewer": {
    "name": "roles/accessapproval.viewer",
    "title": "Access Approval Viewer",
    "description": "Ability to view access approval requests and configuration",
    "includedPermissions": [
      "accessapproval.requests.get",
      "accessapproval.requests.list",
      "accessapproval.settings.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/accesscontextmanager.policyAdmin": {
    "name": "roles/accesscontextmanager.policyAdmin",
    "title": "Access Context Manager Admin",
    "description": "Full access to policies, access levels, and access zones",
    "includedPermissions": [
      "accesscontextmanager.accessLevels.create",
      "accesscontextmanager.accessLevels.delete",
      "accesscontextmanager.accessLevels.get",
      "accesscontextmanager.accessLevels.list",
      "accesscontextmanager.accessLevels.update",
      "accesscontextmanager.accessPolicies.create",
      "accesscontextmanager.accessPolicies.delete",
      "accesscontextmanager.accessPolicies.get",
      "accesscontextmanager.accessPolicies.getIamPolicy",
      "accesscontextmanager.accessPolicies.list",
      "accesscontextmanager.accessPolicies.setIamPolicy",
      "accesscontextmanager.accessPolicies.update",
      "accesscontextmanager.accessZones.create",
      "accesscontextmanager.accessZones.delete",
      "accesscontextmanager.accessZones.get",
      "accesscontextmanager.accessZones.list",
      "accesscontextmanager.accessZones.update",
      "accesscontextmanager.policies.create",
      "accesscontextmanager.policies.delete",
      "accesscontextmanager.policies.get",
      "accesscontextmanager.policies.getIamPolicy",
      "accesscontextmanager.policies.list",
      "accesscontextmanager.policies.setIamPolicy",
      "accesscontextmanager.policies.update",
      "accesscontextmanager.servicePerimeters.create",
      "accesscontextmanager.servicePerimeters.delete",
      "accesscontextmanager.servicePerimeters.get",
      "accesscontextmanager.servicePerimeters.list",
      "accesscontextmanager.servicePerimeters.update",
      "resourcemanager.organizations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/accesscontextmanager.policyEditor": {
    "name": "roles/accesscontextmanager.policyEditor",
    "title": "Access Context Manager Editor",
    "description": "Edit access to policies.  Create, edit, and change access levels and access zones.",
    "includedPermissions": [
      "accesscontextmanager.accessLevels.create",
      "accesscontextmanager.accessLevels.delete",
      "accesscontextmanager.accessLevels.get",
      "accesscontextmanager.accessLevels.list",
      "accesscontextmanager.accessLevels.update",
      "accesscontextmanager.accessPolicies.create",
      "accesscontextmanager.accessPolicies.delete",
      "accesscontextmanager.accessPolicies.get",
      "accesscontextmanager.accessPolicies.getIamPolicy",
      "accesscontextmanager.accessPolicies.list",
      "accesscontextmanager.accessPolicies.update",
      "accesscontextmanager.accessZones.create",
      "accesscontextmanager.accessZones.delete",
      "accesscontextmanager.accessZones.get",
      "accesscontextmanager.accessZones.list",
      "accesscontextmanager.accessZones.update",
      "accesscontextmanager.policies.create",
      "accesscontextmanager.policies.delete",
      "accesscontextmanager.policies.get",
      "accesscontextmanager.policies.getIamPolicy",
      "accesscontextmanager.policies.list",
      "accesscontextmanager.policies.update",
      "accesscontextmanager.servicePerimeters.create",
      "accesscontextmanager.servicePerimeters.delete",
      "accesscontextmanager.servicePerimeters.get",
      "accesscontextmanager.servicePerimeters.list",
      "accesscontextmanager.servicePerimeters.update",
      "resourcemanager.organizations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/accesscontextmanager.policyReader": {
    "name": "roles/accesscontextmanager.policyReader",
    "title": "Access Context Manager Reader",
    "description": "Read access to policies, access levels, and access zones.",
    "includedPermissions": [
      "accesscontextmanager.accessLevels.get",
      "accesscontextmanager.accessLevels.list",
      "accesscontextmanager.accessPolicies.get",
      "accesscontextmanager.accessPolicies.getIamPolicy",
      "accesscontextmanager.accessPolicies.list",
      "accesscontextmanager.accessZones.get",
      "accesscontextmanager.accessZones.list",
      "accesscontextmanager.policies.get",
      "accesscontextmanager.policies.getIamPolicy",
      "accesscontextmanager.policies.list",
      "accesscontextmanager.servicePerimeters.get",
      "accesscontextmanager.servicePerimeters.list",
      "resourcemanager.organizations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/actions.Admin": {
    "name": "roles/actions.Admin",
    "title": "Actions Admin",
    "description": "Access to edit and deploy an action",
    "includedPermissions": [
      "actions.agent.claimContentProvider",
      "actions.agent.get",
      "actions.agent.update",
      "actions.agentVersions.create",
      "actions.agentVersions.delete",
      "actions.agentVersions.deploy",
      "actions.agentVersions.get",
      "actions.agentVersions.list",
      "firebase.projects.get",
      "firebase.projects.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/actions.Viewer": {
    "name": "roles/actions.Viewer",
    "title": "Actions Viewer",
    "description": "Access to view an action",
    "includedPermissions": [
      "actions.agent.get",
      "actions.agentVersions.get",
      "actions.agentVersions.list",
      "firebase.projects.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/androidmanagement.user": {
    "name": "roles/androidmanagement.user",
    "title": "Android Management User",
    "description": "Full access to manage devices.",
    "includedPermissions": [
      "androidmanagement.enterprises.manage",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/apigee.admin": {
    "name": "roles/apigee.admin",
    "title": "Apigee Organization Admin",
    "description": "Full access to all apigee resource features",
    "includedPermissions": [
      "apigee.apiproductattributes.createOrUpdateAll",
      "apigee.apiproductattributes.delete",
      "apigee.apiproductattributes.get",
      "apigee.apiproductattributes.list",
      "apigee.apiproductattributes.update",
      "apigee.apiproducts.create",
      "apigee.apiproducts.delete",
      "apigee.apiproducts.get",
      "apigee.apiproducts.list",
      "apigee.apiproducts.update",
      "apigee.appkeys.create",
      "apigee.appkeys.delete",
      "apigee.appkeys.get",
      "apigee.appkeys.manage",
      "apigee.apps.get",
      "apigee.apps.list",
      "apigee.deployments.create",
      "apigee.deployments.delete",
      "apigee.deployments.get",
      "apigee.deployments.list",
      "apigee.deployments.update",
      "apigee.developerappattributes.createOrUpdateAll",
      "apigee.developerappattributes.delete",
      "apigee.developerappattributes.get",
      "apigee.developerappattributes.list",
      "apigee.developerappattributes.update",
      "apigee.developerapps.create",
      "apigee.developerapps.delete",
      "apigee.developerapps.get",
      "apigee.developerapps.list",
      "apigee.developerapps.manage",
      "apigee.developerattributes.createOrUpdateAll",
      "apigee.developerattributes.delete",
      "apigee.developerattributes.get",
      "apigee.developerattributes.list",
      "apigee.developerattributes.update",
      "apigee.developers.create",
      "apigee.developers.delete",
      "apigee.developers.get",
      "apigee.developers.list",
      "apigee.developers.update",
      "apigee.environments.create",
      "apigee.environments.delete",
      "apigee.environments.get",
      "apigee.environments.getDataLocation",
      "apigee.environments.getIamPolicy",
      "apigee.environments.getStats",
      "apigee.environments.list",
      "apigee.environments.manageRuntime",
      "apigee.environments.setIamPolicy",
      "apigee.environments.update",
      "apigee.flowhooks.attachSharedFlow",
      "apigee.flowhooks.detachSharedFlow",
      "apigee.flowhooks.getSharedFlow",
      "apigee.flowhooks.list",
      "apigee.keystorealiases.create",
      "apigee.keystorealiases.delete",
      "apigee.keystorealiases.exportCertificate",
      "apigee.keystorealiases.generateCSR",
      "apigee.keystorealiases.get",
      "apigee.keystorealiases.list",
      "apigee.keystorealiases.update",
      "apigee.keystores.create",
      "apigee.keystores.delete",
      "apigee.keystores.export",
      "apigee.keystores.get",
      "apigee.keystores.list",
      "apigee.keyvaluemaps.create",
      "apigee.keyvaluemaps.delete",
      "apigee.keyvaluemaps.list",
      "apigee.maskconfigs.get",
      "apigee.maskconfigs.update",
      "apigee.organizations.create",
      "apigee.organizations.get",
      "apigee.organizations.list",
      "apigee.organizations.update",
      "apigee.proxies.create",
      "apigee.proxies.delete",
      "apigee.proxies.get",
      "apigee.proxies.list",
      "apigee.proxyrevisions.delete",
      "apigee.proxyrevisions.deploy",
      "apigee.proxyrevisions.get",
      "apigee.proxyrevisions.list",
      "apigee.proxyrevisions.undeploy",
      "apigee.proxyrevisions.update",
      "apigee.queries.create",
      "apigee.queries.get",
      "apigee.queries.list",
      "apigee.references.create",
      "apigee.references.delete",
      "apigee.references.get",
      "apigee.references.list",
      "apigee.references.update",
      "apigee.reports.create",
      "apigee.reports.delete",
      "apigee.reports.get",
      "apigee.reports.list",
      "apigee.reports.update",
      "apigee.resourcefiles.create",
      "apigee.resourcefiles.delete",
      "apigee.resourcefiles.get",
      "apigee.resourcefiles.list",
      "apigee.resourcefiles.update",
      "apigee.sharedflowrevisions.delete",
      "apigee.sharedflowrevisions.deploy",
      "apigee.sharedflowrevisions.get",
      "apigee.sharedflowrevisions.list",
      "apigee.sharedflowrevisions.undeploy",
      "apigee.sharedflowrevisions.update",
      "apigee.sharedflows.create",
      "apigee.sharedflows.delete",
      "apigee.sharedflows.get",
      "apigee.sharedflows.list",
      "apigee.targetservers.create",
      "apigee.targetservers.delete",
      "apigee.targetservers.get",
      "apigee.targetservers.list",
      "apigee.targetservers.update",
      "apigee.tracesessions.create",
      "apigee.tracesessions.delete",
      "apigee.tracesessions.get",
      "apigee.tracesessions.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/apigee.analyticsAgent": {
    "name": "roles/apigee.analyticsAgent",
    "title": "Apigee Analytics Agent",
    "description": "Curated set of permissions for Apigee Universal Data Collection Agent to manage analytics for an Apigee Organization",
    "includedPermissions": [
      "apigee.environments.getDataLocation"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/apigee.analyticsEditor": {
    "name": "roles/apigee.analyticsEditor",
    "title": "Apigee Analytics Editor",
    "description": "Analytics editor for an Apigee Organization",
    "includedPermissions": [
      "apigee.environments.get",
      "apigee.environments.getStats",
      "apigee.organizations.get",
      "apigee.organizations.list",
      "apigee.queries.create",
      "apigee.queries.get",
      "apigee.queries.list",
      "apigee.reports.create",
      "apigee.reports.delete",
      "apigee.reports.get",
      "apigee.reports.list",
      "apigee.reports.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/apigee.analyticsViewer": {
    "name": "roles/apigee.analyticsViewer",
    "title": "Apigee Analytics Viewer",
    "description": "Analytics viewer for an Apigee Organization",
    "includedPermissions": [
      "apigee.environments.getStats",
      "apigee.organizations.get",
      "apigee.organizations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/apigee.apiCreator": {
    "name": "roles/apigee.apiCreator",
    "title": "Apigee API Creator",
    "description": "Creator of apigee resources",
    "includedPermissions": [
      "apigee.apiproductattributes.get",
      "apigee.apiproductattributes.list",
      "apigee.apiproducts.get",
      "apigee.apiproducts.list",
      "apigee.apps.get",
      "apigee.apps.list",
      "apigee.environments.get",
      "apigee.environments.getStats",
      "apigee.environments.list",
      "apigee.keyvaluemaps.create",
      "apigee.keyvaluemaps.delete",
      "apigee.keyvaluemaps.list",
      "apigee.organizations.get",
      "apigee.organizations.list",
      "apigee.proxies.create",
      "apigee.proxies.delete",
      "apigee.proxies.get",
      "apigee.proxies.list",
      "apigee.proxyrevisions.delete",
      "apigee.proxyrevisions.get",
      "apigee.proxyrevisions.list",
      "apigee.proxyrevisions.update",
      "apigee.sharedflowrevisions.delete",
      "apigee.sharedflowrevisions.deploy",
      "apigee.sharedflowrevisions.get",
      "apigee.sharedflowrevisions.list",
      "apigee.sharedflowrevisions.undeploy",
      "apigee.sharedflowrevisions.update",
      "apigee.sharedflows.create",
      "apigee.sharedflows.delete",
      "apigee.sharedflows.get",
      "apigee.sharedflows.list",
      "apigee.tracesessions.create",
      "apigee.tracesessions.delete",
      "apigee.tracesessions.get",
      "apigee.tracesessions.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/apigee.deployer": {
    "name": "roles/apigee.deployer",
    "title": "Apigee Deployer",
    "description": "Deployer of apigee resources",
    "includedPermissions": [
      "apigee.apiproductattributes.get",
      "apigee.apiproductattributes.list",
      "apigee.apiproducts.get",
      "apigee.apiproducts.list",
      "apigee.apps.get",
      "apigee.apps.list",
      "apigee.deployments.create",
      "apigee.deployments.delete",
      "apigee.deployments.get",
      "apigee.deployments.list",
      "apigee.deployments.update",
      "apigee.environments.get",
      "apigee.environments.getIamPolicy",
      "apigee.environments.getStats",
      "apigee.environments.list",
      "apigee.environments.setIamPolicy",
      "apigee.flowhooks.attachSharedFlow",
      "apigee.flowhooks.detachSharedFlow",
      "apigee.flowhooks.getSharedFlow",
      "apigee.flowhooks.list",
      "apigee.keystorealiases.create",
      "apigee.keystorealiases.delete",
      "apigee.keystorealiases.exportCertificate",
      "apigee.keystorealiases.generateCSR",
      "apigee.keystorealiases.get",
      "apigee.keystorealiases.list",
      "apigee.keystorealiases.update",
      "apigee.keystores.create",
      "apigee.keystores.delete",
      "apigee.keystores.export",
      "apigee.keystores.get",
      "apigee.keystores.list",
      "apigee.keyvaluemaps.create",
      "apigee.keyvaluemaps.delete",
      "apigee.keyvaluemaps.list",
      "apigee.maskconfigs.get",
      "apigee.maskconfigs.update",
      "apigee.organizations.get",
      "apigee.organizations.list",
      "apigee.proxies.get",
      "apigee.proxies.list",
      "apigee.proxyrevisions.deploy",
      "apigee.proxyrevisions.get",
      "apigee.proxyrevisions.list",
      "apigee.proxyrevisions.undeploy",
      "apigee.references.create",
      "apigee.references.delete",
      "apigee.references.get",
      "apigee.references.list",
      "apigee.references.update",
      "apigee.resourcefiles.create",
      "apigee.resourcefiles.delete",
      "apigee.resourcefiles.get",
      "apigee.resourcefiles.list",
      "apigee.resourcefiles.update",
      "apigee.sharedflowrevisions.delete",
      "apigee.sharedflowrevisions.deploy",
      "apigee.sharedflowrevisions.get",
      "apigee.sharedflowrevisions.list",
      "apigee.sharedflowrevisions.undeploy",
      "apigee.sharedflowrevisions.update",
      "apigee.sharedflows.create",
      "apigee.sharedflows.delete",
      "apigee.sharedflows.get",
      "apigee.sharedflows.list",
      "apigee.targetservers.create",
      "apigee.targetservers.delete",
      "apigee.targetservers.get",
      "apigee.targetservers.list",
      "apigee.targetservers.update",
      "apigee.tracesessions.create",
      "apigee.tracesessions.delete",
      "apigee.tracesessions.get",
      "apigee.tracesessions.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/apigee.developerAdmin": {
    "name": "roles/apigee.developerAdmin",
    "title": "Apigee Developer Admin",
    "description": "Developer admin of apigee resources",
    "includedPermissions": [
      "apigee.apiproductattributes.get",
      "apigee.apiproductattributes.list",
      "apigee.apiproducts.get",
      "apigee.apiproducts.list",
      "apigee.appkeys.create",
      "apigee.appkeys.delete",
      "apigee.appkeys.get",
      "apigee.appkeys.manage",
      "apigee.developerappattributes.createOrUpdateAll",
      "apigee.developerappattributes.delete",
      "apigee.developerappattributes.get",
      "apigee.developerappattributes.list",
      "apigee.developerappattributes.update",
      "apigee.developerapps.create",
      "apigee.developerapps.delete",
      "apigee.developerapps.get",
      "apigee.developerapps.list",
      "apigee.developerapps.manage",
      "apigee.developerattributes.createOrUpdateAll",
      "apigee.developerattributes.delete",
      "apigee.developerattributes.get",
      "apigee.developerattributes.list",
      "apigee.developerattributes.update",
      "apigee.developers.create",
      "apigee.developers.delete",
      "apigee.developers.get",
      "apigee.developers.list",
      "apigee.developers.update",
      "apigee.environments.get",
      "apigee.environments.getStats",
      "apigee.organizations.get",
      "apigee.organizations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/apigee.readOnlyAdmin": {
    "name": "roles/apigee.readOnlyAdmin",
    "title": "Apigee Read-only Admin",
    "description": "Viewer of all apigee resources",
    "includedPermissions": [
      "apigee.apiproductattributes.get",
      "apigee.apiproductattributes.list",
      "apigee.apiproducts.get",
      "apigee.apiproducts.list",
      "apigee.appkeys.get",
      "apigee.apps.get",
      "apigee.apps.list",
      "apigee.deployments.get",
      "apigee.deployments.list",
      "apigee.developerappattributes.get",
      "apigee.developerappattributes.list",
      "apigee.developerapps.get",
      "apigee.developerapps.list",
      "apigee.developerattributes.get",
      "apigee.developerattributes.list",
      "apigee.developers.get",
      "apigee.developers.list",
      "apigee.environments.get",
      "apigee.environments.getDataLocation",
      "apigee.environments.getIamPolicy",
      "apigee.environments.getStats",
      "apigee.environments.list",
      "apigee.flowhooks.getSharedFlow",
      "apigee.flowhooks.list",
      "apigee.keystorealiases.get",
      "apigee.keystorealiases.list",
      "apigee.keystores.get",
      "apigee.keystores.list",
      "apigee.keyvaluemaps.list",
      "apigee.maskconfigs.get",
      "apigee.organizations.get",
      "apigee.organizations.list",
      "apigee.proxies.get",
      "apigee.proxies.list",
      "apigee.proxyrevisions.get",
      "apigee.proxyrevisions.list",
      "apigee.queries.get",
      "apigee.queries.list",
      "apigee.references.get",
      "apigee.references.list",
      "apigee.reports.get",
      "apigee.reports.list",
      "apigee.resourcefiles.get",
      "apigee.resourcefiles.list",
      "apigee.sharedflowrevisions.get",
      "apigee.sharedflowrevisions.list",
      "apigee.sharedflows.get",
      "apigee.sharedflows.list",
      "apigee.targetservers.get",
      "apigee.targetservers.list",
      "apigee.tracesessions.get",
      "apigee.tracesessions.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/apigee.synchronizerManager": {
    "name": "roles/apigee.synchronizerManager",
    "title": "Apigee Synchronizer Manager",
    "description": "Curated set of permissions for a Synchronizer to manage environments in an Apigee Organization",
    "includedPermissions": [
      "apigee.environments.get",
      "apigee.environments.manageRuntime"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/appengine.appAdmin": {
    "name": "roles/appengine.appAdmin",
    "title": "App Engine Admin",
    "description": "Full management of App Engine apps (but not storage).",
    "includedPermissions": [
      "appengine.applications.get",
      "appengine.applications.update",
      "appengine.instances.delete",
      "appengine.instances.get",
      "appengine.instances.list",
      "appengine.operations.get",
      "appengine.operations.list",
      "appengine.runtimes.actAsAdmin",
      "appengine.services.delete",
      "appengine.services.get",
      "appengine.services.list",
      "appengine.services.update",
      "appengine.versions.create",
      "appengine.versions.delete",
      "appengine.versions.get",
      "appengine.versions.list",
      "appengine.versions.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/appengine.appViewer": {
    "name": "roles/appengine.appViewer",
    "title": "App Engine Viewer",
    "description": "Ability to view App Engine app status.",
    "includedPermissions": [
      "appengine.applications.get",
      "appengine.instances.get",
      "appengine.instances.list",
      "appengine.operations.get",
      "appengine.operations.list",
      "appengine.services.get",
      "appengine.services.list",
      "appengine.versions.get",
      "appengine.versions.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/appengine.codeViewer": {
    "name": "roles/appengine.codeViewer",
    "title": "App Engine Code Viewer",
    "description": "Ability to view App Engine app status and deployed source code.",
    "includedPermissions": [
      "appengine.applications.get",
      "appengine.instances.get",
      "appengine.instances.list",
      "appengine.operations.get",
      "appengine.operations.list",
      "appengine.services.get",
      "appengine.services.list",
      "appengine.versions.get",
      "appengine.versions.getFileContents",
      "appengine.versions.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/appengine.deployer": {
    "name": "roles/appengine.deployer",
    "title": "App Engine Deployer",
    "description": "Necessary permissions to deploy new code to App Engine, and remove old versions.",
    "includedPermissions": [
      "appengine.applications.get",
      "appengine.instances.get",
      "appengine.instances.list",
      "appengine.operations.get",
      "appengine.operations.list",
      "appengine.services.get",
      "appengine.services.list",
      "appengine.versions.create",
      "appengine.versions.delete",
      "appengine.versions.get",
      "appengine.versions.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/appengine.serviceAdmin": {
    "name": "roles/appengine.serviceAdmin",
    "title": "App Engine Service Admin",
    "description": "Can view and change traffic splits, scaling settings, and delete old versions; can't create new versions.",
    "includedPermissions": [
      "appengine.applications.get",
      "appengine.instances.delete",
      "appengine.instances.get",
      "appengine.instances.list",
      "appengine.operations.get",
      "appengine.operations.list",
      "appengine.services.delete",
      "appengine.services.get",
      "appengine.services.list",
      "appengine.services.update",
      "appengine.versions.delete",
      "appengine.versions.get",
      "appengine.versions.list",
      "appengine.versions.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/artifactregistry.admin": {
    "name": "roles/artifactregistry.admin",
    "title": "Artifact Registry Administrator",
    "description": "Administrator access to create and manage repositories.",
    "includedPermissions": [
      "artifactregistry.files.get",
      "artifactregistry.files.list",
      "artifactregistry.packages.delete",
      "artifactregistry.packages.get",
      "artifactregistry.packages.list",
      "artifactregistry.repositories.create",
      "artifactregistry.repositories.delete",
      "artifactregistry.repositories.deleteArtifacts",
      "artifactregistry.repositories.downloadArtifacts",
      "artifactregistry.repositories.get",
      "artifactregistry.repositories.getIamPolicy",
      "artifactregistry.repositories.list",
      "artifactregistry.repositories.setIamPolicy",
      "artifactregistry.repositories.update",
      "artifactregistry.repositories.uploadArtifacts",
      "artifactregistry.tags.create",
      "artifactregistry.tags.delete",
      "artifactregistry.tags.get",
      "artifactregistry.tags.list",
      "artifactregistry.tags.update",
      "artifactregistry.versions.delete",
      "artifactregistry.versions.get",
      "artifactregistry.versions.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/artifactregistry.reader": {
    "name": "roles/artifactregistry.reader",
    "title": "Artifact Registry Reader",
    "description": "Access to read repository items.",
    "includedPermissions": [
      "artifactregistry.files.get",
      "artifactregistry.files.list",
      "artifactregistry.packages.get",
      "artifactregistry.packages.list",
      "artifactregistry.repositories.downloadArtifacts",
      "artifactregistry.repositories.get",
      "artifactregistry.repositories.list",
      "artifactregistry.tags.get",
      "artifactregistry.tags.list",
      "artifactregistry.versions.get",
      "artifactregistry.versions.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/artifactregistry.repoAdmin": {
    "name": "roles/artifactregistry.repoAdmin",
    "title": "Artifact Registry Repository Administrator",
    "description": "Access to manage artifacts in repositories.",
    "includedPermissions": [
      "artifactregistry.files.get",
      "artifactregistry.files.list",
      "artifactregistry.packages.delete",
      "artifactregistry.packages.get",
      "artifactregistry.packages.list",
      "artifactregistry.repositories.deleteArtifacts",
      "artifactregistry.repositories.downloadArtifacts",
      "artifactregistry.repositories.get",
      "artifactregistry.repositories.list",
      "artifactregistry.repositories.uploadArtifacts",
      "artifactregistry.tags.create",
      "artifactregistry.tags.delete",
      "artifactregistry.tags.get",
      "artifactregistry.tags.list",
      "artifactregistry.tags.update",
      "artifactregistry.versions.delete",
      "artifactregistry.versions.get",
      "artifactregistry.versions.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/artifactregistry.writer": {
    "name": "roles/artifactregistry.writer",
    "title": "Artifact Registry Writer",
    "description": "Access to read and write repository items.",
    "includedPermissions": [
      "artifactregistry.files.get",
      "artifactregistry.files.list",
      "artifactregistry.packages.get",
      "artifactregistry.packages.list",
      "artifactregistry.repositories.downloadArtifacts",
      "artifactregistry.repositories.get",
      "artifactregistry.repositories.list",
      "artifactregistry.repositories.uploadArtifacts",
      "artifactregistry.tags.create",
      "artifactregistry.tags.get",
      "artifactregistry.tags.list",
      "artifactregistry.tags.update",
      "artifactregistry.versions.get",
      "artifactregistry.versions.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/automl.admin": {
    "name": "roles/automl.admin",
    "title": "AutoML Admin",
    "description": "Full access to all AutoML resources",
    "includedPermissions": [
      "automl.annotationSpecs.create",
      "automl.annotationSpecs.delete",
      "automl.annotationSpecs.get",
      "automl.annotationSpecs.list",
      "automl.annotationSpecs.update",
      "automl.annotations.approve",
      "automl.annotations.create",
      "automl.annotations.list",
      "automl.annotations.manipulate",
      "automl.annotations.reject",
      "automl.columnSpecs.get",
      "automl.columnSpecs.list",
      "automl.columnSpecs.update",
      "automl.datasets.create",
      "automl.datasets.delete",
      "automl.datasets.export",
      "automl.datasets.get",
      "automl.datasets.getIamPolicy",
      "automl.datasets.import",
      "automl.datasets.list",
      "automl.datasets.setIamPolicy",
      "automl.datasets.update",
      "automl.examples.delete",
      "automl.examples.get",
      "automl.examples.list",
      "automl.humanAnnotationTasks.create",
      "automl.humanAnnotationTasks.delete",
      "automl.humanAnnotationTasks.get",
      "automl.humanAnnotationTasks.list",
      "automl.locations.get",
      "automl.locations.getIamPolicy",
      "automl.locations.list",
      "automl.locations.setIamPolicy",
      "automl.modelEvaluations.create",
      "automl.modelEvaluations.get",
      "automl.modelEvaluations.list",
      "automl.models.create",
      "automl.models.delete",
      "automl.models.deploy",
      "automl.models.export",
      "automl.models.get",
      "automl.models.getIamPolicy",
      "automl.models.list",
      "automl.models.predict",
      "automl.models.setIamPolicy",
      "automl.models.undeploy",
      "automl.operations.cancel",
      "automl.operations.delete",
      "automl.operations.get",
      "automl.operations.list",
      "automl.tableSpecs.get",
      "automl.tableSpecs.list",
      "automl.tableSpecs.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/automl.editor": {
    "name": "roles/automl.editor",
    "title": "AutoML Editor",
    "description": "Editor of all AutoML resources",
    "includedPermissions": [
      "automl.annotationSpecs.create",
      "automl.annotationSpecs.delete",
      "automl.annotationSpecs.get",
      "automl.annotationSpecs.list",
      "automl.annotationSpecs.update",
      "automl.annotations.approve",
      "automl.annotations.create",
      "automl.annotations.list",
      "automl.annotations.manipulate",
      "automl.annotations.reject",
      "automl.columnSpecs.get",
      "automl.columnSpecs.list",
      "automl.columnSpecs.update",
      "automl.datasets.create",
      "automl.datasets.delete",
      "automl.datasets.export",
      "automl.datasets.get",
      "automl.datasets.import",
      "automl.datasets.list",
      "automl.datasets.update",
      "automl.examples.delete",
      "automl.examples.get",
      "automl.examples.list",
      "automl.humanAnnotationTasks.create",
      "automl.humanAnnotationTasks.delete",
      "automl.humanAnnotationTasks.get",
      "automl.humanAnnotationTasks.list",
      "automl.locations.get",
      "automl.locations.list",
      "automl.modelEvaluations.create",
      "automl.modelEvaluations.get",
      "automl.modelEvaluations.list",
      "automl.models.create",
      "automl.models.delete",
      "automl.models.deploy",
      "automl.models.export",
      "automl.models.get",
      "automl.models.list",
      "automl.models.predict",
      "automl.models.undeploy",
      "automl.operations.cancel",
      "automl.operations.delete",
      "automl.operations.get",
      "automl.operations.list",
      "automl.tableSpecs.get",
      "automl.tableSpecs.list",
      "automl.tableSpecs.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/automl.predictor": {
    "name": "roles/automl.predictor",
    "title": "AutoML Predictor",
    "description": "Predict using models",
    "includedPermissions": [
      "automl.models.predict",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/automl.viewer": {
    "name": "roles/automl.viewer",
    "title": "AutoML Viewer",
    "description": "Viewer of all AutoML resources",
    "includedPermissions": [
      "automl.annotationSpecs.get",
      "automl.annotationSpecs.list",
      "automl.annotations.list",
      "automl.columnSpecs.get",
      "automl.columnSpecs.list",
      "automl.datasets.get",
      "automl.datasets.list",
      "automl.examples.get",
      "automl.examples.list",
      "automl.humanAnnotationTasks.get",
      "automl.humanAnnotationTasks.list",
      "automl.locations.get",
      "automl.locations.list",
      "automl.modelEvaluations.get",
      "automl.modelEvaluations.list",
      "automl.models.get",
      "automl.models.list",
      "automl.operations.get",
      "automl.operations.list",
      "automl.tableSpecs.get",
      "automl.tableSpecs.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/automlrecommendations.admin": {
    "name": "roles/automlrecommendations.admin",
    "title": "Recommendations AI Admin",
    "description": "Full access to all Recommendations AI resources.",
    "includedPermissions": [
      "automlrecommendations.apiKeys.create",
      "automlrecommendations.apiKeys.delete",
      "automlrecommendations.apiKeys.list",
      "automlrecommendations.catalogItems.create",
      "automlrecommendations.catalogItems.delete",
      "automlrecommendations.catalogItems.get",
      "automlrecommendations.catalogItems.list",
      "automlrecommendations.catalogItems.update",
      "automlrecommendations.catalogs.getStats",
      "automlrecommendations.catalogs.list",
      "automlrecommendations.eventStores.getStats",
      "automlrecommendations.events.create",
      "automlrecommendations.events.list",
      "automlrecommendations.events.purge",
      "automlrecommendations.placements.getStats",
      "automlrecommendations.placements.list",
      "automlrecommendations.recommendations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/automlrecommendations.adminViewer": {
    "name": "roles/automlrecommendations.adminViewer",
    "title": "Recommendations AI Admin Viewer",
    "description": "Viewer of all Recommendations AI resources.",
    "includedPermissions": [
      "automlrecommendations.apiKeys.list",
      "automlrecommendations.catalogItems.get",
      "automlrecommendations.catalogItems.list",
      "automlrecommendations.catalogs.getStats",
      "automlrecommendations.catalogs.list",
      "automlrecommendations.eventStores.getStats",
      "automlrecommendations.events.list",
      "automlrecommendations.placements.getStats",
      "automlrecommendations.placements.list",
      "automlrecommendations.recommendations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/automlrecommendations.editor": {
    "name": "roles/automlrecommendations.editor",
    "title": "Recommendations AI Editor",
    "description": "Editor of all Recommendations AI resources.",
    "includedPermissions": [
      "automlrecommendations.apiKeys.create",
      "automlrecommendations.apiKeys.list",
      "automlrecommendations.catalogItems.create",
      "automlrecommendations.catalogItems.delete",
      "automlrecommendations.catalogItems.get",
      "automlrecommendations.catalogItems.list",
      "automlrecommendations.catalogItems.update",
      "automlrecommendations.catalogs.getStats",
      "automlrecommendations.catalogs.list",
      "automlrecommendations.eventStores.getStats",
      "automlrecommendations.events.create",
      "automlrecommendations.events.list",
      "automlrecommendations.placements.getStats",
      "automlrecommendations.placements.list",
      "automlrecommendations.recommendations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/automlrecommendations.viewer": {
    "name": "roles/automlrecommendations.viewer",
    "title": "Recommendations AI Viewer",
    "description": "Viewer of all Recommendations AI resources except automlrecommendations.apiKeys. To have all read access use Recommendations AI Admin Viewer role instead.",
    "includedPermissions": [
      "automlrecommendations.catalogItems.get",
      "automlrecommendations.catalogItems.list",
      "automlrecommendations.catalogs.getStats",
      "automlrecommendations.catalogs.list",
      "automlrecommendations.eventStores.getStats",
      "automlrecommendations.events.list",
      "automlrecommendations.placements.getStats",
      "automlrecommendations.placements.list",
      "automlrecommendations.recommendations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/axt.admin": {
    "name": "roles/axt.admin",
    "title": "Access Transparency Admin",
    "description": "Enable Access Transparency for Organization",
    "includedPermissions": [
      "axt.labels.get",
      "axt.labels.set",
      "resourcemanager.organizations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/bigquery.admin": {
    "name": "roles/bigquery.admin",
    "title": "BigQuery Admin",
    "description": "Administer all BigQuery resources and data",
    "includedPermissions": [
      "bigquery.config.get",
      "bigquery.config.update",
      "bigquery.connections.create",
      "bigquery.connections.delete",
      "bigquery.connections.get",
      "bigquery.connections.getIamPolicy",
      "bigquery.connections.list",
      "bigquery.connections.setIamPolicy",
      "bigquery.connections.update",
      "bigquery.connections.use",
      "bigquery.datasets.create",
      "bigquery.datasets.delete",
      "bigquery.datasets.get",
      "bigquery.datasets.getIamPolicy",
      "bigquery.datasets.setIamPolicy",
      "bigquery.datasets.update",
      "bigquery.datasets.updateTag",
      "bigquery.jobs.create",
      "bigquery.jobs.get",
      "bigquery.jobs.list",
      "bigquery.jobs.listAll",
      "bigquery.jobs.update",
      "bigquery.models.create",
      "bigquery.models.delete",
      "bigquery.models.getData",
      "bigquery.models.getMetadata",
      "bigquery.models.list",
      "bigquery.models.updateData",
      "bigquery.models.updateMetadata",
      "bigquery.models.updateTag",
      "bigquery.readsessions.create",
      "bigquery.routines.create",
      "bigquery.routines.delete",
      "bigquery.routines.get",
      "bigquery.routines.list",
      "bigquery.routines.update",
      "bigquery.savedqueries.create",
      "bigquery.savedqueries.delete",
      "bigquery.savedqueries.get",
      "bigquery.savedqueries.list",
      "bigquery.savedqueries.update",
      "bigquery.tables.create",
      "bigquery.tables.delete",
      "bigquery.tables.export",
      "bigquery.tables.get",
      "bigquery.tables.getData",
      "bigquery.tables.list",
      "bigquery.tables.setCategory",
      "bigquery.tables.update",
      "bigquery.tables.updateData",
      "bigquery.tables.updateTag",
      "bigquery.transfers.get",
      "bigquery.transfers.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/bigquery.connectionAdmin": {
    "name": "roles/bigquery.connectionAdmin",
    "title": "BigQuery Connection Admin",
    "includedPermissions": [
      "bigquery.connections.create",
      "bigquery.connections.delete",
      "bigquery.connections.get",
      "bigquery.connections.getIamPolicy",
      "bigquery.connections.list",
      "bigquery.connections.setIamPolicy",
      "bigquery.connections.update",
      "bigquery.connections.use"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/bigquery.connectionUser": {
    "name": "roles/bigquery.connectionUser",
    "title": "BigQuery Connection User",
    "includedPermissions": [
      "bigquery.connections.get",
      "bigquery.connections.getIamPolicy",
      "bigquery.connections.list",
      "bigquery.connections.use"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/bigquery.dataEditor": {
    "name": "roles/bigquery.dataEditor",
    "title": "BigQuery Data Editor",
    "description": "Access to edit all the contents of datasets",
    "includedPermissions": [
      "bigquery.datasets.create",
      "bigquery.datasets.get",
      "bigquery.datasets.getIamPolicy",
      "bigquery.datasets.updateTag",
      "bigquery.models.create",
      "bigquery.models.delete",
      "bigquery.models.getData",
      "bigquery.models.getMetadata",
      "bigquery.models.list",
      "bigquery.models.updateData",
      "bigquery.models.updateMetadata",
      "bigquery.models.updateTag",
      "bigquery.routines.create",
      "bigquery.routines.delete",
      "bigquery.routines.get",
      "bigquery.routines.list",
      "bigquery.routines.update",
      "bigquery.tables.create",
      "bigquery.tables.delete",
      "bigquery.tables.export",
      "bigquery.tables.get",
      "bigquery.tables.getData",
      "bigquery.tables.list",
      "bigquery.tables.update",
      "bigquery.tables.updateData",
      "bigquery.tables.updateTag",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/bigquery.dataOwner": {
    "name": "roles/bigquery.dataOwner",
    "title": "BigQuery Data Owner",
    "description": "Full access to datasets and all of their contents",
    "includedPermissions": [
      "bigquery.datasets.create",
      "bigquery.datasets.delete",
      "bigquery.datasets.get",
      "bigquery.datasets.getIamPolicy",
      "bigquery.datasets.setIamPolicy",
      "bigquery.datasets.update",
      "bigquery.datasets.updateTag",
      "bigquery.models.create",
      "bigquery.models.delete",
      "bigquery.models.getData",
      "bigquery.models.getMetadata",
      "bigquery.models.list",
      "bigquery.models.updateData",
      "bigquery.models.updateMetadata",
      "bigquery.models.updateTag",
      "bigquery.routines.create",
      "bigquery.routines.delete",
      "bigquery.routines.get",
      "bigquery.routines.list",
      "bigquery.routines.update",
      "bigquery.tables.create",
      "bigquery.tables.delete",
      "bigquery.tables.export",
      "bigquery.tables.get",
      "bigquery.tables.getData",
      "bigquery.tables.list",
      "bigquery.tables.setCategory",
      "bigquery.tables.update",
      "bigquery.tables.updateData",
      "bigquery.tables.updateTag",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/bigquery.dataViewer": {
    "name": "roles/bigquery.dataViewer",
    "title": "BigQuery Data Viewer",
    "description": "Access to view datasets and all of their contents",
    "includedPermissions": [
      "bigquery.datasets.get",
      "bigquery.datasets.getIamPolicy",
      "bigquery.models.getData",
      "bigquery.models.getMetadata",
      "bigquery.models.list",
      "bigquery.routines.get",
      "bigquery.routines.list",
      "bigquery.tables.export",
      "bigquery.tables.get",
      "bigquery.tables.getData",
      "bigquery.tables.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/bigquery.jobUser": {
    "name": "roles/bigquery.jobUser",
    "title": "BigQuery Job User",
    "description": "Access to run jobs",
    "includedPermissions": [
      "bigquery.jobs.create",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/bigquery.metadataViewer": {
    "name": "roles/bigquery.metadataViewer",
    "title": "BigQuery Metadata Viewer",
    "description": "Access to view table and dataset metadata",
    "includedPermissions": [
      "bigquery.datasets.get",
      "bigquery.datasets.getIamPolicy",
      "bigquery.models.getMetadata",
      "bigquery.models.list",
      "bigquery.routines.get",
      "bigquery.routines.list",
      "bigquery.tables.get",
      "bigquery.tables.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/bigquery.readSessionUser": {
    "name": "roles/bigquery.readSessionUser",
    "title": "BigQuery Read Session User",
    "description": "Access to create and use read sessions",
    "includedPermissions": [
      "bigquery.readsessions.create",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/bigquery.user": {
    "name": "roles/bigquery.user",
    "title": "BigQuery User",
    "description": "Access to run queries and create datasets",
    "includedPermissions": [
      "bigquery.config.get",
      "bigquery.datasets.create",
      "bigquery.datasets.get",
      "bigquery.datasets.getIamPolicy",
      "bigquery.jobs.create",
      "bigquery.jobs.list",
      "bigquery.models.list",
      "bigquery.readsessions.create",
      "bigquery.routines.list",
      "bigquery.savedqueries.get",
      "bigquery.savedqueries.list",
      "bigquery.tables.list",
      "bigquery.transfers.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/bigtable.admin": {
    "name": "roles/bigtable.admin",
    "title": "Bigtable Administrator",
    "description": "Full access to all Bigtable resources and ability to assign Bigtable IAM roles.",
    "includedPermissions": [
      "bigtable.appProfiles.create",
      "bigtable.appProfiles.delete",
      "bigtable.appProfiles.get",
      "bigtable.appProfiles.list",
      "bigtable.appProfiles.update",
      "bigtable.clusters.create",
      "bigtable.clusters.delete",
      "bigtable.clusters.get",
      "bigtable.clusters.list",
      "bigtable.clusters.update",
      "bigtable.instances.create",
      "bigtable.instances.delete",
      "bigtable.instances.get",
      "bigtable.instances.getIamPolicy",
      "bigtable.instances.list",
      "bigtable.instances.setIamPolicy",
      "bigtable.instances.update",
      "bigtable.locations.list",
      "bigtable.tables.checkConsistency",
      "bigtable.tables.create",
      "bigtable.tables.delete",
      "bigtable.tables.generateConsistencyToken",
      "bigtable.tables.get",
      "bigtable.tables.getIamPolicy",
      "bigtable.tables.list",
      "bigtable.tables.mutateRows",
      "bigtable.tables.readRows",
      "bigtable.tables.sampleRowKeys",
      "bigtable.tables.setIamPolicy",
      "bigtable.tables.update",
      "monitoring.metricDescriptors.get",
      "monitoring.metricDescriptors.list",
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/bigtable.reader": {
    "name": "roles/bigtable.reader",
    "title": "Bigtable Reader",
    "description": "Read access to data in existing tables; read access to metadata for instances, clusters, and tables, including column families.",
    "includedPermissions": [
      "bigtable.appProfiles.get",
      "bigtable.appProfiles.list",
      "bigtable.clusters.get",
      "bigtable.clusters.list",
      "bigtable.instances.get",
      "bigtable.instances.list",
      "bigtable.locations.list",
      "bigtable.tables.checkConsistency",
      "bigtable.tables.generateConsistencyToken",
      "bigtable.tables.get",
      "bigtable.tables.list",
      "bigtable.tables.readRows",
      "bigtable.tables.sampleRowKeys",
      "monitoring.metricDescriptors.get",
      "monitoring.metricDescriptors.list",
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/bigtable.user": {
    "name": "roles/bigtable.user",
    "title": "Bigtable User",
    "description": "Read and write access to data in existing tables; read access to metadata for instances, clusters, and tables, including column families.",
    "includedPermissions": [
      "bigtable.appProfiles.get",
      "bigtable.appProfiles.list",
      "bigtable.clusters.get",
      "bigtable.clusters.list",
      "bigtable.instances.get",
      "bigtable.instances.list",
      "bigtable.locations.list",
      "bigtable.tables.checkConsistency",
      "bigtable.tables.generateConsistencyToken",
      "bigtable.tables.get",
      "bigtable.tables.list",
      "bigtable.tables.mutateRows",
      "bigtable.tables.readRows",
      "bigtable.tables.sampleRowKeys",
      "monitoring.metricDescriptors.get",
      "monitoring.metricDescriptors.list",
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/bigtable.viewer": {
    "name": "roles/bigtable.viewer",
    "title": "Bigtable Viewer",
    "description": "Read access to metadata for instances, clusters, and tables, including column families.",
    "includedPermissions": [
      "bigtable.appProfiles.get",
      "bigtable.appProfiles.list",
      "bigtable.clusters.get",
      "bigtable.clusters.list",
      "bigtable.instances.get",
      "bigtable.instances.list",
      "bigtable.locations.list",
      "bigtable.tables.checkConsistency",
      "bigtable.tables.generateConsistencyToken",
      "bigtable.tables.get",
      "bigtable.tables.list",
      "monitoring.metricDescriptors.get",
      "monitoring.metricDescriptors.list",
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/billing.admin": {
    "name": "roles/billing.admin",
    "title": "Billing Account Administrator",
    "description": "Authorized to see and manage all aspects of billing accounts.",
    "includedPermissions": [
      "billing.accounts.close",
      "billing.accounts.get",
      "billing.accounts.getIamPolicy",
      "billing.accounts.getPaymentInfo",
      "billing.accounts.getSpendingInformation",
      "billing.accounts.getUsageExportSpec",
      "billing.accounts.list",
      "billing.accounts.move",
      "billing.accounts.redeemPromotion",
      "billing.accounts.removeFromOrganization",
      "billing.accounts.reopen",
      "billing.accounts.setIamPolicy",
      "billing.accounts.update",
      "billing.accounts.updatePaymentInfo",
      "billing.accounts.updateUsageExportSpec",
      "billing.budgets.create",
      "billing.budgets.delete",
      "billing.budgets.get",
      "billing.budgets.list",
      "billing.budgets.update",
      "billing.credits.list",
      "billing.resourceAssociations.create",
      "billing.resourceAssociations.delete",
      "billing.resourceAssociations.list",
      "billing.subscriptions.create",
      "billing.subscriptions.get",
      "billing.subscriptions.list",
      "billing.subscriptions.update",
      "cloudnotifications.activities.list",
      "logging.logEntries.list",
      "logging.logServiceIndexes.list",
      "logging.logServices.list",
      "logging.logs.list",
      "logging.privateLogEntries.list",
      "resourcemanager.projects.createBillingAssignment",
      "resourcemanager.projects.deleteBillingAssignment"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/billing.creator": {
    "name": "roles/billing.creator",
    "title": "Billing Account Creator",
    "description": "Creator of billing accounts.",
    "includedPermissions": [
      "billing.accounts.create",
      "resourcemanager.organizations.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/billing.projectManager": {
    "name": "roles/billing.projectManager",
    "title": "Project Billing Manager",
    "description": "Can assign a project's billing account or disable its billing.",
    "includedPermissions": [
      "resourcemanager.projects.createBillingAssignment",
      "resourcemanager.projects.deleteBillingAssignment"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/billing.user": {
    "name": "roles/billing.user",
    "title": "Billing Account User",
    "description": "Can associate projects with billing accounts",
    "includedPermissions": [
      "billing.accounts.get",
      "billing.accounts.getIamPolicy",
      "billing.accounts.list",
      "billing.accounts.redeemPromotion",
      "billing.credits.list",
      "billing.resourceAssociations.create"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/billing.viewer": {
    "name": "roles/billing.viewer",
    "title": "Billing Account Viewer",
    "description": "Can view information about billing accounts.",
    "includedPermissions": [
      "billing.accounts.get",
      "billing.accounts.getIamPolicy",
      "billing.accounts.getPaymentInfo",
      "billing.accounts.getSpendingInformation",
      "billing.accounts.getUsageExportSpec",
      "billing.accounts.list",
      "billing.budgets.get",
      "billing.budgets.list",
      "billing.credits.list",
      "billing.resourceAssociations.list",
      "billing.subscriptions.get",
      "billing.subscriptions.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/binaryauthorization.attestorsAdmin": {
    "name": "roles/binaryauthorization.attestorsAdmin",
    "title": "Binary Authorization Attestor Admin",
    "description": "Adminstrator of Binary Authorization Attestors",
    "includedPermissions": [
      "binaryauthorization.attestors.create",
      "binaryauthorization.attestors.delete",
      "binaryauthorization.attestors.get",
      "binaryauthorization.attestors.getIamPolicy",
      "binaryauthorization.attestors.list",
      "binaryauthorization.attestors.setIamPolicy",
      "binaryauthorization.attestors.update",
      "binaryauthorization.attestors.verifyImageAttested",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/binaryauthorization.attestorsEditor": {
    "name": "roles/binaryauthorization.attestorsEditor",
    "title": "Binary Authorization Attestor Editor",
    "description": "Editor of Binary Authorization Attestors",
    "includedPermissions": [
      "binaryauthorization.attestors.create",
      "binaryauthorization.attestors.delete",
      "binaryauthorization.attestors.get",
      "binaryauthorization.attestors.list",
      "binaryauthorization.attestors.update",
      "binaryauthorization.attestors.verifyImageAttested",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/binaryauthorization.attestorsVerifier": {
    "name": "roles/binaryauthorization.attestorsVerifier",
    "title": "Binary Authorization Attestor Image Verifier",
    "description": "Caller of Binary Authorization Attestors VerifyImageAttested",
    "includedPermissions": [
      "binaryauthorization.attestors.get",
      "binaryauthorization.attestors.list",
      "binaryauthorization.attestors.verifyImageAttested",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/binaryauthorization.attestorsViewer": {
    "name": "roles/binaryauthorization.attestorsViewer",
    "title": "Binary Authorization Attestor Viewer",
    "description": "Viewer of Binary Authorization Attestors",
    "includedPermissions": [
      "binaryauthorization.attestors.get",
      "binaryauthorization.attestors.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/binaryauthorization.policyAdmin": {
    "name": "roles/binaryauthorization.policyAdmin",
    "title": "Binary Authorization Policy Administrator",
    "description": "Administrator of Binary Authorization Policy",
    "includedPermissions": [
      "binaryauthorization.policy.get",
      "binaryauthorization.policy.getIamPolicy",
      "binaryauthorization.policy.setIamPolicy",
      "binaryauthorization.policy.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/binaryauthorization.policyEditor": {
    "name": "roles/binaryauthorization.policyEditor",
    "title": "Binary Authorization Policy Editor",
    "description": "Editor of Binary Authorization Policy",
    "includedPermissions": [
      "binaryauthorization.policy.get",
      "binaryauthorization.policy.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/binaryauthorization.policyViewer": {
    "name": "roles/binaryauthorization.policyViewer",
    "title": "Binary Authorization Policy Viewer",
    "description": "Viewer of Binary Authorization Policy",
    "includedPermissions": [
      "binaryauthorization.policy.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/browser": {
    "name": "roles/browser",
    "title": "Browser",
    "description": "Access to browse GCP resources.",
    "includedPermissions": [
      "resourcemanager.folders.get",
      "resourcemanager.folders.list",
      "resourcemanager.organizations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/chat.owner": {
    "name": "roles/chat.owner",
    "title": "Chat Bots Owner",
    "description": "Can view and modify bot configurations",
    "includedPermissions": [
      "chat.bots.get",
      "chat.bots.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/chat.reader": {
    "name": "roles/chat.reader",
    "title": "Chat Bots Viewer",
    "description": "Can view bot configurations",
    "includedPermissions": [
      "chat.bots.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudasset.owner": {
    "name": "roles/cloudasset.owner",
    "title": "Cloud Asset Owner",
    "description": "Full access to cloud assets metadata",
    "includedPermissions": [
      "cloudasset.assets.exportAccessLevel",
      "cloudasset.assets.exportAccessPolicy",
      "cloudasset.assets.exportAllAccessPolicy",
      "cloudasset.assets.exportAppengineApplications",
      "cloudasset.assets.exportAppengineServices",
      "cloudasset.assets.exportAppengineVersions",
      "cloudasset.assets.exportBigqueryDatasets",
      "cloudasset.assets.exportBigqueryTables",
      "cloudasset.assets.exportBigtableCluster",
      "cloudasset.assets.exportBigtableInstance",
      "cloudasset.assets.exportBigtableTable",
      "cloudasset.assets.exportCloudbillingBillingAccounts",
      "cloudasset.assets.exportCloudkmsCryptoKeyVersions",
      "cloudasset.assets.exportCloudkmsCryptoKeys",
      "cloudasset.assets.exportCloudkmsKeyRings",
      "cloudasset.assets.exportCloudresourcemanagerFolders",
      "cloudasset.assets.exportCloudresourcemanagerOrganizations",
      "cloudasset.assets.exportCloudresourcemanagerProjects",
      "cloudasset.assets.exportComputeAddress",
      "cloudasset.assets.exportComputeAutoscalers",
      "cloudasset.assets.exportComputeBackendBuckets",
      "cloudasset.assets.exportComputeBackendServices",
      "cloudasset.assets.exportComputeDisks",
      "cloudasset.assets.exportComputeFirewalls",
      "cloudasset.assets.exportComputeForwardingRules",
      "cloudasset.assets.exportComputeGlobalAddress",
      "cloudasset.assets.exportComputeGlobalForwardingRules",
      "cloudasset.assets.exportComputeHealthChecks",
      "cloudasset.assets.exportComputeHttpHealthChecks",
      "cloudasset.assets.exportComputeHttpsHealthChecks",
      "cloudasset.assets.exportComputeImages",
      "cloudasset.assets.exportComputeInstanceGroupManagers",
      "cloudasset.assets.exportComputeInstanceGroups",
      "cloudasset.assets.exportComputeInstanceTemplates",
      "cloudasset.assets.exportComputeInstances",
      "cloudasset.assets.exportComputeInterconnect",
      "cloudasset.assets.exportComputeInterconnectAttachment",
      "cloudasset.assets.exportComputeLicenses",
      "cloudasset.assets.exportComputeNetworks",
      "cloudasset.assets.exportComputeProjects",
      "cloudasset.assets.exportComputeRegionAutoscaler",
      "cloudasset.assets.exportComputeRegionBackendServices",
      "cloudasset.assets.exportComputeRegionDisk",
      "cloudasset.assets.exportComputeRegionInstanceGroup",
      "cloudasset.assets.exportComputeRegionInstanceGroupManager",
      "cloudasset.assets.exportComputeRouters",
      "cloudasset.assets.exportComputeRoutes",
      "cloudasset.assets.exportComputeSecurityPolicy",
      "cloudasset.assets.exportComputeSnapshots",
      "cloudasset.assets.exportComputeSslCertificates",
      "cloudasset.assets.exportComputeSubnetworks",
      "cloudasset.assets.exportComputeTargetHttpProxies",
      "cloudasset.assets.exportComputeTargetHttpsProxies",
      "cloudasset.assets.exportComputeTargetInstances",
      "cloudasset.assets.exportComputeTargetPools",
      "cloudasset.assets.exportComputeTargetSslProxies",
      "cloudasset.assets.exportComputeTargetTcpProxies",
      "cloudasset.assets.exportComputeTargetVpnGateways",
      "cloudasset.assets.exportComputeUrlMaps",
      "cloudasset.assets.exportComputeVpnTunnels",
      "cloudasset.assets.exportContainerClusterrole",
      "cloudasset.assets.exportContainerClusterrolebinding",
      "cloudasset.assets.exportContainerClusters",
      "cloudasset.assets.exportContainerNamespace",
      "cloudasset.assets.exportContainerNode",
      "cloudasset.assets.exportContainerNodepool",
      "cloudasset.assets.exportContainerPod",
      "cloudasset.assets.exportContainerRole",
      "cloudasset.assets.exportContainerRolebinding",
      "cloudasset.assets.exportContainerregistryImage",
      "cloudasset.assets.exportDatafusionInstance",
      "cloudasset.assets.exportDataprocClusters",
      "cloudasset.assets.exportDataprocJobs",
      "cloudasset.assets.exportDnsManagedZones",
      "cloudasset.assets.exportDnsPolicies",
      "cloudasset.assets.exportIamPolicy",
      "cloudasset.assets.exportIamRoles",
      "cloudasset.assets.exportIamServiceAccountKeys",
      "cloudasset.assets.exportIamServiceAccounts",
      "cloudasset.assets.exportManagedidentitiesDomain",
      "cloudasset.assets.exportOrgPolicy",
      "cloudasset.assets.exportPubsubSubscriptions",
      "cloudasset.assets.exportPubsubTopics",
      "cloudasset.assets.exportResource",
      "cloudasset.assets.exportServicePerimeter",
      "cloudasset.assets.exportServicemanagementServices",
      "cloudasset.assets.exportSpannerDatabases",
      "cloudasset.assets.exportSpannerInstances",
      "cloudasset.assets.exportSqladminInstances",
      "cloudasset.assets.exportStorageBuckets",
      "cloudasset.feeds.create",
      "cloudasset.feeds.delete",
      "cloudasset.feeds.get",
      "cloudasset.feeds.list",
      "cloudasset.feeds.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudasset.serviceAgent": {
    "name": "roles/cloudasset.serviceAgent",
    "title": "Cloud Asset Service Agent",
    "description": "Gives Cloud Asset service agent permissions to Cloud Storage and BigQuery for exporting Assets, and permission to publish to Cloud Pub/Sub topics for Asset Real Time Feed.",
    "includedPermissions": [
      "bigquery.datasets.get",
      "bigquery.jobs.create",
      "bigquery.jobs.get",
      "bigquery.tables.create",
      "bigquery.tables.delete",
      "bigquery.tables.get",
      "bigquery.tables.updateData",
      "pubsub.topics.publish",
      "storage.buckets.create",
      "storage.buckets.get",
      "storage.buckets.getIamPolicy",
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.get"
    ],
    "etag": "AA=="
  },
  "roles/cloudasset.viewer": {
    "name": "roles/cloudasset.viewer",
    "title": "Cloud Asset Viewer",
    "description": "Read only access to cloud assets metadata",
    "includedPermissions": [
      "cloudasset.assets.exportAccessLevel",
      "cloudasset.assets.exportAccessPolicy",
      "cloudasset.assets.exportAllAccessPolicy",
      "cloudasset.assets.exportAppengineApplications",
      "cloudasset.assets.exportAppengineServices",
      "cloudasset.assets.exportAppengineVersions",
      "cloudasset.assets.exportBigqueryDatasets",
      "cloudasset.assets.exportBigqueryTables",
      "cloudasset.assets.exportBigtableCluster",
      "cloudasset.assets.exportBigtableInstance",
      "cloudasset.assets.exportBigtableTable",
      "cloudasset.assets.exportCloudbillingBillingAccounts",
      "cloudasset.assets.exportCloudkmsCryptoKeyVersions",
      "cloudasset.assets.exportCloudkmsCryptoKeys",
      "cloudasset.assets.exportCloudkmsKeyRings",
      "cloudasset.assets.exportCloudresourcemanagerFolders",
      "cloudasset.assets.exportCloudresourcemanagerOrganizations",
      "cloudasset.assets.exportCloudresourcemanagerProjects",
      "cloudasset.assets.exportComputeAddress",
      "cloudasset.assets.exportComputeAutoscalers",
      "cloudasset.assets.exportComputeBackendBuckets",
      "cloudasset.assets.exportComputeBackendServices",
      "cloudasset.assets.exportComputeDisks",
      "cloudasset.assets.exportComputeFirewalls",
      "cloudasset.assets.exportComputeForwardingRules",
      "cloudasset.assets.exportComputeGlobalAddress",
      "cloudasset.assets.exportComputeGlobalForwardingRules",
      "cloudasset.assets.exportComputeHealthChecks",
      "cloudasset.assets.exportComputeHttpHealthChecks",
      "cloudasset.assets.exportComputeHttpsHealthChecks",
      "cloudasset.assets.exportComputeImages",
      "cloudasset.assets.exportComputeInstanceGroupManagers",
      "cloudasset.assets.exportComputeInstanceGroups",
      "cloudasset.assets.exportComputeInstanceTemplates",
      "cloudasset.assets.exportComputeInstances",
      "cloudasset.assets.exportComputeInterconnect",
      "cloudasset.assets.exportComputeInterconnectAttachment",
      "cloudasset.assets.exportComputeLicenses",
      "cloudasset.assets.exportComputeNetworks",
      "cloudasset.assets.exportComputeProjects",
      "cloudasset.assets.exportComputeRegionAutoscaler",
      "cloudasset.assets.exportComputeRegionBackendServices",
      "cloudasset.assets.exportComputeRegionDisk",
      "cloudasset.assets.exportComputeRegionInstanceGroup",
      "cloudasset.assets.exportComputeRegionInstanceGroupManager",
      "cloudasset.assets.exportComputeRouters",
      "cloudasset.assets.exportComputeRoutes",
      "cloudasset.assets.exportComputeSecurityPolicy",
      "cloudasset.assets.exportComputeSnapshots",
      "cloudasset.assets.exportComputeSslCertificates",
      "cloudasset.assets.exportComputeSubnetworks",
      "cloudasset.assets.exportComputeTargetHttpProxies",
      "cloudasset.assets.exportComputeTargetHttpsProxies",
      "cloudasset.assets.exportComputeTargetInstances",
      "cloudasset.assets.exportComputeTargetPools",
      "cloudasset.assets.exportComputeTargetSslProxies",
      "cloudasset.assets.exportComputeTargetTcpProxies",
      "cloudasset.assets.exportComputeTargetVpnGateways",
      "cloudasset.assets.exportComputeUrlMaps",
      "cloudasset.assets.exportComputeVpnTunnels",
      "cloudasset.assets.exportContainerClusterrole",
      "cloudasset.assets.exportContainerClusterrolebinding",
      "cloudasset.assets.exportContainerClusters",
      "cloudasset.assets.exportContainerNamespace",
      "cloudasset.assets.exportContainerNode",
      "cloudasset.assets.exportContainerNodepool",
      "cloudasset.assets.exportContainerPod",
      "cloudasset.assets.exportContainerRole",
      "cloudasset.assets.exportContainerRolebinding",
      "cloudasset.assets.exportContainerregistryImage",
      "cloudasset.assets.exportDatafusionInstance",
      "cloudasset.assets.exportDataprocClusters",
      "cloudasset.assets.exportDataprocJobs",
      "cloudasset.assets.exportDnsManagedZones",
      "cloudasset.assets.exportDnsPolicies",
      "cloudasset.assets.exportIamPolicy",
      "cloudasset.assets.exportIamRoles",
      "cloudasset.assets.exportIamServiceAccountKeys",
      "cloudasset.assets.exportIamServiceAccounts",
      "cloudasset.assets.exportManagedidentitiesDomain",
      "cloudasset.assets.exportOrgPolicy",
      "cloudasset.assets.exportPubsubSubscriptions",
      "cloudasset.assets.exportPubsubTopics",
      "cloudasset.assets.exportResource",
      "cloudasset.assets.exportServicePerimeter",
      "cloudasset.assets.exportServicemanagementServices",
      "cloudasset.assets.exportSpannerDatabases",
      "cloudasset.assets.exportSpannerInstances",
      "cloudasset.assets.exportSqladminInstances",
      "cloudasset.assets.exportStorageBuckets"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudbuild.builds.builder": {
    "name": "roles/cloudbuild.builds.builder",
    "title": "Cloud Build Service Account",
    "description": "Can perform builds",
    "includedPermissions": [
      "artifactregistry.files.get",
      "artifactregistry.files.list",
      "artifactregistry.packages.get",
      "artifactregistry.packages.list",
      "artifactregistry.repositories.downloadArtifacts",
      "artifactregistry.repositories.get",
      "artifactregistry.repositories.list",
      "artifactregistry.repositories.uploadArtifacts",
      "artifactregistry.tags.create",
      "artifactregistry.tags.get",
      "artifactregistry.tags.list",
      "artifactregistry.tags.update",
      "artifactregistry.versions.get",
      "artifactregistry.versions.list",
      "cloudbuild.builds.create",
      "cloudbuild.builds.get",
      "cloudbuild.builds.list",
      "cloudbuild.builds.update",
      "logging.logEntries.create",
      "pubsub.topics.create",
      "pubsub.topics.publish",
      "remotebuildexecution.blobs.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "source.repos.get",
      "source.repos.list",
      "storage.buckets.create",
      "storage.buckets.get",
      "storage.buckets.list",
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.get",
      "storage.objects.list",
      "storage.objects.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudbuild.builds.editor": {
    "name": "roles/cloudbuild.builds.editor",
    "title": "Cloud Build Editor",
    "description": "Can create and cancel builds",
    "includedPermissions": [
      "cloudbuild.builds.create",
      "cloudbuild.builds.get",
      "cloudbuild.builds.list",
      "cloudbuild.builds.update",
      "remotebuildexecution.blobs.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudbuild.builds.viewer": {
    "name": "roles/cloudbuild.builds.viewer",
    "title": "Cloud Build Viewer",
    "description": "Can view builds",
    "includedPermissions": [
      "cloudbuild.builds.get",
      "cloudbuild.builds.list",
      "remotebuildexecution.blobs.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudbuild.serviceAgent": {
    "name": "roles/cloudbuild.serviceAgent",
    "title": "Cloud Build Service Agent",
    "description": "Gives Cloud Build service account access to managed resources.",
    "includedPermissions": [
      "artifactregistry.files.get",
      "artifactregistry.files.list",
      "artifactregistry.packages.get",
      "artifactregistry.packages.list",
      "artifactregistry.repositories.downloadArtifacts",
      "artifactregistry.repositories.get",
      "artifactregistry.repositories.list",
      "artifactregistry.repositories.uploadArtifacts",
      "artifactregistry.tags.create",
      "artifactregistry.tags.get",
      "artifactregistry.tags.list",
      "artifactregistry.tags.update",
      "artifactregistry.versions.get",
      "artifactregistry.versions.list",
      "cloudbuild.builds.create",
      "cloudbuild.builds.get",
      "cloudbuild.builds.list",
      "cloudbuild.builds.update",
      "compute.firewalls.get",
      "compute.firewalls.list",
      "compute.networks.get",
      "compute.subnetworks.get",
      "logging.logEntries.create",
      "pubsub.topics.create",
      "pubsub.topics.publish",
      "remotebuildexecution.blobs.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "source.repos.get",
      "source.repos.list",
      "storage.buckets.create",
      "storage.buckets.get",
      "storage.buckets.list",
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.get",
      "storage.objects.list",
      "storage.objects.update"
    ],
    "etag": "AA=="
  },
  "roles/cloudconfig.admin": {
    "name": "roles/cloudconfig.admin",
    "title": "Firebase Remote Config Admin",
    "description": "Full access to Firebase Remote Config resources.",
    "includedPermissions": [
      "cloudconfig.configs.get",
      "cloudconfig.configs.update",
      "firebase.clients.get",
      "firebase.projects.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudconfig.viewer": {
    "name": "roles/cloudconfig.viewer",
    "title": "Firebase Remote Config Viewer",
    "description": "Read access to Firebase Remote Config resources.",
    "includedPermissions": [
      "cloudconfig.configs.get",
      "firebase.clients.get",
      "firebase.projects.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/clouddebugger.agent": {
    "name": "roles/clouddebugger.agent",
    "title": "Stackdriver Debugger Agent",
    "description": "Stackdriver Debugger agents are allowed to register and provide debug snapshot data.",
    "includedPermissions": [
      "clouddebugger.breakpoints.list",
      "clouddebugger.breakpoints.listActive",
      "clouddebugger.breakpoints.update",
      "clouddebugger.debuggees.create"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/clouddebugger.user": {
    "name": "roles/clouddebugger.user",
    "title": "Stackdriver Debugger User",
    "description": "User Access to Stackdriver Debugger.  Can create, delete and view snapshots and logpoints.",
    "includedPermissions": [
      "clouddebugger.breakpoints.create",
      "clouddebugger.breakpoints.delete",
      "clouddebugger.breakpoints.get",
      "clouddebugger.breakpoints.list",
      "clouddebugger.debuggees.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudfunctions.admin": {
    "name": "roles/cloudfunctions.admin",
    "title": "Cloud Functions Admin",
    "description": "Full access to functions, operations and locations.",
    "includedPermissions": [
      "cloudfunctions.functions.call",
      "cloudfunctions.functions.create",
      "cloudfunctions.functions.delete",
      "cloudfunctions.functions.get",
      "cloudfunctions.functions.getIamPolicy",
      "cloudfunctions.functions.invoke",
      "cloudfunctions.functions.list",
      "cloudfunctions.functions.setIamPolicy",
      "cloudfunctions.functions.sourceCodeGet",
      "cloudfunctions.functions.sourceCodeSet",
      "cloudfunctions.functions.update",
      "cloudfunctions.locations.list",
      "cloudfunctions.operations.get",
      "cloudfunctions.operations.list",
      "resourcemanager.projects.get",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudfunctions.developer": {
    "name": "roles/cloudfunctions.developer",
    "title": "Cloud Functions Developer",
    "description": "Read and write access to all functions-related resources.",
    "includedPermissions": [
      "cloudfunctions.functions.call",
      "cloudfunctions.functions.create",
      "cloudfunctions.functions.delete",
      "cloudfunctions.functions.get",
      "cloudfunctions.functions.invoke",
      "cloudfunctions.functions.list",
      "cloudfunctions.functions.sourceCodeGet",
      "cloudfunctions.functions.sourceCodeSet",
      "cloudfunctions.functions.update",
      "cloudfunctions.locations.list",
      "cloudfunctions.operations.get",
      "cloudfunctions.operations.list",
      "resourcemanager.projects.get",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudfunctions.invoker": {
    "name": "roles/cloudfunctions.invoker",
    "title": "Cloud Functions Invoker",
    "description": "Ability to invoke HTTP functions with restricted access.",
    "includedPermissions": [
      "cloudfunctions.functions.invoke"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudfunctions.serviceAgent": {
    "name": "roles/cloudfunctions.serviceAgent",
    "title": "Cloud Functions Service Agent",
    "description": "Gives Cloud Functions service account access to managed resources.",
    "includedPermissions": [
      "clientauthconfig.clients.list",
      "cloudbuild.builds.create",
      "cloudbuild.builds.get",
      "cloudbuild.builds.list",
      "cloudbuild.builds.update",
      "cloudfunctions.functions.invoke",
      "compute.globalOperations.get",
      "firebasedatabase.instances.get",
      "firebasedatabase.instances.update",
      "iam.serviceAccounts.getAccessToken",
      "iam.serviceAccounts.getOpenIdToken",
      "iam.serviceAccounts.signBlob",
      "pubsub.subscriptions.consume",
      "pubsub.subscriptions.create",
      "pubsub.subscriptions.delete",
      "pubsub.subscriptions.get",
      "pubsub.subscriptions.getIamPolicy",
      "pubsub.subscriptions.list",
      "pubsub.subscriptions.setIamPolicy",
      "pubsub.subscriptions.update",
      "pubsub.topics.attachSubscription",
      "pubsub.topics.create",
      "pubsub.topics.get",
      "remotebuildexecution.blobs.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.disable",
      "serviceusage.services.enable",
      "storage.buckets.create",
      "storage.buckets.get",
      "storage.buckets.update",
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.get",
      "storage.objects.list",
      "vpcaccess.connectors.get",
      "vpcaccess.connectors.use"
    ],
    "etag": "AA=="
  },
  "roles/cloudfunctions.viewer": {
    "name": "roles/cloudfunctions.viewer",
    "title": "Cloud Functions Viewer",
    "description": "Read-only access to functions and locations.",
    "includedPermissions": [
      "cloudfunctions.functions.get",
      "cloudfunctions.functions.list",
      "cloudfunctions.locations.list",
      "cloudfunctions.operations.get",
      "cloudfunctions.operations.list",
      "resourcemanager.projects.get",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudiot.admin": {
    "name": "roles/cloudiot.admin",
    "title": "Cloud IoT Admin",
    "description": "Full control of all Cloud IoT resources and permissions.",
    "includedPermissions": [
      "cloudiot.devices.bindGateway",
      "cloudiot.devices.create",
      "cloudiot.devices.delete",
      "cloudiot.devices.get",
      "cloudiot.devices.list",
      "cloudiot.devices.sendCommand",
      "cloudiot.devices.unbindGateway",
      "cloudiot.devices.update",
      "cloudiot.devices.updateConfig",
      "cloudiot.registries.create",
      "cloudiot.registries.delete",
      "cloudiot.registries.get",
      "cloudiot.registries.getIamPolicy",
      "cloudiot.registries.list",
      "cloudiot.registries.setIamPolicy",
      "cloudiot.registries.update",
      "cloudiottoken.tokensettings.get",
      "cloudiottoken.tokensettings.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudiot.deviceController": {
    "name": "roles/cloudiot.deviceController",
    "title": "Cloud IoT Device Controller",
    "description": "Access to update the device configuration, but not to create or delete devices.",
    "includedPermissions": [
      "cloudiot.devices.get",
      "cloudiot.devices.list",
      "cloudiot.devices.sendCommand",
      "cloudiot.devices.updateConfig",
      "cloudiot.registries.get",
      "cloudiot.registries.list",
      "cloudiottoken.tokensettings.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudiot.editor": {
    "name": "roles/cloudiot.editor",
    "title": "Cloud IoT Editor",
    "description": "Read-write access to all Cloud IoT resources.",
    "includedPermissions": [
      "cloudiot.devices.bindGateway",
      "cloudiot.devices.create",
      "cloudiot.devices.delete",
      "cloudiot.devices.get",
      "cloudiot.devices.list",
      "cloudiot.devices.sendCommand",
      "cloudiot.devices.unbindGateway",
      "cloudiot.devices.update",
      "cloudiot.devices.updateConfig",
      "cloudiot.registries.create",
      "cloudiot.registries.delete",
      "cloudiot.registries.get",
      "cloudiot.registries.list",
      "cloudiot.registries.update",
      "cloudiottoken.tokensettings.get",
      "cloudiottoken.tokensettings.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudiot.provisioner": {
    "name": "roles/cloudiot.provisioner",
    "title": "Cloud IoT Provisioner",
    "description": "Access to create and delete devices from registries, but not to modify the registries.",
    "includedPermissions": [
      "cloudiot.devices.bindGateway",
      "cloudiot.devices.create",
      "cloudiot.devices.delete",
      "cloudiot.devices.get",
      "cloudiot.devices.list",
      "cloudiot.devices.sendCommand",
      "cloudiot.devices.unbindGateway",
      "cloudiot.devices.update",
      "cloudiot.devices.updateConfig",
      "cloudiot.registries.get",
      "cloudiot.registries.list",
      "cloudiottoken.tokensettings.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudiot.viewer": {
    "name": "roles/cloudiot.viewer",
    "title": "Cloud IoT Viewer",
    "description": "Read-only access to all Cloud IoT resources.",
    "includedPermissions": [
      "cloudiot.devices.get",
      "cloudiot.devices.list",
      "cloudiot.registries.get",
      "cloudiot.registries.list",
      "cloudiottoken.tokensettings.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudjobdiscovery.admin": {
    "name": "roles/cloudjobdiscovery.admin",
    "title": "Admin",
    "description": "Access to Cloud Talent Solution Self-Service Tools.",
    "includedPermissions": [
      "cloudjobdiscovery.tools.access",
      "iam.serviceAccounts.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudjobdiscovery.jobsEditor": {
    "name": "roles/cloudjobdiscovery.jobsEditor",
    "title": "Job Editor",
    "description": "Write access to all job data in Cloud Talent Solution.",
    "includedPermissions": [
      "cloudjobdiscovery.companies.create",
      "cloudjobdiscovery.companies.delete",
      "cloudjobdiscovery.companies.get",
      "cloudjobdiscovery.companies.list",
      "cloudjobdiscovery.companies.update",
      "cloudjobdiscovery.events.create",
      "cloudjobdiscovery.jobs.create",
      "cloudjobdiscovery.jobs.delete",
      "cloudjobdiscovery.jobs.get",
      "cloudjobdiscovery.jobs.search",
      "cloudjobdiscovery.jobs.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudjobdiscovery.jobsViewer": {
    "name": "roles/cloudjobdiscovery.jobsViewer",
    "title": "Job Viewer",
    "description": "Read access to all job data in Cloud Talent Solution.",
    "includedPermissions": [
      "cloudjobdiscovery.companies.get",
      "cloudjobdiscovery.companies.list",
      "cloudjobdiscovery.jobs.get",
      "cloudjobdiscovery.jobs.search",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudjobdiscovery.profilesEditor": {
    "name": "roles/cloudjobdiscovery.profilesEditor",
    "title": "Profile Editor",
    "description": "Write access to all profile data in Cloud Talent Solution.",
    "includedPermissions": [
      "cloudjobdiscovery.events.create",
      "cloudjobdiscovery.profiles.create",
      "cloudjobdiscovery.profiles.delete",
      "cloudjobdiscovery.profiles.get",
      "cloudjobdiscovery.profiles.search",
      "cloudjobdiscovery.profiles.update",
      "cloudjobdiscovery.tenants.create",
      "cloudjobdiscovery.tenants.delete",
      "cloudjobdiscovery.tenants.get",
      "cloudjobdiscovery.tenants.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudjobdiscovery.profilesViewer": {
    "name": "roles/cloudjobdiscovery.profilesViewer",
    "title": "Profile Viewer",
    "description": "Read access to all profile data in Cloud Talent Solution.",
    "includedPermissions": [
      "cloudjobdiscovery.profiles.get",
      "cloudjobdiscovery.profiles.search",
      "cloudjobdiscovery.tenants.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudkms.admin": {
    "name": "roles/cloudkms.admin",
    "title": "Cloud KMS Admin",
    "description": "Enables management of crypto resources.",
    "includedPermissions": [
      "cloudkms.cryptoKeyVersions.create",
      "cloudkms.cryptoKeyVersions.destroy",
      "cloudkms.cryptoKeyVersions.get",
      "cloudkms.cryptoKeyVersions.list",
      "cloudkms.cryptoKeyVersions.restore",
      "cloudkms.cryptoKeyVersions.update",
      "cloudkms.cryptoKeys.create",
      "cloudkms.cryptoKeys.get",
      "cloudkms.cryptoKeys.getIamPolicy",
      "cloudkms.cryptoKeys.list",
      "cloudkms.cryptoKeys.setIamPolicy",
      "cloudkms.cryptoKeys.update",
      "cloudkms.importJobs.create",
      "cloudkms.importJobs.get",
      "cloudkms.importJobs.getIamPolicy",
      "cloudkms.importJobs.list",
      "cloudkms.importJobs.setIamPolicy",
      "cloudkms.importJobs.useToImport",
      "cloudkms.keyRings.create",
      "cloudkms.keyRings.get",
      "cloudkms.keyRings.getIamPolicy",
      "cloudkms.keyRings.list",
      "cloudkms.keyRings.setIamPolicy",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudkms.cryptoKeyDecrypter": {
    "name": "roles/cloudkms.cryptoKeyDecrypter",
    "title": "Cloud KMS CryptoKey Decrypter",
    "description": "Enables Decrypt operations",
    "includedPermissions": [
      "cloudkms.cryptoKeyVersions.useToDecrypt",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudkms.cryptoKeyEncrypter": {
    "name": "roles/cloudkms.cryptoKeyEncrypter",
    "title": "Cloud KMS CryptoKey Encrypter",
    "description": "Enables Encrypt operations",
    "includedPermissions": [
      "cloudkms.cryptoKeyVersions.useToEncrypt",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudkms.cryptoKeyEncrypterDecrypter": {
    "name": "roles/cloudkms.cryptoKeyEncrypterDecrypter",
    "title": "Cloud KMS CryptoKey Encrypter/Decrypter",
    "description": "Enables Encrypt and Decrypt operations",
    "includedPermissions": [
      "cloudkms.cryptoKeyVersions.useToDecrypt",
      "cloudkms.cryptoKeyVersions.useToEncrypt",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudkms.importer": {
    "name": "roles/cloudkms.importer",
    "title": "Cloud KMS Importer",
    "description": "Enables ImportCryptoKeyVersion, CreateImportJob, ListImportJobs, and GetImportJob operations",
    "includedPermissions": [
      "cloudkms.importJobs.create",
      "cloudkms.importJobs.get",
      "cloudkms.importJobs.list",
      "cloudkms.importJobs.useToImport",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudkms.publicKeyViewer": {
    "name": "roles/cloudkms.publicKeyViewer",
    "title": "Cloud KMS CryptoKey Public Key Viewer",
    "description": "Enables GetPublicKey operations",
    "includedPermissions": [
      "cloudkms.cryptoKeyVersions.viewPublicKey",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudkms.signer": {
    "name": "roles/cloudkms.signer",
    "title": "Cloud KMS CryptoKey Signer",
    "description": "Enables the AsymmetricSign operation",
    "includedPermissions": [
      "cloudkms.cryptoKeyVersions.useToSign",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudkms.signerVerifier": {
    "name": "roles/cloudkms.signerVerifier",
    "title": "Cloud KMS CryptoKey Signer/Verifier",
    "description": "Enables AsymmetricSign, and GetPublicKey operations",
    "includedPermissions": [
      "cloudkms.cryptoKeyVersions.useToSign",
      "cloudkms.cryptoKeyVersions.viewPublicKey",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudmigration.inframanager": {
    "name": "roles/cloudmigration.inframanager",
    "title": "Velostrata Manager",
    "description": "Ability to create and manage Compute VMs to run Velostrata Infrastructure",
    "includedPermissions": [
      "cloudmigration.velostrataendpoints.connect",
      "compute.addresses.create",
      "compute.addresses.createInternal",
      "compute.addresses.delete",
      "compute.addresses.deleteInternal",
      "compute.addresses.get",
      "compute.addresses.list",
      "compute.addresses.setLabels",
      "compute.addresses.use",
      "compute.addresses.useInternal",
      "compute.diskTypes.get",
      "compute.diskTypes.list",
      "compute.disks.create",
      "compute.disks.createSnapshot",
      "compute.disks.delete",
      "compute.disks.get",
      "compute.disks.list",
      "compute.disks.setLabels",
      "compute.disks.update",
      "compute.disks.use",
      "compute.disks.useReadOnly",
      "compute.globalOperations.get",
      "compute.images.get",
      "compute.images.list",
      "compute.images.useReadOnly",
      "compute.instances.attachDisk",
      "compute.instances.create",
      "compute.instances.delete",
      "compute.instances.detachDisk",
      "compute.instances.get",
      "compute.instances.getSerialPortOutput",
      "compute.instances.list",
      "compute.instances.reset",
      "compute.instances.setDiskAutoDelete",
      "compute.instances.setLabels",
      "compute.instances.setMachineType",
      "compute.instances.setMetadata",
      "compute.instances.setMinCpuPlatform",
      "compute.instances.setScheduling",
      "compute.instances.setServiceAccount",
      "compute.instances.setTags",
      "compute.instances.start",
      "compute.instances.startWithEncryptionKey",
      "compute.instances.stop",
      "compute.instances.updateNetworkInterface",
      "compute.instances.updateShieldedInstanceConfig",
      "compute.instances.use",
      "compute.licenseCodes.get",
      "compute.licenseCodes.list",
      "compute.licenseCodes.update",
      "compute.licenseCodes.use",
      "compute.licenses.get",
      "compute.licenses.list",
      "compute.machineTypes.get",
      "compute.machineTypes.list",
      "compute.networks.get",
      "compute.networks.list",
      "compute.networks.use",
      "compute.networks.useExternalIp",
      "compute.nodeGroups.get",
      "compute.nodeGroups.list",
      "compute.nodeTemplates.list",
      "compute.projects.get",
      "compute.regionOperations.get",
      "compute.regions.get",
      "compute.regions.list",
      "compute.snapshots.create",
      "compute.snapshots.delete",
      "compute.snapshots.get",
      "compute.snapshots.setLabels",
      "compute.snapshots.useReadOnly",
      "compute.subnetworks.get",
      "compute.subnetworks.list",
      "compute.subnetworks.use",
      "compute.subnetworks.useExternalIp",
      "compute.zoneOperations.get",
      "compute.zones.get",
      "compute.zones.list",
      "gkehub.endpoints.connect",
      "iam.serviceAccounts.get",
      "iam.serviceAccounts.list",
      "resourcemanager.projects.get",
      "storage.buckets.create",
      "storage.buckets.delete",
      "storage.buckets.get",
      "storage.buckets.list",
      "storage.buckets.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudmigration.storageaccess": {
    "name": "roles/cloudmigration.storageaccess",
    "title": "Velostrata Storage Access",
    "description": "Ability to access migration storage",
    "includedPermissions": [
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.get",
      "storage.objects.list",
      "storage.objects.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudmigration.velostrataconnect": {
    "name": "roles/cloudmigration.velostrataconnect",
    "title": "Velostrata Manager Connection Agent",
    "description": "Ability to set up connection between Velostrata Manager and Google",
    "includedPermissions": [
      "cloudmigration.velostrataendpoints.connect",
      "gkehub.endpoints.connect"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudprivatecatalog.consumer": {
    "name": "roles/cloudprivatecatalog.consumer",
    "title": "Catalog Consumer",
    "description": "Can browse catalogs in the target resource context.",
    "includedPermissions": [
      "cloudprivatecatalog.targets.get"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudprivatecatalogproducer.admin": {
    "name": "roles/cloudprivatecatalogproducer.admin",
    "title": "Catalog Admin",
    "description": "Can manage catalog and view its associations.",
    "includedPermissions": [
      "cloudprivatecatalogproducer.associations.create",
      "cloudprivatecatalogproducer.associations.delete",
      "cloudprivatecatalogproducer.associations.get",
      "cloudprivatecatalogproducer.associations.list",
      "cloudprivatecatalogproducer.catalogs.create",
      "cloudprivatecatalogproducer.catalogs.delete",
      "cloudprivatecatalogproducer.catalogs.get",
      "cloudprivatecatalogproducer.catalogs.getIamPolicy",
      "cloudprivatecatalogproducer.catalogs.list",
      "cloudprivatecatalogproducer.catalogs.setIamPolicy",
      "cloudprivatecatalogproducer.catalogs.undelete",
      "cloudprivatecatalogproducer.catalogs.update",
      "resourcemanager.folders.get",
      "resourcemanager.folders.list",
      "resourcemanager.organizations.get"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudprivatecatalogproducer.manager": {
    "name": "roles/cloudprivatecatalogproducer.manager",
    "title": "Catalog Manager",
    "description": "Can manage associations between a catalog and a target resource.",
    "includedPermissions": [
      "cloudprivatecatalog.targets.get",
      "cloudprivatecatalogproducer.associations.create",
      "cloudprivatecatalogproducer.associations.delete",
      "cloudprivatecatalogproducer.associations.get",
      "cloudprivatecatalogproducer.associations.list",
      "cloudprivatecatalogproducer.catalogs.get",
      "cloudprivatecatalogproducer.catalogs.list",
      "cloudprivatecatalogproducer.targets.associate",
      "cloudprivatecatalogproducer.targets.unassociate",
      "resourcemanager.folders.get",
      "resourcemanager.folders.list",
      "resourcemanager.organizations.get"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudprofiler.agent": {
    "name": "roles/cloudprofiler.agent",
    "title": "Stackdriver Profiler Agent",
    "description": "Stackdriver Profiler agents are allowed to register and provide the profiling data.",
    "includedPermissions": [
      "cloudprofiler.profiles.create",
      "cloudprofiler.profiles.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudprofiler.user": {
    "name": "roles/cloudprofiler.user",
    "title": "Stackdriver Profiler User",
    "description": "Stackdriver Profiler users are allowed to query and view the profiling data.",
    "includedPermissions": [
      "cloudprofiler.profiles.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudscheduler.admin": {
    "name": "roles/cloudscheduler.admin",
    "title": "Cloud Scheduler Admin",
    "description": "Full access to jobs and executions.",
    "includedPermissions": [
      "appengine.applications.get",
      "cloudscheduler.jobs.create",
      "cloudscheduler.jobs.delete",
      "cloudscheduler.jobs.enable",
      "cloudscheduler.jobs.fullView",
      "cloudscheduler.jobs.get",
      "cloudscheduler.jobs.list",
      "cloudscheduler.jobs.pause",
      "cloudscheduler.jobs.run",
      "cloudscheduler.jobs.update",
      "cloudscheduler.locations.get",
      "cloudscheduler.locations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudscheduler.jobRunner": {
    "name": "roles/cloudscheduler.jobRunner",
    "title": "Cloud Scheduler Job Runner",
    "description": "Access to run jobs.",
    "includedPermissions": [
      "appengine.applications.get",
      "cloudscheduler.jobs.fullView",
      "cloudscheduler.jobs.run",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudscheduler.serviceAgent": {
    "name": "roles/cloudscheduler.serviceAgent",
    "title": "Cloud Scheduler Service Agent",
    "description": "Grants Cloud Scheduler Service Account access to manage resources.",
    "includedPermissions": [
      "iam.serviceAccounts.getAccessToken",
      "iam.serviceAccounts.getOpenIdToken",
      "logging.logEntries.create",
      "pubsub.topics.publish"
    ],
    "etag": "AA=="
  },
  "roles/cloudscheduler.viewer": {
    "name": "roles/cloudscheduler.viewer",
    "title": "Cloud Scheduler Viewer",
    "description": "Get and list access to jobs, executions, and locations.",
    "includedPermissions": [
      "appengine.applications.get",
      "cloudscheduler.jobs.fullView",
      "cloudscheduler.jobs.get",
      "cloudscheduler.jobs.list",
      "cloudscheduler.locations.get",
      "cloudscheduler.locations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudsecurityscanner.editor": {
    "name": "roles/cloudsecurityscanner.editor",
    "title": "Web Security Scanner Editor",
    "description": "Full access to all Web Security Scanner resources",
    "includedPermissions": [
      "appengine.applications.get",
      "cloudsecurityscanner.crawledurls.list",
      "cloudsecurityscanner.results.get",
      "cloudsecurityscanner.results.list",
      "cloudsecurityscanner.scanruns.get",
      "cloudsecurityscanner.scanruns.getSummary",
      "cloudsecurityscanner.scanruns.list",
      "cloudsecurityscanner.scanruns.stop",
      "cloudsecurityscanner.scans.create",
      "cloudsecurityscanner.scans.delete",
      "cloudsecurityscanner.scans.get",
      "cloudsecurityscanner.scans.list",
      "cloudsecurityscanner.scans.run",
      "cloudsecurityscanner.scans.update",
      "compute.addresses.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudsecurityscanner.runner": {
    "name": "roles/cloudsecurityscanner.runner",
    "title": "Web Security Scanner Runner",
    "description": "Read access to Scan and ScanRun, plus the ability to start scans",
    "includedPermissions": [
      "cloudsecurityscanner.crawledurls.list",
      "cloudsecurityscanner.scanruns.get",
      "cloudsecurityscanner.scanruns.list",
      "cloudsecurityscanner.scanruns.stop",
      "cloudsecurityscanner.scans.get",
      "cloudsecurityscanner.scans.list",
      "cloudsecurityscanner.scans.run"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudsecurityscanner.viewer": {
    "name": "roles/cloudsecurityscanner.viewer",
    "title": "Web Security Scanner Viewer",
    "description": "Read access to all Web Security Scanner resources",
    "includedPermissions": [
      "cloudsecurityscanner.crawledurls.list",
      "cloudsecurityscanner.results.get",
      "cloudsecurityscanner.results.list",
      "cloudsecurityscanner.scanruns.get",
      "cloudsecurityscanner.scanruns.getSummary",
      "cloudsecurityscanner.scanruns.list",
      "cloudsecurityscanner.scans.get",
      "cloudsecurityscanner.scans.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudsql.admin": {
    "name": "roles/cloudsql.admin",
    "title": "Cloud SQL Admin",
    "description": "Full control of Cloud SQL resources.",
    "includedPermissions": [
      "cloudsql.backupRuns.create",
      "cloudsql.backupRuns.delete",
      "cloudsql.backupRuns.get",
      "cloudsql.backupRuns.list",
      "cloudsql.databases.create",
      "cloudsql.databases.delete",
      "cloudsql.databases.get",
      "cloudsql.databases.list",
      "cloudsql.databases.update",
      "cloudsql.instances.addServerCa",
      "cloudsql.instances.clone",
      "cloudsql.instances.connect",
      "cloudsql.instances.create",
      "cloudsql.instances.delete",
      "cloudsql.instances.demoteMaster",
      "cloudsql.instances.export",
      "cloudsql.instances.failover",
      "cloudsql.instances.get",
      "cloudsql.instances.import",
      "cloudsql.instances.list",
      "cloudsql.instances.listServerCas",
      "cloudsql.instances.promoteReplica",
      "cloudsql.instances.resetSslConfig",
      "cloudsql.instances.restart",
      "cloudsql.instances.restoreBackup",
      "cloudsql.instances.rotateServerCa",
      "cloudsql.instances.startReplica",
      "cloudsql.instances.stopReplica",
      "cloudsql.instances.truncateLog",
      "cloudsql.instances.update",
      "cloudsql.sslCerts.create",
      "cloudsql.sslCerts.createEphemeral",
      "cloudsql.sslCerts.delete",
      "cloudsql.sslCerts.get",
      "cloudsql.sslCerts.list",
      "cloudsql.users.create",
      "cloudsql.users.delete",
      "cloudsql.users.list",
      "cloudsql.users.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudsql.client": {
    "name": "roles/cloudsql.client",
    "title": "Cloud SQL Client",
    "description": "Connectivity access to Cloud SQL instances.",
    "includedPermissions": [
      "cloudsql.instances.connect",
      "cloudsql.instances.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudsql.editor": {
    "name": "roles/cloudsql.editor",
    "title": "Cloud SQL Editor",
    "description": "Full control of existing Cloud SQL instances excluding modifying users, SSL certificates or deleting resources.",
    "includedPermissions": [
      "cloudsql.backupRuns.create",
      "cloudsql.backupRuns.get",
      "cloudsql.backupRuns.list",
      "cloudsql.databases.create",
      "cloudsql.databases.get",
      "cloudsql.databases.list",
      "cloudsql.databases.update",
      "cloudsql.instances.addServerCa",
      "cloudsql.instances.connect",
      "cloudsql.instances.export",
      "cloudsql.instances.failover",
      "cloudsql.instances.get",
      "cloudsql.instances.list",
      "cloudsql.instances.listServerCas",
      "cloudsql.instances.restart",
      "cloudsql.instances.rotateServerCa",
      "cloudsql.instances.truncateLog",
      "cloudsql.instances.update",
      "cloudsql.sslCerts.get",
      "cloudsql.sslCerts.list",
      "cloudsql.users.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudsql.viewer": {
    "name": "roles/cloudsql.viewer",
    "title": "Cloud SQL Viewer",
    "description": "Read-only access to Cloud SQL resources.",
    "includedPermissions": [
      "cloudsql.backupRuns.get",
      "cloudsql.backupRuns.list",
      "cloudsql.databases.get",
      "cloudsql.databases.list",
      "cloudsql.instances.export",
      "cloudsql.instances.get",
      "cloudsql.instances.list",
      "cloudsql.instances.listServerCas",
      "cloudsql.sslCerts.get",
      "cloudsql.sslCerts.list",
      "cloudsql.users.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudsupport.admin": {
    "name": "roles/cloudsupport.admin",
    "title": "Support Account Administrator",
    "description": "Allows management of a support account without giving access to support cases.",
    "includedPermissions": [
      "cloudsupport.accounts.create",
      "cloudsupport.accounts.delete",
      "cloudsupport.accounts.get",
      "cloudsupport.accounts.getIamPolicy",
      "cloudsupport.accounts.getUserRoles",
      "cloudsupport.accounts.list",
      "cloudsupport.accounts.setIamPolicy",
      "cloudsupport.accounts.update",
      "cloudsupport.accounts.updateUserRoles",
      "cloudsupport.operations.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudsupport.viewer": {
    "name": "roles/cloudsupport.viewer",
    "title": "Support Account Viewer",
    "description": "Read-only access to details of a support account. This does not allow viewing cases.",
    "includedPermissions": [
      "cloudsupport.accounts.get",
      "cloudsupport.accounts.getUserRoles",
      "cloudsupport.accounts.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudtasks.admin": {
    "name": "roles/cloudtasks.admin",
    "title": "Cloud Tasks Admin",
    "description": "Full access to queues and tasks.",
    "includedPermissions": [
      "cloudtasks.locations.get",
      "cloudtasks.locations.list",
      "cloudtasks.queues.create",
      "cloudtasks.queues.delete",
      "cloudtasks.queues.get",
      "cloudtasks.queues.getIamPolicy",
      "cloudtasks.queues.list",
      "cloudtasks.queues.pause",
      "cloudtasks.queues.purge",
      "cloudtasks.queues.resume",
      "cloudtasks.queues.setIamPolicy",
      "cloudtasks.queues.update",
      "cloudtasks.tasks.create",
      "cloudtasks.tasks.delete",
      "cloudtasks.tasks.fullView",
      "cloudtasks.tasks.get",
      "cloudtasks.tasks.list",
      "cloudtasks.tasks.run",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudtasks.enqueuer": {
    "name": "roles/cloudtasks.enqueuer",
    "title": "Cloud Tasks Enqueuer",
    "description": "Access to create tasks.",
    "includedPermissions": [
      "cloudtasks.tasks.create",
      "cloudtasks.tasks.fullView",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudtasks.queueAdmin": {
    "name": "roles/cloudtasks.queueAdmin",
    "title": "Cloud Tasks Queue Admin",
    "description": "Admin access to queues.",
    "includedPermissions": [
      "cloudtasks.locations.get",
      "cloudtasks.locations.list",
      "cloudtasks.queues.create",
      "cloudtasks.queues.delete",
      "cloudtasks.queues.get",
      "cloudtasks.queues.getIamPolicy",
      "cloudtasks.queues.list",
      "cloudtasks.queues.pause",
      "cloudtasks.queues.purge",
      "cloudtasks.queues.resume",
      "cloudtasks.queues.setIamPolicy",
      "cloudtasks.queues.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudtasks.serviceAgent": {
    "name": "roles/cloudtasks.serviceAgent",
    "title": "Cloud Tasks Service Agent",
    "description": "Grants Cloud Tasks Service Account access to manage resources.",
    "includedPermissions": [
      "iam.serviceAccounts.getAccessToken",
      "iam.serviceAccounts.getOpenIdToken",
      "logging.logEntries.create"
    ],
    "etag": "AA=="
  },
  "roles/cloudtasks.taskDeleter": {
    "name": "roles/cloudtasks.taskDeleter",
    "title": "Cloud Tasks Task Deleter",
    "description": "Access to delete tasks.",
    "includedPermissions": [
      "cloudtasks.tasks.delete",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudtasks.taskRunner": {
    "name": "roles/cloudtasks.taskRunner",
    "title": "Cloud Tasks Task Runner",
    "description": "Access to run tasks.",
    "includedPermissions": [
      "cloudtasks.tasks.fullView",
      "cloudtasks.tasks.run",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudtasks.viewer": {
    "name": "roles/cloudtasks.viewer",
    "title": "Cloud Tasks Viewer",
    "description": "Get and list access to tasks, queues, and locations.",
    "includedPermissions": [
      "cloudtasks.locations.get",
      "cloudtasks.locations.list",
      "cloudtasks.queues.get",
      "cloudtasks.queues.list",
      "cloudtasks.tasks.fullView",
      "cloudtasks.tasks.get",
      "cloudtasks.tasks.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/cloudtestservice.testAdmin": {
    "name": "roles/cloudtestservice.testAdmin",
    "title": "Firebase Test Lab Admin",
    "description": "Full access to all Test Lab features",
    "includedPermissions": [
      "cloudtestservice.environmentcatalog.get",
      "cloudtestservice.matrices.create",
      "cloudtestservice.matrices.get",
      "cloudtestservice.matrices.update",
      "cloudtoolresults.executions.create",
      "cloudtoolresults.executions.get",
      "cloudtoolresults.executions.list",
      "cloudtoolresults.executions.update",
      "cloudtoolresults.histories.create",
      "cloudtoolresults.histories.get",
      "cloudtoolresults.histories.list",
      "cloudtoolresults.settings.create",
      "cloudtoolresults.settings.get",
      "cloudtoolresults.settings.update",
      "cloudtoolresults.steps.create",
      "cloudtoolresults.steps.get",
      "cloudtoolresults.steps.list",
      "cloudtoolresults.steps.update",
      "firebase.billingPlans.get",
      "firebase.clients.get",
      "firebase.projects.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "storage.buckets.create",
      "storage.buckets.get",
      "storage.buckets.update",
      "storage.objects.create",
      "storage.objects.get",
      "storage.objects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudtestservice.testViewer": {
    "name": "roles/cloudtestservice.testViewer",
    "title": "Firebase Test Lab Viewer",
    "description": "Read access to Test Lab features",
    "includedPermissions": [
      "cloudtestservice.environmentcatalog.get",
      "cloudtestservice.matrices.get",
      "cloudtoolresults.executions.get",
      "cloudtoolresults.executions.list",
      "cloudtoolresults.histories.get",
      "cloudtoolresults.histories.list",
      "cloudtoolresults.settings.get",
      "cloudtoolresults.steps.get",
      "cloudtoolresults.steps.list",
      "firebase.clients.get",
      "firebase.projects.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "storage.objects.get",
      "storage.objects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudtrace.admin": {
    "name": "roles/cloudtrace.admin",
    "title": "Cloud Trace Admin",
    "description": "Admin access to Stackdriver Trace.",
    "includedPermissions": [
      "cloudtrace.insights.get",
      "cloudtrace.insights.list",
      "cloudtrace.stats.get",
      "cloudtrace.tasks.create",
      "cloudtrace.tasks.delete",
      "cloudtrace.tasks.get",
      "cloudtrace.tasks.list",
      "cloudtrace.traces.get",
      "cloudtrace.traces.list",
      "cloudtrace.traces.patch",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudtrace.agent": {
    "name": "roles/cloudtrace.agent",
    "title": "Cloud Trace Agent",
    "description": "Agent access to Stackdriver Trace. Can write trace data.",
    "includedPermissions": [
      "cloudtrace.traces.patch"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudtrace.user": {
    "name": "roles/cloudtrace.user",
    "title": "Cloud Trace User",
    "description": "User access to Stackdriver Trace. Can view traces, insights and stats. Can create, list, view, and delete tasks.",
    "includedPermissions": [
      "cloudtrace.insights.get",
      "cloudtrace.insights.list",
      "cloudtrace.stats.get",
      "cloudtrace.tasks.create",
      "cloudtrace.tasks.delete",
      "cloudtrace.tasks.get",
      "cloudtrace.tasks.list",
      "cloudtrace.traces.get",
      "cloudtrace.traces.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudtranslate.admin": {
    "name": "roles/cloudtranslate.admin",
    "title": "Cloud Translation API Admin",
    "description": "Full access to all Cloud Translation resources",
    "includedPermissions": [
      "automl.models.get",
      "automl.models.predict",
      "cloudtranslate.generalModels.batchPredict",
      "cloudtranslate.generalModels.get",
      "cloudtranslate.generalModels.predict",
      "cloudtranslate.glossaries.batchPredict",
      "cloudtranslate.glossaries.create",
      "cloudtranslate.glossaries.delete",
      "cloudtranslate.glossaries.get",
      "cloudtranslate.glossaries.list",
      "cloudtranslate.glossaries.predict",
      "cloudtranslate.languageDetectionModels.predict",
      "cloudtranslate.locations.get",
      "cloudtranslate.locations.list",
      "cloudtranslate.operations.cancel",
      "cloudtranslate.operations.delete",
      "cloudtranslate.operations.get",
      "cloudtranslate.operations.list",
      "cloudtranslate.operations.wait",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudtranslate.editor": {
    "name": "roles/cloudtranslate.editor",
    "title": "Cloud Translation API Editor",
    "description": "Editor of all Cloud Translation resources",
    "includedPermissions": [
      "automl.models.get",
      "automl.models.predict",
      "cloudtranslate.generalModels.batchPredict",
      "cloudtranslate.generalModels.get",
      "cloudtranslate.generalModels.predict",
      "cloudtranslate.glossaries.batchPredict",
      "cloudtranslate.glossaries.create",
      "cloudtranslate.glossaries.delete",
      "cloudtranslate.glossaries.get",
      "cloudtranslate.glossaries.list",
      "cloudtranslate.glossaries.predict",
      "cloudtranslate.languageDetectionModels.predict",
      "cloudtranslate.locations.get",
      "cloudtranslate.locations.list",
      "cloudtranslate.operations.cancel",
      "cloudtranslate.operations.delete",
      "cloudtranslate.operations.get",
      "cloudtranslate.operations.list",
      "cloudtranslate.operations.wait",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudtranslate.user": {
    "name": "roles/cloudtranslate.user",
    "title": "Cloud Translation API User",
    "description": "User of Cloud Translation and AutoML models",
    "includedPermissions": [
      "automl.models.get",
      "automl.models.predict",
      "cloudtranslate.generalModels.batchPredict",
      "cloudtranslate.generalModels.get",
      "cloudtranslate.generalModels.predict",
      "cloudtranslate.glossaries.batchPredict",
      "cloudtranslate.glossaries.get",
      "cloudtranslate.glossaries.list",
      "cloudtranslate.glossaries.predict",
      "cloudtranslate.languageDetectionModels.predict",
      "cloudtranslate.locations.get",
      "cloudtranslate.locations.list",
      "cloudtranslate.operations.get",
      "cloudtranslate.operations.list",
      "cloudtranslate.operations.wait",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/cloudtranslate.viewer": {
    "name": "roles/cloudtranslate.viewer",
    "title": "Cloud Translation API Viewer",
    "description": "Viewer of all Translation resources",
    "includedPermissions": [
      "automl.models.get",
      "cloudtranslate.generalModels.get",
      "cloudtranslate.glossaries.get",
      "cloudtranslate.glossaries.list",
      "cloudtranslate.locations.get",
      "cloudtranslate.locations.list",
      "cloudtranslate.operations.get",
      "cloudtranslate.operations.list",
      "cloudtranslate.operations.wait",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/codelabapikeys.admin": {
    "name": "roles/codelabapikeys.admin",
    "title": "Codelab ApiKeys Admin",
    "description": "Full access to API keys",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/codelabapikeys.editor": {
    "name": "roles/codelabapikeys.editor",
    "title": "Codelab API Keys Editor",
    "description": "This role can view and edit all properties of API keys.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/codelabapikeys.viewer": {
    "name": "roles/codelabapikeys.viewer",
    "title": "Codelab API Keys Viewer",
    "description": "This role can view all properties except change history of API keys.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/composer.admin": {
    "name": "roles/composer.admin",
    "title": "Composer Administrator",
    "description": "Full control of Composer resources.",
    "includedPermissions": [
      "composer.environments.create",
      "composer.environments.delete",
      "composer.environments.get",
      "composer.environments.list",
      "composer.environments.update",
      "composer.imageversions.list",
      "composer.operations.delete",
      "composer.operations.get",
      "composer.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/composer.environmentAndStorageObjectAdmin": {
    "name": "roles/composer.environmentAndStorageObjectAdmin",
    "title": "Environment and Storage Object Administrator",
    "description": "Full control of Cloud Composer environments and Cloud Storage objects.",
    "includedPermissions": [
      "composer.environments.create",
      "composer.environments.delete",
      "composer.environments.get",
      "composer.environments.list",
      "composer.environments.update",
      "composer.imageversions.list",
      "composer.operations.delete",
      "composer.operations.get",
      "composer.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list",
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.get",
      "storage.objects.getIamPolicy",
      "storage.objects.list",
      "storage.objects.setIamPolicy",
      "storage.objects.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/composer.environmentAndStorageObjectViewer": {
    "name": "roles/composer.environmentAndStorageObjectViewer",
    "title": "Environment User and Storage Object Viewer",
    "description": "Read access to Cloud Composer environments and Cloud Storage objects.",
    "includedPermissions": [
      "composer.environments.get",
      "composer.environments.list",
      "composer.imageversions.list",
      "composer.operations.get",
      "composer.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list",
      "storage.objects.get",
      "storage.objects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/composer.user": {
    "name": "roles/composer.user",
    "title": "Composer User",
    "description": "Read and use access to Composer resources.",
    "includedPermissions": [
      "composer.environments.get",
      "composer.environments.list",
      "composer.imageversions.list",
      "composer.operations.get",
      "composer.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/composer.worker": {
    "name": "roles/composer.worker",
    "title": "Composer Worker",
    "description": "Worker access to Composer. Intended for service accounts.",
    "includedPermissions": [
      "artifactregistry.files.get",
      "artifactregistry.files.list",
      "artifactregistry.packages.get",
      "artifactregistry.packages.list",
      "artifactregistry.repositories.downloadArtifacts",
      "artifactregistry.repositories.get",
      "artifactregistry.repositories.list",
      "artifactregistry.repositories.uploadArtifacts",
      "artifactregistry.tags.create",
      "artifactregistry.tags.get",
      "artifactregistry.tags.list",
      "artifactregistry.tags.update",
      "artifactregistry.versions.get",
      "artifactregistry.versions.list",
      "cloudbuild.builds.create",
      "cloudbuild.builds.get",
      "cloudbuild.builds.list",
      "cloudbuild.builds.update",
      "container.apiServices.create",
      "container.apiServices.delete",
      "container.apiServices.get",
      "container.apiServices.list",
      "container.apiServices.update",
      "container.apiServices.updateStatus",
      "container.backendConfigs.create",
      "container.backendConfigs.delete",
      "container.backendConfigs.get",
      "container.backendConfigs.list",
      "container.backendConfigs.update",
      "container.bindings.create",
      "container.bindings.delete",
      "container.bindings.get",
      "container.bindings.list",
      "container.bindings.update",
      "container.certificateSigningRequests.approve",
      "container.certificateSigningRequests.create",
      "container.certificateSigningRequests.delete",
      "container.certificateSigningRequests.get",
      "container.certificateSigningRequests.list",
      "container.certificateSigningRequests.update",
      "container.certificateSigningRequests.updateStatus",
      "container.clusterRoleBindings.create",
      "container.clusterRoleBindings.delete",
      "container.clusterRoleBindings.get",
      "container.clusterRoleBindings.list",
      "container.clusterRoleBindings.update",
      "container.clusterRoles.bind",
      "container.clusterRoles.create",
      "container.clusterRoles.delete",
      "container.clusterRoles.get",
      "container.clusterRoles.list",
      "container.clusterRoles.update",
      "container.clusters.create",
      "container.clusters.delete",
      "container.clusters.get",
      "container.clusters.getCredentials",
      "container.clusters.list",
      "container.clusters.update",
      "container.componentStatuses.get",
      "container.componentStatuses.list",
      "container.configMaps.create",
      "container.configMaps.delete",
      "container.configMaps.get",
      "container.configMaps.list",
      "container.configMaps.update",
      "container.controllerRevisions.create",
      "container.controllerRevisions.delete",
      "container.controllerRevisions.get",
      "container.controllerRevisions.list",
      "container.controllerRevisions.update",
      "container.cronJobs.create",
      "container.cronJobs.delete",
      "container.cronJobs.get",
      "container.cronJobs.getStatus",
      "container.cronJobs.list",
      "container.cronJobs.update",
      "container.cronJobs.updateStatus",
      "container.csiDrivers.create",
      "container.csiDrivers.delete",
      "container.csiDrivers.get",
      "container.csiDrivers.list",
      "container.csiDrivers.update",
      "container.csiNodes.create",
      "container.csiNodes.delete",
      "container.csiNodes.get",
      "container.csiNodes.list",
      "container.csiNodes.update",
      "container.customResourceDefinitions.create",
      "container.customResourceDefinitions.delete",
      "container.customResourceDefinitions.get",
      "container.customResourceDefinitions.list",
      "container.customResourceDefinitions.update",
      "container.customResourceDefinitions.updateStatus",
      "container.daemonSets.create",
      "container.daemonSets.delete",
      "container.daemonSets.get",
      "container.daemonSets.getStatus",
      "container.daemonSets.list",
      "container.daemonSets.update",
      "container.daemonSets.updateStatus",
      "container.deployments.create",
      "container.deployments.delete",
      "container.deployments.get",
      "container.deployments.getScale",
      "container.deployments.getStatus",
      "container.deployments.list",
      "container.deployments.rollback",
      "container.deployments.update",
      "container.deployments.updateScale",
      "container.deployments.updateStatus",
      "container.endpoints.create",
      "container.endpoints.delete",
      "container.endpoints.get",
      "container.endpoints.list",
      "container.endpoints.update",
      "container.events.create",
      "container.events.delete",
      "container.events.get",
      "container.events.list",
      "container.events.update",
      "container.horizontalPodAutoscalers.create",
      "container.horizontalPodAutoscalers.delete",
      "container.horizontalPodAutoscalers.get",
      "container.horizontalPodAutoscalers.getStatus",
      "container.horizontalPodAutoscalers.list",
      "container.horizontalPodAutoscalers.update",
      "container.horizontalPodAutoscalers.updateStatus",
      "container.hostServiceAgent.use",
      "container.ingresses.create",
      "container.ingresses.delete",
      "container.ingresses.get",
      "container.ingresses.getStatus",
      "container.ingresses.list",
      "container.ingresses.update",
      "container.ingresses.updateStatus",
      "container.initializerConfigurations.create",
      "container.initializerConfigurations.delete",
      "container.initializerConfigurations.get",
      "container.initializerConfigurations.list",
      "container.initializerConfigurations.update",
      "container.jobs.create",
      "container.jobs.delete",
      "container.jobs.get",
      "container.jobs.getStatus",
      "container.jobs.list",
      "container.jobs.update",
      "container.jobs.updateStatus",
      "container.limitRanges.create",
      "container.limitRanges.delete",
      "container.limitRanges.get",
      "container.limitRanges.list",
      "container.limitRanges.update",
      "container.localSubjectAccessReviews.create",
      "container.localSubjectAccessReviews.list",
      "container.namespaces.create",
      "container.namespaces.delete",
      "container.namespaces.get",
      "container.namespaces.getStatus",
      "container.namespaces.list",
      "container.namespaces.update",
      "container.namespaces.updateStatus",
      "container.networkPolicies.create",
      "container.networkPolicies.delete",
      "container.networkPolicies.get",
      "container.networkPolicies.list",
      "container.networkPolicies.update",
      "container.nodes.create",
      "container.nodes.delete",
      "container.nodes.get",
      "container.nodes.getStatus",
      "container.nodes.list",
      "container.nodes.proxy",
      "container.nodes.update",
      "container.nodes.updateStatus",
      "container.operations.get",
      "container.operations.list",
      "container.persistentVolumeClaims.create",
      "container.persistentVolumeClaims.delete",
      "container.persistentVolumeClaims.get",
      "container.persistentVolumeClaims.getStatus",
      "container.persistentVolumeClaims.list",
      "container.persistentVolumeClaims.update",
      "container.persistentVolumeClaims.updateStatus",
      "container.persistentVolumes.create",
      "container.persistentVolumes.delete",
      "container.persistentVolumes.get",
      "container.persistentVolumes.getStatus",
      "container.persistentVolumes.list",
      "container.persistentVolumes.update",
      "container.persistentVolumes.updateStatus",
      "container.petSets.create",
      "container.petSets.delete",
      "container.petSets.get",
      "container.petSets.list",
      "container.petSets.update",
      "container.petSets.updateStatus",
      "container.podDisruptionBudgets.create",
      "container.podDisruptionBudgets.delete",
      "container.podDisruptionBudgets.get",
      "container.podDisruptionBudgets.getStatus",
      "container.podDisruptionBudgets.list",
      "container.podDisruptionBudgets.update",
      "container.podDisruptionBudgets.updateStatus",
      "container.podPresets.create",
      "container.podPresets.delete",
      "container.podPresets.get",
      "container.podPresets.list",
      "container.podPresets.update",
      "container.podSecurityPolicies.create",
      "container.podSecurityPolicies.delete",
      "container.podSecurityPolicies.get",
      "container.podSecurityPolicies.list",
      "container.podSecurityPolicies.update",
      "container.podSecurityPolicies.use",
      "container.podTemplates.create",
      "container.podTemplates.delete",
      "container.podTemplates.get",
      "container.podTemplates.list",
      "container.podTemplates.update",
      "container.pods.attach",
      "container.pods.create",
      "container.pods.delete",
      "container.pods.evict",
      "container.pods.exec",
      "container.pods.get",
      "container.pods.getLogs",
      "container.pods.getStatus",
      "container.pods.initialize",
      "container.pods.list",
      "container.pods.portForward",
      "container.pods.proxy",
      "container.pods.update",
      "container.pods.updateStatus",
      "container.replicaSets.create",
      "container.replicaSets.delete",
      "container.replicaSets.get",
      "container.replicaSets.getScale",
      "container.replicaSets.getStatus",
      "container.replicaSets.list",
      "container.replicaSets.update",
      "container.replicaSets.updateScale",
      "container.replicaSets.updateStatus",
      "container.replicationControllers.create",
      "container.replicationControllers.delete",
      "container.replicationControllers.get",
      "container.replicationControllers.getScale",
      "container.replicationControllers.getStatus",
      "container.replicationControllers.list",
      "container.replicationControllers.update",
      "container.replicationControllers.updateScale",
      "container.replicationControllers.updateStatus",
      "container.resourceQuotas.create",
      "container.resourceQuotas.delete",
      "container.resourceQuotas.get",
      "container.resourceQuotas.getStatus",
      "container.resourceQuotas.list",
      "container.resourceQuotas.update",
      "container.resourceQuotas.updateStatus",
      "container.roleBindings.create",
      "container.roleBindings.delete",
      "container.roleBindings.get",
      "container.roleBindings.list",
      "container.roleBindings.update",
      "container.roles.bind",
      "container.roles.create",
      "container.roles.delete",
      "container.roles.get",
      "container.roles.list",
      "container.roles.update",
      "container.runtimeClasses.create",
      "container.runtimeClasses.delete",
      "container.runtimeClasses.get",
      "container.runtimeClasses.list",
      "container.runtimeClasses.update",
      "container.scheduledJobs.create",
      "container.scheduledJobs.delete",
      "container.scheduledJobs.get",
      "container.scheduledJobs.list",
      "container.scheduledJobs.update",
      "container.scheduledJobs.updateStatus",
      "container.secrets.create",
      "container.secrets.delete",
      "container.secrets.get",
      "container.secrets.list",
      "container.secrets.update",
      "container.selfSubjectAccessReviews.create",
      "container.selfSubjectAccessReviews.list",
      "container.serviceAccounts.create",
      "container.serviceAccounts.delete",
      "container.serviceAccounts.get",
      "container.serviceAccounts.list",
      "container.serviceAccounts.update",
      "container.services.create",
      "container.services.delete",
      "container.services.get",
      "container.services.getStatus",
      "container.services.list",
      "container.services.proxy",
      "container.services.update",
      "container.services.updateStatus",
      "container.statefulSets.create",
      "container.statefulSets.delete",
      "container.statefulSets.get",
      "container.statefulSets.getScale",
      "container.statefulSets.getStatus",
      "container.statefulSets.list",
      "container.statefulSets.update",
      "container.statefulSets.updateScale",
      "container.statefulSets.updateStatus",
      "container.storageClasses.create",
      "container.storageClasses.delete",
      "container.storageClasses.get",
      "container.storageClasses.list",
      "container.storageClasses.update",
      "container.subjectAccessReviews.create",
      "container.subjectAccessReviews.list",
      "container.thirdPartyObjects.create",
      "container.thirdPartyObjects.delete",
      "container.thirdPartyObjects.get",
      "container.thirdPartyObjects.list",
      "container.thirdPartyObjects.update",
      "container.thirdPartyResources.create",
      "container.thirdPartyResources.delete",
      "container.thirdPartyResources.get",
      "container.thirdPartyResources.list",
      "container.thirdPartyResources.update",
      "container.tokenReviews.create",
      "logging.logEntries.create",
      "monitoring.metricDescriptors.create",
      "monitoring.metricDescriptors.get",
      "monitoring.metricDescriptors.list",
      "monitoring.monitoredResourceDescriptors.get",
      "monitoring.monitoredResourceDescriptors.list",
      "monitoring.timeSeries.create",
      "pubsub.snapshots.create",
      "pubsub.snapshots.delete",
      "pubsub.snapshots.get",
      "pubsub.snapshots.list",
      "pubsub.snapshots.seek",
      "pubsub.snapshots.update",
      "pubsub.subscriptions.consume",
      "pubsub.subscriptions.create",
      "pubsub.subscriptions.delete",
      "pubsub.subscriptions.get",
      "pubsub.subscriptions.list",
      "pubsub.subscriptions.update",
      "pubsub.topics.attachSubscription",
      "pubsub.topics.create",
      "pubsub.topics.delete",
      "pubsub.topics.get",
      "pubsub.topics.list",
      "pubsub.topics.publish",
      "pubsub.topics.update",
      "pubsub.topics.updateTag",
      "remotebuildexecution.blobs.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list",
      "source.repos.get",
      "source.repos.list",
      "storage.buckets.create",
      "storage.buckets.get",
      "storage.buckets.list",
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.get",
      "storage.objects.getIamPolicy",
      "storage.objects.list",
      "storage.objects.setIamPolicy",
      "storage.objects.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.admin": {
    "name": "roles/compute.admin",
    "title": "Compute Admin",
    "description": "Full control of all Compute Engine resources.",
    "includedPermissions": [
      "compute.acceleratorTypes.get",
      "compute.acceleratorTypes.list",
      "compute.addresses.create",
      "compute.addresses.createInternal",
      "compute.addresses.delete",
      "compute.addresses.deleteInternal",
      "compute.addresses.get",
      "compute.addresses.list",
      "compute.addresses.setLabels",
      "compute.addresses.use",
      "compute.addresses.useInternal",
      "compute.autoscalers.create",
      "compute.autoscalers.delete",
      "compute.autoscalers.get",
      "compute.autoscalers.list",
      "compute.autoscalers.update",
      "compute.backendBuckets.create",
      "compute.backendBuckets.delete",
      "compute.backendBuckets.get",
      "compute.backendBuckets.list",
      "compute.backendBuckets.update",
      "compute.backendBuckets.use",
      "compute.backendServices.create",
      "compute.backendServices.delete",
      "compute.backendServices.get",
      "compute.backendServices.list",
      "compute.backendServices.setSecurityPolicy",
      "compute.backendServices.update",
      "compute.backendServices.use",
      "compute.commitments.create",
      "compute.commitments.get",
      "compute.commitments.list",
      "compute.diskTypes.get",
      "compute.diskTypes.list",
      "compute.disks.addResourcePolicies",
      "compute.disks.create",
      "compute.disks.createSnapshot",
      "compute.disks.delete",
      "compute.disks.get",
      "compute.disks.getIamPolicy",
      "compute.disks.list",
      "compute.disks.removeResourcePolicies",
      "compute.disks.resize",
      "compute.disks.setIamPolicy",
      "compute.disks.setLabels",
      "compute.disks.update",
      "compute.disks.use",
      "compute.disks.useReadOnly",
      "compute.externalVpnGateways.create",
      "compute.externalVpnGateways.delete",
      "compute.externalVpnGateways.get",
      "compute.externalVpnGateways.list",
      "compute.externalVpnGateways.setLabels",
      "compute.externalVpnGateways.use",
      "compute.firewalls.create",
      "compute.firewalls.delete",
      "compute.firewalls.get",
      "compute.firewalls.list",
      "compute.firewalls.update",
      "compute.forwardingRules.create",
      "compute.forwardingRules.delete",
      "compute.forwardingRules.get",
      "compute.forwardingRules.list",
      "compute.forwardingRules.setLabels",
      "compute.forwardingRules.setTarget",
      "compute.globalAddresses.create",
      "compute.globalAddresses.createInternal",
      "compute.globalAddresses.delete",
      "compute.globalAddresses.deleteInternal",
      "compute.globalAddresses.get",
      "compute.globalAddresses.list",
      "compute.globalAddresses.setLabels",
      "compute.globalAddresses.use",
      "compute.globalForwardingRules.create",
      "compute.globalForwardingRules.delete",
      "compute.globalForwardingRules.get",
      "compute.globalForwardingRules.list",
      "compute.globalForwardingRules.setLabels",
      "compute.globalForwardingRules.setTarget",
      "compute.globalOperations.delete",
      "compute.globalOperations.get",
      "compute.globalOperations.getIamPolicy",
      "compute.globalOperations.list",
      "compute.globalOperations.setIamPolicy",
      "compute.healthChecks.create",
      "compute.healthChecks.delete",
      "compute.healthChecks.get",
      "compute.healthChecks.list",
      "compute.healthChecks.update",
      "compute.healthChecks.use",
      "compute.healthChecks.useReadOnly",
      "compute.httpHealthChecks.create",
      "compute.httpHealthChecks.delete",
      "compute.httpHealthChecks.get",
      "compute.httpHealthChecks.list",
      "compute.httpHealthChecks.update",
      "compute.httpHealthChecks.use",
      "compute.httpHealthChecks.useReadOnly",
      "compute.httpsHealthChecks.create",
      "compute.httpsHealthChecks.delete",
      "compute.httpsHealthChecks.get",
      "compute.httpsHealthChecks.list",
      "compute.httpsHealthChecks.update",
      "compute.httpsHealthChecks.use",
      "compute.httpsHealthChecks.useReadOnly",
      "compute.images.create",
      "compute.images.delete",
      "compute.images.deprecate",
      "compute.images.get",
      "compute.images.getFromFamily",
      "compute.images.getIamPolicy",
      "compute.images.list",
      "compute.images.setIamPolicy",
      "compute.images.setLabels",
      "compute.images.update",
      "compute.images.useReadOnly",
      "compute.instanceGroupManagers.create",
      "compute.instanceGroupManagers.delete",
      "compute.instanceGroupManagers.get",
      "compute.instanceGroupManagers.list",
      "compute.instanceGroupManagers.update",
      "compute.instanceGroupManagers.use",
      "compute.instanceGroups.create",
      "compute.instanceGroups.delete",
      "compute.instanceGroups.get",
      "compute.instanceGroups.list",
      "compute.instanceGroups.update",
      "compute.instanceGroups.use",
      "compute.instanceTemplates.create",
      "compute.instanceTemplates.delete",
      "compute.instanceTemplates.get",
      "compute.instanceTemplates.getIamPolicy",
      "compute.instanceTemplates.list",
      "compute.instanceTemplates.setIamPolicy",
      "compute.instanceTemplates.useReadOnly",
      "compute.instances.addAccessConfig",
      "compute.instances.addMaintenancePolicies",
      "compute.instances.attachDisk",
      "compute.instances.create",
      "compute.instances.delete",
      "compute.instances.deleteAccessConfig",
      "compute.instances.detachDisk",
      "compute.instances.get",
      "compute.instances.getGuestAttributes",
      "compute.instances.getIamPolicy",
      "compute.instances.getSerialPortOutput",
      "compute.instances.getShieldedInstanceIdentity",
      "compute.instances.getShieldedVmIdentity",
      "compute.instances.list",
      "compute.instances.listReferrers",
      "compute.instances.osAdminLogin",
      "compute.instances.osLogin",
      "compute.instances.removeMaintenancePolicies",
      "compute.instances.reset",
      "compute.instances.resume",
      "compute.instances.setDeletionProtection",
      "compute.instances.setDiskAutoDelete",
      "compute.instances.setIamPolicy",
      "compute.instances.setLabels",
      "compute.instances.setMachineResources",
      "compute.instances.setMachineType",
      "compute.instances.setMetadata",
      "compute.instances.setMinCpuPlatform",
      "compute.instances.setScheduling",
      "compute.instances.setServiceAccount",
      "compute.instances.setShieldedInstanceIntegrityPolicy",
      "compute.instances.setShieldedVmIntegrityPolicy",
      "compute.instances.setTags",
      "compute.instances.start",
      "compute.instances.startWithEncryptionKey",
      "compute.instances.stop",
      "compute.instances.suspend",
      "compute.instances.updateAccessConfig",
      "compute.instances.updateDisplayDevice",
      "compute.instances.updateNetworkInterface",
      "compute.instances.updateShieldedInstanceConfig",
      "compute.instances.updateShieldedVmConfig",
      "compute.instances.use",
      "compute.interconnectAttachments.create",
      "compute.interconnectAttachments.delete",
      "compute.interconnectAttachments.get",
      "compute.interconnectAttachments.list",
      "compute.interconnectAttachments.setLabels",
      "compute.interconnectAttachments.update",
      "compute.interconnectAttachments.use",
      "compute.interconnectLocations.get",
      "compute.interconnectLocations.list",
      "compute.interconnects.create",
      "compute.interconnects.delete",
      "compute.interconnects.get",
      "compute.interconnects.list",
      "compute.interconnects.setLabels",
      "compute.interconnects.update",
      "compute.interconnects.use",
      "compute.licenseCodes.get",
      "compute.licenseCodes.getIamPolicy",
      "compute.licenseCodes.list",
      "compute.licenseCodes.setIamPolicy",
      "compute.licenseCodes.update",
      "compute.licenseCodes.use",
      "compute.licenses.create",
      "compute.licenses.delete",
      "compute.licenses.get",
      "compute.licenses.getIamPolicy",
      "compute.licenses.list",
      "compute.licenses.setIamPolicy",
      "compute.machineTypes.get",
      "compute.machineTypes.list",
      "compute.maintenancePolicies.create",
      "compute.maintenancePolicies.delete",
      "compute.maintenancePolicies.get",
      "compute.maintenancePolicies.getIamPolicy",
      "compute.maintenancePolicies.list",
      "compute.maintenancePolicies.setIamPolicy",
      "compute.maintenancePolicies.use",
      "compute.networkEndpointGroups.attachNetworkEndpoints",
      "compute.networkEndpointGroups.create",
      "compute.networkEndpointGroups.delete",
      "compute.networkEndpointGroups.detachNetworkEndpoints",
      "compute.networkEndpointGroups.get",
      "compute.networkEndpointGroups.getIamPolicy",
      "compute.networkEndpointGroups.list",
      "compute.networkEndpointGroups.setIamPolicy",
      "compute.networkEndpointGroups.use",
      "compute.networks.addPeering",
      "compute.networks.create",
      "compute.networks.delete",
      "compute.networks.get",
      "compute.networks.list",
      "compute.networks.listPeeringRoutes",
      "compute.networks.mirror",
      "compute.networks.removePeering",
      "compute.networks.switchToCustomMode",
      "compute.networks.update",
      "compute.networks.updatePeering",
      "compute.networks.updatePolicy",
      "compute.networks.use",
      "compute.networks.useExternalIp",
      "compute.nodeGroups.addNodes",
      "compute.nodeGroups.create",
      "compute.nodeGroups.delete",
      "compute.nodeGroups.deleteNodes",
      "compute.nodeGroups.get",
      "compute.nodeGroups.getIamPolicy",
      "compute.nodeGroups.list",
      "compute.nodeGroups.setIamPolicy",
      "compute.nodeGroups.setNodeTemplate",
      "compute.nodeGroups.update",
      "compute.nodeTemplates.create",
      "compute.nodeTemplates.delete",
      "compute.nodeTemplates.get",
      "compute.nodeTemplates.getIamPolicy",
      "compute.nodeTemplates.list",
      "compute.nodeTemplates.setIamPolicy",
      "compute.nodeTypes.get",
      "compute.nodeTypes.list",
      "compute.organizations.administerXpn",
      "compute.organizations.disableXpnHost",
      "compute.organizations.disableXpnResource",
      "compute.organizations.enableXpnHost",
      "compute.organizations.enableXpnResource",
      "compute.oslogin.updateExternalUser",
      "compute.packetMirrorings.update",
      "compute.projects.get",
      "compute.projects.setCommonInstanceMetadata",
      "compute.projects.setDefaultNetworkTier",
      "compute.projects.setDefaultServiceAccount",
      "compute.projects.setUsageExportBucket",
      "compute.regionBackendServices.create",
      "compute.regionBackendServices.delete",
      "compute.regionBackendServices.get",
      "compute.regionBackendServices.list",
      "compute.regionBackendServices.setSecurityPolicy",
      "compute.regionBackendServices.update",
      "compute.regionBackendServices.use",
      "compute.regionOperations.delete",
      "compute.regionOperations.get",
      "compute.regionOperations.getIamPolicy",
      "compute.regionOperations.list",
      "compute.regionOperations.setIamPolicy",
      "compute.regions.get",
      "compute.regions.list",
      "compute.reservations.create",
      "compute.reservations.delete",
      "compute.reservations.get",
      "compute.reservations.list",
      "compute.reservations.resize",
      "compute.resourcePolicies.create",
      "compute.resourcePolicies.delete",
      "compute.resourcePolicies.get",
      "compute.resourcePolicies.list",
      "compute.resourcePolicies.use",
      "compute.routers.create",
      "compute.routers.delete",
      "compute.routers.get",
      "compute.routers.list",
      "compute.routers.update",
      "compute.routers.use",
      "compute.routes.create",
      "compute.routes.delete",
      "compute.routes.get",
      "compute.routes.list",
      "compute.securityPolicies.create",
      "compute.securityPolicies.delete",
      "compute.securityPolicies.get",
      "compute.securityPolicies.getIamPolicy",
      "compute.securityPolicies.list",
      "compute.securityPolicies.setIamPolicy",
      "compute.securityPolicies.update",
      "compute.securityPolicies.use",
      "compute.snapshots.create",
      "compute.snapshots.delete",
      "compute.snapshots.get",
      "compute.snapshots.getIamPolicy",
      "compute.snapshots.list",
      "compute.snapshots.setIamPolicy",
      "compute.snapshots.setLabels",
      "compute.snapshots.useReadOnly",
      "compute.sslCertificates.create",
      "compute.sslCertificates.delete",
      "compute.sslCertificates.get",
      "compute.sslCertificates.list",
      "compute.sslPolicies.create",
      "compute.sslPolicies.delete",
      "compute.sslPolicies.get",
      "compute.sslPolicies.list",
      "compute.sslPolicies.listAvailableFeatures",
      "compute.sslPolicies.update",
      "compute.sslPolicies.use",
      "compute.subnetworks.create",
      "compute.subnetworks.delete",
      "compute.subnetworks.expandIpCidrRange",
      "compute.subnetworks.get",
      "compute.subnetworks.getIamPolicy",
      "compute.subnetworks.list",
      "compute.subnetworks.mirror",
      "compute.subnetworks.setIamPolicy",
      "compute.subnetworks.setPrivateIpGoogleAccess",
      "compute.subnetworks.update",
      "compute.subnetworks.use",
      "compute.subnetworks.useExternalIp",
      "compute.targetHttpProxies.create",
      "compute.targetHttpProxies.delete",
      "compute.targetHttpProxies.get",
      "compute.targetHttpProxies.list",
      "compute.targetHttpProxies.setUrlMap",
      "compute.targetHttpProxies.use",
      "compute.targetHttpsProxies.create",
      "compute.targetHttpsProxies.delete",
      "compute.targetHttpsProxies.get",
      "compute.targetHttpsProxies.list",
      "compute.targetHttpsProxies.setSslCertificates",
      "compute.targetHttpsProxies.setSslPolicy",
      "compute.targetHttpsProxies.setUrlMap",
      "compute.targetHttpsProxies.use",
      "compute.targetInstances.create",
      "compute.targetInstances.delete",
      "compute.targetInstances.get",
      "compute.targetInstances.list",
      "compute.targetInstances.use",
      "compute.targetPools.addHealthCheck",
      "compute.targetPools.addInstance",
      "compute.targetPools.create",
      "compute.targetPools.delete",
      "compute.targetPools.get",
      "compute.targetPools.list",
      "compute.targetPools.removeHealthCheck",
      "compute.targetPools.removeInstance",
      "compute.targetPools.update",
      "compute.targetPools.use",
      "compute.targetSslProxies.create",
      "compute.targetSslProxies.delete",
      "compute.targetSslProxies.get",
      "compute.targetSslProxies.list",
      "compute.targetSslProxies.setBackendService",
      "compute.targetSslProxies.setProxyHeader",
      "compute.targetSslProxies.setSslCertificates",
      "compute.targetSslProxies.use",
      "compute.targetTcpProxies.create",
      "compute.targetTcpProxies.delete",
      "compute.targetTcpProxies.get",
      "compute.targetTcpProxies.list",
      "compute.targetTcpProxies.update",
      "compute.targetTcpProxies.use",
      "compute.targetVpnGateways.create",
      "compute.targetVpnGateways.delete",
      "compute.targetVpnGateways.get",
      "compute.targetVpnGateways.list",
      "compute.targetVpnGateways.setLabels",
      "compute.targetVpnGateways.use",
      "compute.urlMaps.create",
      "compute.urlMaps.delete",
      "compute.urlMaps.get",
      "compute.urlMaps.invalidateCache",
      "compute.urlMaps.list",
      "compute.urlMaps.update",
      "compute.urlMaps.use",
      "compute.urlMaps.validate",
      "compute.vpnGateways.create",
      "compute.vpnGateways.delete",
      "compute.vpnGateways.get",
      "compute.vpnGateways.list",
      "compute.vpnGateways.setLabels",
      "compute.vpnGateways.use",
      "compute.vpnTunnels.create",
      "compute.vpnTunnels.delete",
      "compute.vpnTunnels.get",
      "compute.vpnTunnels.list",
      "compute.vpnTunnels.setLabels",
      "compute.zoneOperations.delete",
      "compute.zoneOperations.get",
      "compute.zoneOperations.getIamPolicy",
      "compute.zoneOperations.list",
      "compute.zoneOperations.setIamPolicy",
      "compute.zones.get",
      "compute.zones.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.imageUser": {
    "name": "roles/compute.imageUser",
    "title": "Compute Image User",
    "description": "Read and use image resources.",
    "includedPermissions": [
      "compute.images.get",
      "compute.images.getFromFamily",
      "compute.images.list",
      "compute.images.useReadOnly",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.instanceAdmin": {
    "name": "roles/compute.instanceAdmin",
    "title": "Compute Instance Admin (beta)",
    "description": "Full control of Compute Engine instance resources.",
    "includedPermissions": [
      "compute.acceleratorTypes.get",
      "compute.acceleratorTypes.list",
      "compute.addresses.get",
      "compute.addresses.list",
      "compute.addresses.use",
      "compute.autoscalers.create",
      "compute.autoscalers.delete",
      "compute.autoscalers.get",
      "compute.autoscalers.list",
      "compute.autoscalers.update",
      "compute.diskTypes.get",
      "compute.diskTypes.list",
      "compute.disks.create",
      "compute.disks.createSnapshot",
      "compute.disks.delete",
      "compute.disks.get",
      "compute.disks.list",
      "compute.disks.resize",
      "compute.disks.setLabels",
      "compute.disks.update",
      "compute.disks.use",
      "compute.disks.useReadOnly",
      "compute.globalAddresses.get",
      "compute.globalAddresses.list",
      "compute.globalAddresses.use",
      "compute.globalOperations.get",
      "compute.globalOperations.list",
      "compute.images.get",
      "compute.images.getFromFamily",
      "compute.images.list",
      "compute.images.useReadOnly",
      "compute.instanceGroupManagers.create",
      "compute.instanceGroupManagers.delete",
      "compute.instanceGroupManagers.get",
      "compute.instanceGroupManagers.list",
      "compute.instanceGroupManagers.update",
      "compute.instanceGroupManagers.use",
      "compute.instanceGroups.create",
      "compute.instanceGroups.delete",
      "compute.instanceGroups.get",
      "compute.instanceGroups.list",
      "compute.instanceGroups.update",
      "compute.instanceGroups.use",
      "compute.instanceTemplates.create",
      "compute.instanceTemplates.delete",
      "compute.instanceTemplates.get",
      "compute.instanceTemplates.getIamPolicy",
      "compute.instanceTemplates.list",
      "compute.instanceTemplates.setIamPolicy",
      "compute.instanceTemplates.useReadOnly",
      "compute.instances.addAccessConfig",
      "compute.instances.addMaintenancePolicies",
      "compute.instances.attachDisk",
      "compute.instances.create",
      "compute.instances.delete",
      "compute.instances.deleteAccessConfig",
      "compute.instances.detachDisk",
      "compute.instances.get",
      "compute.instances.getGuestAttributes",
      "compute.instances.getIamPolicy",
      "compute.instances.getSerialPortOutput",
      "compute.instances.getShieldedInstanceIdentity",
      "compute.instances.getShieldedVmIdentity",
      "compute.instances.list",
      "compute.instances.listReferrers",
      "compute.instances.osAdminLogin",
      "compute.instances.osLogin",
      "compute.instances.removeMaintenancePolicies",
      "compute.instances.reset",
      "compute.instances.resume",
      "compute.instances.setDeletionProtection",
      "compute.instances.setDiskAutoDelete",
      "compute.instances.setIamPolicy",
      "compute.instances.setLabels",
      "compute.instances.setMachineResources",
      "compute.instances.setMachineType",
      "compute.instances.setMetadata",
      "compute.instances.setMinCpuPlatform",
      "compute.instances.setScheduling",
      "compute.instances.setServiceAccount",
      "compute.instances.setShieldedInstanceIntegrityPolicy",
      "compute.instances.setShieldedVmIntegrityPolicy",
      "compute.instances.setTags",
      "compute.instances.start",
      "compute.instances.startWithEncryptionKey",
      "compute.instances.stop",
      "compute.instances.suspend",
      "compute.instances.updateAccessConfig",
      "compute.instances.updateDisplayDevice",
      "compute.instances.updateNetworkInterface",
      "compute.instances.updateShieldedInstanceConfig",
      "compute.instances.updateShieldedVmConfig",
      "compute.instances.use",
      "compute.licenses.get",
      "compute.licenses.list",
      "compute.machineTypes.get",
      "compute.machineTypes.list",
      "compute.networkEndpointGroups.attachNetworkEndpoints",
      "compute.networkEndpointGroups.create",
      "compute.networkEndpointGroups.delete",
      "compute.networkEndpointGroups.detachNetworkEndpoints",
      "compute.networkEndpointGroups.get",
      "compute.networkEndpointGroups.getIamPolicy",
      "compute.networkEndpointGroups.list",
      "compute.networkEndpointGroups.setIamPolicy",
      "compute.networkEndpointGroups.use",
      "compute.networks.get",
      "compute.networks.list",
      "compute.networks.use",
      "compute.networks.useExternalIp",
      "compute.projects.get",
      "compute.regionOperations.get",
      "compute.regionOperations.list",
      "compute.regions.get",
      "compute.regions.list",
      "compute.reservations.get",
      "compute.reservations.list",
      "compute.subnetworks.get",
      "compute.subnetworks.list",
      "compute.subnetworks.use",
      "compute.subnetworks.useExternalIp",
      "compute.targetPools.get",
      "compute.targetPools.list",
      "compute.zoneOperations.get",
      "compute.zoneOperations.list",
      "compute.zones.get",
      "compute.zones.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.instanceAdmin.v1": {
    "name": "roles/compute.instanceAdmin.v1",
    "title": "Compute Instance Admin (v1)",
    "description": "Full control of Compute Engine instances, instance groups, disks, snapshots, and images. Read access to all Compute Engine networking resources.",
    "includedPermissions": [
      "compute.acceleratorTypes.get",
      "compute.acceleratorTypes.list",
      "compute.addresses.get",
      "compute.addresses.list",
      "compute.addresses.use",
      "compute.autoscalers.create",
      "compute.autoscalers.delete",
      "compute.autoscalers.get",
      "compute.autoscalers.list",
      "compute.autoscalers.update",
      "compute.backendBuckets.get",
      "compute.backendBuckets.list",
      "compute.backendServices.get",
      "compute.backendServices.list",
      "compute.diskTypes.get",
      "compute.diskTypes.list",
      "compute.disks.addResourcePolicies",
      "compute.disks.create",
      "compute.disks.createSnapshot",
      "compute.disks.delete",
      "compute.disks.get",
      "compute.disks.getIamPolicy",
      "compute.disks.list",
      "compute.disks.removeResourcePolicies",
      "compute.disks.resize",
      "compute.disks.setIamPolicy",
      "compute.disks.setLabels",
      "compute.disks.update",
      "compute.disks.use",
      "compute.disks.useReadOnly",
      "compute.externalVpnGateways.get",
      "compute.externalVpnGateways.list",
      "compute.firewalls.get",
      "compute.firewalls.list",
      "compute.forwardingRules.get",
      "compute.forwardingRules.list",
      "compute.globalAddresses.get",
      "compute.globalAddresses.list",
      "compute.globalAddresses.use",
      "compute.globalForwardingRules.get",
      "compute.globalForwardingRules.list",
      "compute.globalOperations.get",
      "compute.globalOperations.list",
      "compute.healthChecks.get",
      "compute.healthChecks.list",
      "compute.httpHealthChecks.get",
      "compute.httpHealthChecks.list",
      "compute.httpsHealthChecks.get",
      "compute.httpsHealthChecks.list",
      "compute.images.create",
      "compute.images.delete",
      "compute.images.deprecate",
      "compute.images.get",
      "compute.images.getFromFamily",
      "compute.images.getIamPolicy",
      "compute.images.list",
      "compute.images.setIamPolicy",
      "compute.images.setLabels",
      "compute.images.update",
      "compute.images.useReadOnly",
      "compute.instanceGroupManagers.create",
      "compute.instanceGroupManagers.delete",
      "compute.instanceGroupManagers.get",
      "compute.instanceGroupManagers.list",
      "compute.instanceGroupManagers.update",
      "compute.instanceGroupManagers.use",
      "compute.instanceGroups.create",
      "compute.instanceGroups.delete",
      "compute.instanceGroups.get",
      "compute.instanceGroups.list",
      "compute.instanceGroups.update",
      "compute.instanceGroups.use",
      "compute.instanceTemplates.create",
      "compute.instanceTemplates.delete",
      "compute.instanceTemplates.get",
      "compute.instanceTemplates.getIamPolicy",
      "compute.instanceTemplates.list",
      "compute.instanceTemplates.setIamPolicy",
      "compute.instanceTemplates.useReadOnly",
      "compute.instances.addAccessConfig",
      "compute.instances.addMaintenancePolicies",
      "compute.instances.attachDisk",
      "compute.instances.create",
      "compute.instances.delete",
      "compute.instances.deleteAccessConfig",
      "compute.instances.detachDisk",
      "compute.instances.get",
      "compute.instances.getGuestAttributes",
      "compute.instances.getIamPolicy",
      "compute.instances.getSerialPortOutput",
      "compute.instances.getShieldedInstanceIdentity",
      "compute.instances.getShieldedVmIdentity",
      "compute.instances.list",
      "compute.instances.listReferrers",
      "compute.instances.osAdminLogin",
      "compute.instances.osLogin",
      "compute.instances.removeMaintenancePolicies",
      "compute.instances.reset",
      "compute.instances.resume",
      "compute.instances.setDeletionProtection",
      "compute.instances.setDiskAutoDelete",
      "compute.instances.setIamPolicy",
      "compute.instances.setLabels",
      "compute.instances.setMachineResources",
      "compute.instances.setMachineType",
      "compute.instances.setMetadata",
      "compute.instances.setMinCpuPlatform",
      "compute.instances.setScheduling",
      "compute.instances.setServiceAccount",
      "compute.instances.setShieldedInstanceIntegrityPolicy",
      "compute.instances.setShieldedVmIntegrityPolicy",
      "compute.instances.setTags",
      "compute.instances.start",
      "compute.instances.startWithEncryptionKey",
      "compute.instances.stop",
      "compute.instances.suspend",
      "compute.instances.updateAccessConfig",
      "compute.instances.updateDisplayDevice",
      "compute.instances.updateNetworkInterface",
      "compute.instances.updateShieldedInstanceConfig",
      "compute.instances.updateShieldedVmConfig",
      "compute.instances.use",
      "compute.interconnectAttachments.get",
      "compute.interconnectAttachments.list",
      "compute.interconnectLocations.get",
      "compute.interconnectLocations.list",
      "compute.interconnects.get",
      "compute.interconnects.list",
      "compute.licenseCodes.get",
      "compute.licenseCodes.getIamPolicy",
      "compute.licenseCodes.list",
      "compute.licenseCodes.setIamPolicy",
      "compute.licenseCodes.update",
      "compute.licenseCodes.use",
      "compute.licenses.create",
      "compute.licenses.delete",
      "compute.licenses.get",
      "compute.licenses.getIamPolicy",
      "compute.licenses.list",
      "compute.licenses.setIamPolicy",
      "compute.machineTypes.get",
      "compute.machineTypes.list",
      "compute.networkEndpointGroups.attachNetworkEndpoints",
      "compute.networkEndpointGroups.create",
      "compute.networkEndpointGroups.delete",
      "compute.networkEndpointGroups.detachNetworkEndpoints",
      "compute.networkEndpointGroups.get",
      "compute.networkEndpointGroups.getIamPolicy",
      "compute.networkEndpointGroups.list",
      "compute.networkEndpointGroups.setIamPolicy",
      "compute.networkEndpointGroups.use",
      "compute.networks.get",
      "compute.networks.list",
      "compute.networks.use",
      "compute.networks.useExternalIp",
      "compute.projects.get",
      "compute.projects.setCommonInstanceMetadata",
      "compute.regionBackendServices.get",
      "compute.regionBackendServices.list",
      "compute.regionOperations.get",
      "compute.regionOperations.list",
      "compute.regions.get",
      "compute.regions.list",
      "compute.reservations.get",
      "compute.reservations.list",
      "compute.resourcePolicies.create",
      "compute.resourcePolicies.delete",
      "compute.resourcePolicies.get",
      "compute.resourcePolicies.list",
      "compute.resourcePolicies.use",
      "compute.routers.get",
      "compute.routers.list",
      "compute.routes.get",
      "compute.routes.list",
      "compute.snapshots.create",
      "compute.snapshots.delete",
      "compute.snapshots.get",
      "compute.snapshots.getIamPolicy",
      "compute.snapshots.list",
      "compute.snapshots.setIamPolicy",
      "compute.snapshots.setLabels",
      "compute.snapshots.useReadOnly",
      "compute.sslCertificates.get",
      "compute.sslCertificates.list",
      "compute.sslPolicies.get",
      "compute.sslPolicies.list",
      "compute.sslPolicies.listAvailableFeatures",
      "compute.subnetworks.get",
      "compute.subnetworks.list",
      "compute.subnetworks.use",
      "compute.subnetworks.useExternalIp",
      "compute.targetHttpProxies.get",
      "compute.targetHttpProxies.list",
      "compute.targetHttpsProxies.get",
      "compute.targetHttpsProxies.list",
      "compute.targetInstances.get",
      "compute.targetInstances.list",
      "compute.targetPools.get",
      "compute.targetPools.list",
      "compute.targetSslProxies.get",
      "compute.targetSslProxies.list",
      "compute.targetTcpProxies.get",
      "compute.targetTcpProxies.list",
      "compute.targetVpnGateways.get",
      "compute.targetVpnGateways.list",
      "compute.urlMaps.get",
      "compute.urlMaps.list",
      "compute.vpnGateways.get",
      "compute.vpnGateways.list",
      "compute.vpnTunnels.get",
      "compute.vpnTunnels.list",
      "compute.zoneOperations.get",
      "compute.zoneOperations.list",
      "compute.zones.get",
      "compute.zones.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.loadBalancerAdmin": {
    "name": "roles/compute.loadBalancerAdmin",
    "title": "Compute Load Balancer Admin",
    "description": "Full control of Compute Engine resources related to load balancer.",
    "includedPermissions": [
      "compute.addresses.create",
      "compute.addresses.createInternal",
      "compute.addresses.delete",
      "compute.addresses.deleteInternal",
      "compute.addresses.get",
      "compute.addresses.list",
      "compute.addresses.setLabels",
      "compute.addresses.use",
      "compute.addresses.useInternal",
      "compute.backendBuckets.create",
      "compute.backendBuckets.delete",
      "compute.backendBuckets.get",
      "compute.backendBuckets.list",
      "compute.backendBuckets.update",
      "compute.backendBuckets.use",
      "compute.backendServices.create",
      "compute.backendServices.delete",
      "compute.backendServices.get",
      "compute.backendServices.list",
      "compute.backendServices.setSecurityPolicy",
      "compute.backendServices.update",
      "compute.backendServices.use",
      "compute.forwardingRules.create",
      "compute.forwardingRules.delete",
      "compute.forwardingRules.get",
      "compute.forwardingRules.list",
      "compute.forwardingRules.setLabels",
      "compute.forwardingRules.setTarget",
      "compute.globalAddresses.create",
      "compute.globalAddresses.createInternal",
      "compute.globalAddresses.delete",
      "compute.globalAddresses.deleteInternal",
      "compute.globalAddresses.get",
      "compute.globalAddresses.list",
      "compute.globalAddresses.setLabels",
      "compute.globalAddresses.use",
      "compute.globalForwardingRules.create",
      "compute.globalForwardingRules.delete",
      "compute.globalForwardingRules.get",
      "compute.globalForwardingRules.list",
      "compute.globalForwardingRules.setLabels",
      "compute.globalForwardingRules.setTarget",
      "compute.healthChecks.create",
      "compute.healthChecks.delete",
      "compute.healthChecks.get",
      "compute.healthChecks.list",
      "compute.healthChecks.update",
      "compute.healthChecks.use",
      "compute.healthChecks.useReadOnly",
      "compute.httpHealthChecks.create",
      "compute.httpHealthChecks.delete",
      "compute.httpHealthChecks.get",
      "compute.httpHealthChecks.list",
      "compute.httpHealthChecks.update",
      "compute.httpHealthChecks.use",
      "compute.httpHealthChecks.useReadOnly",
      "compute.httpsHealthChecks.create",
      "compute.httpsHealthChecks.delete",
      "compute.httpsHealthChecks.get",
      "compute.httpsHealthChecks.list",
      "compute.httpsHealthChecks.update",
      "compute.httpsHealthChecks.use",
      "compute.httpsHealthChecks.useReadOnly",
      "compute.instanceGroups.create",
      "compute.instanceGroups.delete",
      "compute.instanceGroups.get",
      "compute.instanceGroups.list",
      "compute.instanceGroups.update",
      "compute.instanceGroups.use",
      "compute.instances.get",
      "compute.instances.list",
      "compute.instances.use",
      "compute.networkEndpointGroups.attachNetworkEndpoints",
      "compute.networkEndpointGroups.create",
      "compute.networkEndpointGroups.delete",
      "compute.networkEndpointGroups.detachNetworkEndpoints",
      "compute.networkEndpointGroups.get",
      "compute.networkEndpointGroups.getIamPolicy",
      "compute.networkEndpointGroups.list",
      "compute.networkEndpointGroups.setIamPolicy",
      "compute.networkEndpointGroups.use",
      "compute.networks.get",
      "compute.networks.list",
      "compute.networks.use",
      "compute.projects.get",
      "compute.regionBackendServices.create",
      "compute.regionBackendServices.delete",
      "compute.regionBackendServices.get",
      "compute.regionBackendServices.list",
      "compute.regionBackendServices.setSecurityPolicy",
      "compute.regionBackendServices.update",
      "compute.regionBackendServices.use",
      "compute.securityPolicies.get",
      "compute.securityPolicies.list",
      "compute.securityPolicies.use",
      "compute.sslCertificates.create",
      "compute.sslCertificates.delete",
      "compute.sslCertificates.get",
      "compute.sslCertificates.list",
      "compute.sslPolicies.create",
      "compute.sslPolicies.delete",
      "compute.sslPolicies.get",
      "compute.sslPolicies.list",
      "compute.sslPolicies.listAvailableFeatures",
      "compute.sslPolicies.update",
      "compute.sslPolicies.use",
      "compute.subnetworks.get",
      "compute.subnetworks.list",
      "compute.subnetworks.use",
      "compute.targetHttpProxies.create",
      "compute.targetHttpProxies.delete",
      "compute.targetHttpProxies.get",
      "compute.targetHttpProxies.list",
      "compute.targetHttpProxies.setUrlMap",
      "compute.targetHttpProxies.use",
      "compute.targetHttpsProxies.create",
      "compute.targetHttpsProxies.delete",
      "compute.targetHttpsProxies.get",
      "compute.targetHttpsProxies.list",
      "compute.targetHttpsProxies.setSslCertificates",
      "compute.targetHttpsProxies.setSslPolicy",
      "compute.targetHttpsProxies.setUrlMap",
      "compute.targetHttpsProxies.use",
      "compute.targetInstances.create",
      "compute.targetInstances.delete",
      "compute.targetInstances.get",
      "compute.targetInstances.list",
      "compute.targetInstances.use",
      "compute.targetPools.addHealthCheck",
      "compute.targetPools.addInstance",
      "compute.targetPools.create",
      "compute.targetPools.delete",
      "compute.targetPools.get",
      "compute.targetPools.list",
      "compute.targetPools.removeHealthCheck",
      "compute.targetPools.removeInstance",
      "compute.targetPools.update",
      "compute.targetPools.use",
      "compute.targetSslProxies.create",
      "compute.targetSslProxies.delete",
      "compute.targetSslProxies.get",
      "compute.targetSslProxies.list",
      "compute.targetSslProxies.setBackendService",
      "compute.targetSslProxies.setProxyHeader",
      "compute.targetSslProxies.setSslCertificates",
      "compute.targetSslProxies.use",
      "compute.targetTcpProxies.create",
      "compute.targetTcpProxies.delete",
      "compute.targetTcpProxies.get",
      "compute.targetTcpProxies.list",
      "compute.targetTcpProxies.update",
      "compute.targetTcpProxies.use",
      "compute.urlMaps.create",
      "compute.urlMaps.delete",
      "compute.urlMaps.get",
      "compute.urlMaps.invalidateCache",
      "compute.urlMaps.list",
      "compute.urlMaps.update",
      "compute.urlMaps.use",
      "compute.urlMaps.validate",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/compute.networkAdmin": {
    "name": "roles/compute.networkAdmin",
    "title": "Compute Network Admin",
    "description": "Full control of Compute Engine networking resources.",
    "includedPermissions": [
      "compute.addresses.create",
      "compute.addresses.createInternal",
      "compute.addresses.delete",
      "compute.addresses.deleteInternal",
      "compute.addresses.get",
      "compute.addresses.list",
      "compute.addresses.setLabels",
      "compute.addresses.use",
      "compute.addresses.useInternal",
      "compute.autoscalers.get",
      "compute.autoscalers.list",
      "compute.backendBuckets.create",
      "compute.backendBuckets.delete",
      "compute.backendBuckets.get",
      "compute.backendBuckets.list",
      "compute.backendBuckets.update",
      "compute.backendBuckets.use",
      "compute.backendServices.create",
      "compute.backendServices.delete",
      "compute.backendServices.get",
      "compute.backendServices.list",
      "compute.backendServices.setSecurityPolicy",
      "compute.backendServices.update",
      "compute.backendServices.use",
      "compute.externalVpnGateways.create",
      "compute.externalVpnGateways.delete",
      "compute.externalVpnGateways.get",
      "compute.externalVpnGateways.list",
      "compute.externalVpnGateways.setLabels",
      "compute.externalVpnGateways.use",
      "compute.firewalls.get",
      "compute.firewalls.list",
      "compute.forwardingRules.create",
      "compute.forwardingRules.delete",
      "compute.forwardingRules.get",
      "compute.forwardingRules.list",
      "compute.forwardingRules.setLabels",
      "compute.forwardingRules.setTarget",
      "compute.globalAddresses.create",
      "compute.globalAddresses.createInternal",
      "compute.globalAddresses.delete",
      "compute.globalAddresses.deleteInternal",
      "compute.globalAddresses.get",
      "compute.globalAddresses.list",
      "compute.globalAddresses.setLabels",
      "compute.globalAddresses.use",
      "compute.globalForwardingRules.create",
      "compute.globalForwardingRules.delete",
      "compute.globalForwardingRules.get",
      "compute.globalForwardingRules.list",
      "compute.globalForwardingRules.setLabels",
      "compute.globalForwardingRules.setTarget",
      "compute.globalOperations.get",
      "compute.globalOperations.list",
      "compute.healthChecks.create",
      "compute.healthChecks.delete",
      "compute.healthChecks.get",
      "compute.healthChecks.list",
      "compute.healthChecks.update",
      "compute.healthChecks.use",
      "compute.healthChecks.useReadOnly",
      "compute.httpHealthChecks.create",
      "compute.httpHealthChecks.delete",
      "compute.httpHealthChecks.get",
      "compute.httpHealthChecks.list",
      "compute.httpHealthChecks.update",
      "compute.httpHealthChecks.use",
      "compute.httpHealthChecks.useReadOnly",
      "compute.httpsHealthChecks.create",
      "compute.httpsHealthChecks.delete",
      "compute.httpsHealthChecks.get",
      "compute.httpsHealthChecks.list",
      "compute.httpsHealthChecks.update",
      "compute.httpsHealthChecks.use",
      "compute.httpsHealthChecks.useReadOnly",
      "compute.instanceGroupManagers.get",
      "compute.instanceGroupManagers.list",
      "compute.instanceGroupManagers.update",
      "compute.instanceGroupManagers.use",
      "compute.instanceGroups.get",
      "compute.instanceGroups.list",
      "compute.instanceGroups.update",
      "compute.instanceGroups.use",
      "compute.instances.get",
      "compute.instances.getGuestAttributes",
      "compute.instances.getSerialPortOutput",
      "compute.instances.list",
      "compute.instances.listReferrers",
      "compute.instances.use",
      "compute.interconnectAttachments.create",
      "compute.interconnectAttachments.delete",
      "compute.interconnectAttachments.get",
      "compute.interconnectAttachments.list",
      "compute.interconnectAttachments.setLabels",
      "compute.interconnectAttachments.update",
      "compute.interconnectAttachments.use",
      "compute.interconnectLocations.get",
      "compute.interconnectLocations.list",
      "compute.interconnects.create",
      "compute.interconnects.delete",
      "compute.interconnects.get",
      "compute.interconnects.list",
      "compute.interconnects.setLabels",
      "compute.interconnects.update",
      "compute.interconnects.use",
      "compute.machineTypes.get",
      "compute.machineTypes.list",
      "compute.networkEndpointGroups.get",
      "compute.networkEndpointGroups.list",
      "compute.networkEndpointGroups.use",
      "compute.networks.addPeering",
      "compute.networks.create",
      "compute.networks.delete",
      "compute.networks.get",
      "compute.networks.list",
      "compute.networks.listPeeringRoutes",
      "compute.networks.mirror",
      "compute.networks.removePeering",
      "compute.networks.switchToCustomMode",
      "compute.networks.update",
      "compute.networks.updatePeering",
      "compute.networks.updatePolicy",
      "compute.networks.use",
      "compute.networks.useExternalIp",
      "compute.projects.get",
      "compute.regionBackendServices.create",
      "compute.regionBackendServices.delete",
      "compute.regionBackendServices.get",
      "compute.regionBackendServices.list",
      "compute.regionBackendServices.setSecurityPolicy",
      "compute.regionBackendServices.update",
      "compute.regionBackendServices.use",
      "compute.regionOperations.get",
      "compute.regionOperations.list",
      "compute.regions.get",
      "compute.regions.list",
      "compute.routers.create",
      "compute.routers.delete",
      "compute.routers.get",
      "compute.routers.list",
      "compute.routers.update",
      "compute.routers.use",
      "compute.routes.create",
      "compute.routes.delete",
      "compute.routes.get",
      "compute.routes.list",
      "compute.securityPolicies.get",
      "compute.securityPolicies.list",
      "compute.securityPolicies.use",
      "compute.sslCertificates.get",
      "compute.sslCertificates.list",
      "compute.sslPolicies.create",
      "compute.sslPolicies.delete",
      "compute.sslPolicies.get",
      "compute.sslPolicies.list",
      "compute.sslPolicies.listAvailableFeatures",
      "compute.sslPolicies.update",
      "compute.sslPolicies.use",
      "compute.subnetworks.create",
      "compute.subnetworks.delete",
      "compute.subnetworks.expandIpCidrRange",
      "compute.subnetworks.get",
      "compute.subnetworks.getIamPolicy",
      "compute.subnetworks.list",
      "compute.subnetworks.mirror",
      "compute.subnetworks.setIamPolicy",
      "compute.subnetworks.setPrivateIpGoogleAccess",
      "compute.subnetworks.update",
      "compute.subnetworks.use",
      "compute.subnetworks.useExternalIp",
      "compute.targetHttpProxies.create",
      "compute.targetHttpProxies.delete",
      "compute.targetHttpProxies.get",
      "compute.targetHttpProxies.list",
      "compute.targetHttpProxies.setUrlMap",
      "compute.targetHttpProxies.use",
      "compute.targetHttpsProxies.create",
      "compute.targetHttpsProxies.delete",
      "compute.targetHttpsProxies.get",
      "compute.targetHttpsProxies.list",
      "compute.targetHttpsProxies.setSslCertificates",
      "compute.targetHttpsProxies.setSslPolicy",
      "compute.targetHttpsProxies.setUrlMap",
      "compute.targetHttpsProxies.use",
      "compute.targetInstances.create",
      "compute.targetInstances.delete",
      "compute.targetInstances.get",
      "compute.targetInstances.list",
      "compute.targetInstances.use",
      "compute.targetPools.addHealthCheck",
      "compute.targetPools.addInstance",
      "compute.targetPools.create",
      "compute.targetPools.delete",
      "compute.targetPools.get",
      "compute.targetPools.list",
      "compute.targetPools.removeHealthCheck",
      "compute.targetPools.removeInstance",
      "compute.targetPools.update",
      "compute.targetPools.use",
      "compute.targetSslProxies.create",
      "compute.targetSslProxies.delete",
      "compute.targetSslProxies.get",
      "compute.targetSslProxies.list",
      "compute.targetSslProxies.setBackendService",
      "compute.targetSslProxies.setProxyHeader",
      "compute.targetSslProxies.setSslCertificates",
      "compute.targetSslProxies.use",
      "compute.targetTcpProxies.create",
      "compute.targetTcpProxies.delete",
      "compute.targetTcpProxies.get",
      "compute.targetTcpProxies.list",
      "compute.targetTcpProxies.update",
      "compute.targetTcpProxies.use",
      "compute.targetVpnGateways.create",
      "compute.targetVpnGateways.delete",
      "compute.targetVpnGateways.get",
      "compute.targetVpnGateways.list",
      "compute.targetVpnGateways.setLabels",
      "compute.targetVpnGateways.use",
      "compute.urlMaps.create",
      "compute.urlMaps.delete",
      "compute.urlMaps.get",
      "compute.urlMaps.invalidateCache",
      "compute.urlMaps.list",
      "compute.urlMaps.update",
      "compute.urlMaps.use",
      "compute.urlMaps.validate",
      "compute.vpnGateways.create",
      "compute.vpnGateways.delete",
      "compute.vpnGateways.get",
      "compute.vpnGateways.list",
      "compute.vpnGateways.setLabels",
      "compute.vpnGateways.use",
      "compute.vpnTunnels.create",
      "compute.vpnTunnels.delete",
      "compute.vpnTunnels.get",
      "compute.vpnTunnels.list",
      "compute.vpnTunnels.setLabels",
      "compute.zoneOperations.get",
      "compute.zoneOperations.list",
      "compute.zones.get",
      "compute.zones.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "servicenetworking.operations.get",
      "servicenetworking.services.addPeering",
      "servicenetworking.services.get",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.networkUser": {
    "name": "roles/compute.networkUser",
    "title": "Compute Network User",
    "description": "Access to use Compute Engine networking resources.",
    "includedPermissions": [
      "compute.addresses.createInternal",
      "compute.addresses.deleteInternal",
      "compute.addresses.get",
      "compute.addresses.list",
      "compute.addresses.useInternal",
      "compute.externalVpnGateways.get",
      "compute.externalVpnGateways.list",
      "compute.externalVpnGateways.use",
      "compute.firewalls.get",
      "compute.firewalls.list",
      "compute.interconnectAttachments.get",
      "compute.interconnectAttachments.list",
      "compute.interconnectLocations.get",
      "compute.interconnectLocations.list",
      "compute.interconnects.get",
      "compute.interconnects.list",
      "compute.interconnects.use",
      "compute.networks.get",
      "compute.networks.list",
      "compute.networks.listPeeringRoutes",
      "compute.networks.use",
      "compute.networks.useExternalIp",
      "compute.projects.get",
      "compute.regions.get",
      "compute.regions.list",
      "compute.routers.get",
      "compute.routers.list",
      "compute.routes.get",
      "compute.routes.list",
      "compute.subnetworks.get",
      "compute.subnetworks.list",
      "compute.subnetworks.use",
      "compute.subnetworks.useExternalIp",
      "compute.targetVpnGateways.get",
      "compute.targetVpnGateways.list",
      "compute.vpnGateways.get",
      "compute.vpnGateways.list",
      "compute.vpnGateways.use",
      "compute.vpnTunnels.get",
      "compute.vpnTunnels.list",
      "compute.zones.get",
      "compute.zones.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "servicenetworking.services.get",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.networkViewer": {
    "name": "roles/compute.networkViewer",
    "title": "Compute Network Viewer",
    "description": "Read-only access to Compute Engine networking resources.",
    "includedPermissions": [
      "compute.addresses.get",
      "compute.addresses.list",
      "compute.autoscalers.get",
      "compute.autoscalers.list",
      "compute.backendBuckets.get",
      "compute.backendBuckets.list",
      "compute.backendServices.get",
      "compute.backendServices.list",
      "compute.firewalls.get",
      "compute.firewalls.list",
      "compute.forwardingRules.get",
      "compute.forwardingRules.list",
      "compute.globalAddresses.get",
      "compute.globalAddresses.list",
      "compute.globalForwardingRules.get",
      "compute.globalForwardingRules.list",
      "compute.healthChecks.get",
      "compute.healthChecks.list",
      "compute.httpHealthChecks.get",
      "compute.httpHealthChecks.list",
      "compute.httpsHealthChecks.get",
      "compute.httpsHealthChecks.list",
      "compute.instanceGroupManagers.get",
      "compute.instanceGroupManagers.list",
      "compute.instanceGroups.get",
      "compute.instanceGroups.list",
      "compute.instances.get",
      "compute.instances.getGuestAttributes",
      "compute.instances.getSerialPortOutput",
      "compute.instances.list",
      "compute.instances.listReferrers",
      "compute.interconnectAttachments.get",
      "compute.interconnectAttachments.list",
      "compute.interconnectLocations.get",
      "compute.interconnectLocations.list",
      "compute.interconnects.get",
      "compute.interconnects.list",
      "compute.machineTypes.get",
      "compute.machineTypes.list",
      "compute.networks.get",
      "compute.networks.list",
      "compute.networks.listPeeringRoutes",
      "compute.projects.get",
      "compute.regionBackendServices.get",
      "compute.regionBackendServices.list",
      "compute.regions.get",
      "compute.regions.list",
      "compute.routers.get",
      "compute.routers.list",
      "compute.routes.get",
      "compute.routes.list",
      "compute.sslCertificates.get",
      "compute.sslCertificates.list",
      "compute.sslPolicies.get",
      "compute.sslPolicies.list",
      "compute.sslPolicies.listAvailableFeatures",
      "compute.subnetworks.get",
      "compute.subnetworks.list",
      "compute.targetHttpProxies.get",
      "compute.targetHttpProxies.list",
      "compute.targetHttpsProxies.get",
      "compute.targetHttpsProxies.list",
      "compute.targetInstances.get",
      "compute.targetInstances.list",
      "compute.targetPools.get",
      "compute.targetPools.list",
      "compute.targetSslProxies.get",
      "compute.targetSslProxies.list",
      "compute.targetTcpProxies.get",
      "compute.targetTcpProxies.list",
      "compute.targetVpnGateways.get",
      "compute.targetVpnGateways.list",
      "compute.urlMaps.get",
      "compute.urlMaps.list",
      "compute.vpnGateways.get",
      "compute.vpnGateways.list",
      "compute.vpnTunnels.get",
      "compute.vpnTunnels.list",
      "compute.zones.get",
      "compute.zones.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "servicenetworking.services.get",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.orgSecurityPolicyAdmin": {
    "name": "roles/compute.orgSecurityPolicyAdmin",
    "title": "Compute Organization Security Policy Admin",
    "description": "Full control of Compute Engine Organization Security Policies.",
    "includedPermissions": [
      "compute.globalOperations.get",
      "compute.globalOperations.getIamPolicy",
      "compute.globalOperations.list",
      "compute.globalOperations.setIamPolicy",
      "compute.projects.get",
      "compute.securityPolicies.create",
      "compute.securityPolicies.delete",
      "compute.securityPolicies.get",
      "compute.securityPolicies.getIamPolicy",
      "compute.securityPolicies.list",
      "compute.securityPolicies.setIamPolicy",
      "compute.securityPolicies.update",
      "compute.securityPolicies.use",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/compute.orgSecurityPolicyUser": {
    "name": "roles/compute.orgSecurityPolicyUser",
    "title": "Compute Organization Security Policy User",
    "description": "View or use Compute Engine Security Policies to associate with the organization or folders.",
    "includedPermissions": [
      "compute.globalOperations.get",
      "compute.globalOperations.getIamPolicy",
      "compute.globalOperations.list",
      "compute.globalOperations.setIamPolicy",
      "compute.projects.get",
      "compute.securityPolicies.get",
      "compute.securityPolicies.list",
      "compute.securityPolicies.use",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/compute.orgSecurityResourceAdmin": {
    "name": "roles/compute.orgSecurityResourceAdmin",
    "title": "Compute Organization Resource Admin",
    "description": "Full control of Compute Engine Security Policy associations to the organization or folders.",
    "includedPermissions": [
      "compute.globalOperations.get",
      "compute.globalOperations.getIamPolicy",
      "compute.globalOperations.list",
      "compute.globalOperations.setIamPolicy",
      "compute.projects.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/compute.osAdminLogin": {
    "name": "roles/compute.osAdminLogin",
    "title": "Compute OS Admin Login",
    "description": "Access to log in to a Compute Engine instance as an administrator user.",
    "includedPermissions": [
      "compute.instances.get",
      "compute.instances.list",
      "compute.instances.osAdminLogin",
      "compute.instances.osLogin",
      "compute.projects.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.osLogin": {
    "name": "roles/compute.osLogin",
    "title": "Compute OS Login",
    "description": "Access to log in to a Compute Engine instance as a standard (non-administrator) user.",
    "includedPermissions": [
      "compute.instances.get",
      "compute.instances.list",
      "compute.instances.osLogin",
      "compute.projects.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.osLoginExternalUser": {
    "name": "roles/compute.osLoginExternalUser",
    "title": "Compute OS Login External User",
    "description": "Access for an external user to set OS Login information associated with this organization. This role does not grant access to instances. External users must be granted one of the required OS Login IAM roles (https://cloud.google.com/compute/docs/instances/managing-instance-access#configure_users) in order to allow access to instances using SSH.",
    "includedPermissions": [
      "compute.oslogin.updateExternalUser"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.packetMirroringAdmin": {
    "name": "roles/compute.packetMirroringAdmin",
    "title": "Compute packet mirroring admin",
    "description": "Specify resources to be mirrored.",
    "includedPermissions": [
      "compute.networks.mirror",
      "compute.projects.get",
      "compute.subnetworks.mirror",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.packetMirroringUser": {
    "name": "roles/compute.packetMirroringUser",
    "title": "Compute packet mirroring user",
    "description": "Use Compute Engine packet mirrorings.",
    "includedPermissions": [
      "compute.packetMirrorings.update",
      "compute.projects.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.securityAdmin": {
    "name": "roles/compute.securityAdmin",
    "title": "Compute Security Admin",
    "description": "Full control of Compute Engine security resources.",
    "includedPermissions": [
      "compute.firewalls.create",
      "compute.firewalls.delete",
      "compute.firewalls.get",
      "compute.firewalls.list",
      "compute.firewalls.update",
      "compute.globalOperations.get",
      "compute.globalOperations.list",
      "compute.instances.setShieldedInstanceIntegrityPolicy",
      "compute.instances.setShieldedVmIntegrityPolicy",
      "compute.instances.updateShieldedInstanceConfig",
      "compute.instances.updateShieldedVmConfig",
      "compute.networks.get",
      "compute.networks.list",
      "compute.networks.updatePolicy",
      "compute.packetMirrorings.update",
      "compute.projects.get",
      "compute.regionOperations.get",
      "compute.regionOperations.list",
      "compute.regions.get",
      "compute.regions.list",
      "compute.routes.get",
      "compute.routes.list",
      "compute.securityPolicies.create",
      "compute.securityPolicies.delete",
      "compute.securityPolicies.get",
      "compute.securityPolicies.getIamPolicy",
      "compute.securityPolicies.list",
      "compute.securityPolicies.setIamPolicy",
      "compute.securityPolicies.update",
      "compute.securityPolicies.use",
      "compute.sslCertificates.create",
      "compute.sslCertificates.delete",
      "compute.sslCertificates.get",
      "compute.sslCertificates.list",
      "compute.sslPolicies.create",
      "compute.sslPolicies.delete",
      "compute.sslPolicies.get",
      "compute.sslPolicies.list",
      "compute.sslPolicies.listAvailableFeatures",
      "compute.sslPolicies.update",
      "compute.sslPolicies.use",
      "compute.subnetworks.get",
      "compute.subnetworks.list",
      "compute.zoneOperations.get",
      "compute.zoneOperations.list",
      "compute.zones.get",
      "compute.zones.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.storageAdmin": {
    "name": "roles/compute.storageAdmin",
    "title": "Compute Storage Admin",
    "description": "Full control of Compute Engine storage resources.",
    "includedPermissions": [
      "compute.diskTypes.get",
      "compute.diskTypes.list",
      "compute.disks.addResourcePolicies",
      "compute.disks.create",
      "compute.disks.createSnapshot",
      "compute.disks.delete",
      "compute.disks.get",
      "compute.disks.getIamPolicy",
      "compute.disks.list",
      "compute.disks.removeResourcePolicies",
      "compute.disks.resize",
      "compute.disks.setIamPolicy",
      "compute.disks.setLabels",
      "compute.disks.update",
      "compute.disks.use",
      "compute.disks.useReadOnly",
      "compute.globalOperations.get",
      "compute.globalOperations.list",
      "compute.images.create",
      "compute.images.delete",
      "compute.images.deprecate",
      "compute.images.get",
      "compute.images.getFromFamily",
      "compute.images.getIamPolicy",
      "compute.images.list",
      "compute.images.setIamPolicy",
      "compute.images.setLabels",
      "compute.images.update",
      "compute.images.useReadOnly",
      "compute.licenseCodes.get",
      "compute.licenseCodes.getIamPolicy",
      "compute.licenseCodes.list",
      "compute.licenseCodes.setIamPolicy",
      "compute.licenseCodes.update",
      "compute.licenseCodes.use",
      "compute.licenses.create",
      "compute.licenses.delete",
      "compute.licenses.get",
      "compute.licenses.getIamPolicy",
      "compute.licenses.list",
      "compute.licenses.setIamPolicy",
      "compute.projects.get",
      "compute.regionOperations.get",
      "compute.regionOperations.list",
      "compute.regions.get",
      "compute.regions.list",
      "compute.resourcePolicies.create",
      "compute.resourcePolicies.delete",
      "compute.resourcePolicies.get",
      "compute.resourcePolicies.list",
      "compute.resourcePolicies.use",
      "compute.snapshots.create",
      "compute.snapshots.delete",
      "compute.snapshots.get",
      "compute.snapshots.getIamPolicy",
      "compute.snapshots.list",
      "compute.snapshots.setIamPolicy",
      "compute.snapshots.setLabels",
      "compute.snapshots.useReadOnly",
      "compute.zoneOperations.get",
      "compute.zoneOperations.list",
      "compute.zones.get",
      "compute.zones.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.viewer": {
    "name": "roles/compute.viewer",
    "title": "Compute Viewer",
    "description": "Read-only access to get and list information about all Compute Engine resources, including instances, disks, and firewalls. Allows getting and listing information about disks, images, and snapshots, but does not allow reading the data stored on them.",
    "includedPermissions": [
      "compute.acceleratorTypes.get",
      "compute.acceleratorTypes.list",
      "compute.addresses.get",
      "compute.addresses.list",
      "compute.autoscalers.get",
      "compute.autoscalers.list",
      "compute.backendBuckets.get",
      "compute.backendBuckets.list",
      "compute.backendServices.get",
      "compute.backendServices.list",
      "compute.commitments.get",
      "compute.commitments.list",
      "compute.diskTypes.get",
      "compute.diskTypes.list",
      "compute.disks.get",
      "compute.disks.getIamPolicy",
      "compute.disks.list",
      "compute.externalVpnGateways.get",
      "compute.externalVpnGateways.list",
      "compute.firewalls.get",
      "compute.firewalls.list",
      "compute.forwardingRules.get",
      "compute.forwardingRules.list",
      "compute.globalAddresses.get",
      "compute.globalAddresses.list",
      "compute.globalForwardingRules.get",
      "compute.globalForwardingRules.list",
      "compute.globalOperations.get",
      "compute.globalOperations.getIamPolicy",
      "compute.globalOperations.list",
      "compute.healthChecks.get",
      "compute.healthChecks.list",
      "compute.httpHealthChecks.get",
      "compute.httpHealthChecks.list",
      "compute.httpsHealthChecks.get",
      "compute.httpsHealthChecks.list",
      "compute.images.get",
      "compute.images.getFromFamily",
      "compute.images.getIamPolicy",
      "compute.images.list",
      "compute.instanceGroupManagers.get",
      "compute.instanceGroupManagers.list",
      "compute.instanceGroups.get",
      "compute.instanceGroups.list",
      "compute.instanceTemplates.get",
      "compute.instanceTemplates.getIamPolicy",
      "compute.instanceTemplates.list",
      "compute.instances.get",
      "compute.instances.getGuestAttributes",
      "compute.instances.getIamPolicy",
      "compute.instances.getSerialPortOutput",
      "compute.instances.getShieldedInstanceIdentity",
      "compute.instances.getShieldedVmIdentity",
      "compute.instances.list",
      "compute.instances.listReferrers",
      "compute.interconnectAttachments.get",
      "compute.interconnectAttachments.list",
      "compute.interconnectLocations.get",
      "compute.interconnectLocations.list",
      "compute.interconnects.get",
      "compute.interconnects.list",
      "compute.licenseCodes.get",
      "compute.licenseCodes.getIamPolicy",
      "compute.licenseCodes.list",
      "compute.licenses.get",
      "compute.licenses.getIamPolicy",
      "compute.licenses.list",
      "compute.machineTypes.get",
      "compute.machineTypes.list",
      "compute.maintenancePolicies.get",
      "compute.maintenancePolicies.getIamPolicy",
      "compute.maintenancePolicies.list",
      "compute.networkEndpointGroups.get",
      "compute.networkEndpointGroups.getIamPolicy",
      "compute.networkEndpointGroups.list",
      "compute.networks.get",
      "compute.networks.list",
      "compute.networks.listPeeringRoutes",
      "compute.nodeGroups.get",
      "compute.nodeGroups.getIamPolicy",
      "compute.nodeGroups.list",
      "compute.nodeTemplates.get",
      "compute.nodeTemplates.getIamPolicy",
      "compute.nodeTemplates.list",
      "compute.nodeTypes.get",
      "compute.nodeTypes.list",
      "compute.projects.get",
      "compute.regionBackendServices.get",
      "compute.regionBackendServices.list",
      "compute.regionOperations.get",
      "compute.regionOperations.getIamPolicy",
      "compute.regionOperations.list",
      "compute.regions.get",
      "compute.regions.list",
      "compute.reservations.get",
      "compute.reservations.list",
      "compute.resourcePolicies.get",
      "compute.resourcePolicies.list",
      "compute.routers.get",
      "compute.routers.list",
      "compute.routes.get",
      "compute.routes.list",
      "compute.securityPolicies.get",
      "compute.securityPolicies.getIamPolicy",
      "compute.securityPolicies.list",
      "compute.snapshots.get",
      "compute.snapshots.getIamPolicy",
      "compute.snapshots.list",
      "compute.sslCertificates.get",
      "compute.sslCertificates.list",
      "compute.sslPolicies.get",
      "compute.sslPolicies.list",
      "compute.sslPolicies.listAvailableFeatures",
      "compute.subnetworks.get",
      "compute.subnetworks.getIamPolicy",
      "compute.subnetworks.list",
      "compute.targetHttpProxies.get",
      "compute.targetHttpProxies.list",
      "compute.targetHttpsProxies.get",
      "compute.targetHttpsProxies.list",
      "compute.targetInstances.get",
      "compute.targetInstances.list",
      "compute.targetPools.get",
      "compute.targetPools.list",
      "compute.targetSslProxies.get",
      "compute.targetSslProxies.list",
      "compute.targetTcpProxies.get",
      "compute.targetTcpProxies.list",
      "compute.targetVpnGateways.get",
      "compute.targetVpnGateways.list",
      "compute.urlMaps.get",
      "compute.urlMaps.list",
      "compute.urlMaps.validate",
      "compute.vpnGateways.get",
      "compute.vpnGateways.list",
      "compute.vpnTunnels.get",
      "compute.vpnTunnels.list",
      "compute.zoneOperations.get",
      "compute.zoneOperations.getIamPolicy",
      "compute.zoneOperations.list",
      "compute.zones.get",
      "compute.zones.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/compute.xpnAdmin": {
    "name": "roles/compute.xpnAdmin",
    "title": "Compute Shared VPC Admin",
    "description": "Can administer shared VPC network (XPN).",
    "includedPermissions": [
      "compute.globalOperations.get",
      "compute.globalOperations.list",
      "compute.organizations.administerXpn",
      "compute.organizations.disableXpnHost",
      "compute.organizations.disableXpnResource",
      "compute.organizations.enableXpnHost",
      "compute.organizations.enableXpnResource",
      "compute.projects.get",
      "compute.subnetworks.getIamPolicy",
      "compute.subnetworks.setIamPolicy",
      "resourcemanager.organizations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/container.admin": {
    "name": "roles/container.admin",
    "title": "Kubernetes Engine Admin",
    "description": "Full management of Kubernetes Clusters and their Kubernetes API objects.",
    "includedPermissions": [
      "container.apiServices.create",
      "container.apiServices.delete",
      "container.apiServices.get",
      "container.apiServices.list",
      "container.apiServices.update",
      "container.apiServices.updateStatus",
      "container.backendConfigs.create",
      "container.backendConfigs.delete",
      "container.backendConfigs.get",
      "container.backendConfigs.list",
      "container.backendConfigs.update",
      "container.bindings.create",
      "container.bindings.delete",
      "container.bindings.get",
      "container.bindings.list",
      "container.bindings.update",
      "container.certificateSigningRequests.approve",
      "container.certificateSigningRequests.create",
      "container.certificateSigningRequests.delete",
      "container.certificateSigningRequests.get",
      "container.certificateSigningRequests.list",
      "container.certificateSigningRequests.update",
      "container.certificateSigningRequests.updateStatus",
      "container.clusterRoleBindings.create",
      "container.clusterRoleBindings.delete",
      "container.clusterRoleBindings.get",
      "container.clusterRoleBindings.list",
      "container.clusterRoleBindings.update",
      "container.clusterRoles.bind",
      "container.clusterRoles.create",
      "container.clusterRoles.delete",
      "container.clusterRoles.get",
      "container.clusterRoles.list",
      "container.clusterRoles.update",
      "container.clusters.create",
      "container.clusters.delete",
      "container.clusters.get",
      "container.clusters.getCredentials",
      "container.clusters.list",
      "container.clusters.update",
      "container.componentStatuses.get",
      "container.componentStatuses.list",
      "container.configMaps.create",
      "container.configMaps.delete",
      "container.configMaps.get",
      "container.configMaps.list",
      "container.configMaps.update",
      "container.controllerRevisions.create",
      "container.controllerRevisions.delete",
      "container.controllerRevisions.get",
      "container.controllerRevisions.list",
      "container.controllerRevisions.update",
      "container.cronJobs.create",
      "container.cronJobs.delete",
      "container.cronJobs.get",
      "container.cronJobs.getStatus",
      "container.cronJobs.list",
      "container.cronJobs.update",
      "container.cronJobs.updateStatus",
      "container.csiDrivers.create",
      "container.csiDrivers.delete",
      "container.csiDrivers.get",
      "container.csiDrivers.list",
      "container.csiDrivers.update",
      "container.csiNodes.create",
      "container.csiNodes.delete",
      "container.csiNodes.get",
      "container.csiNodes.list",
      "container.csiNodes.update",
      "container.customResourceDefinitions.create",
      "container.customResourceDefinitions.delete",
      "container.customResourceDefinitions.get",
      "container.customResourceDefinitions.list",
      "container.customResourceDefinitions.update",
      "container.customResourceDefinitions.updateStatus",
      "container.daemonSets.create",
      "container.daemonSets.delete",
      "container.daemonSets.get",
      "container.daemonSets.getStatus",
      "container.daemonSets.list",
      "container.daemonSets.update",
      "container.daemonSets.updateStatus",
      "container.deployments.create",
      "container.deployments.delete",
      "container.deployments.get",
      "container.deployments.getScale",
      "container.deployments.getStatus",
      "container.deployments.list",
      "container.deployments.rollback",
      "container.deployments.update",
      "container.deployments.updateScale",
      "container.deployments.updateStatus",
      "container.endpoints.create",
      "container.endpoints.delete",
      "container.endpoints.get",
      "container.endpoints.list",
      "container.endpoints.update",
      "container.events.create",
      "container.events.delete",
      "container.events.get",
      "container.events.list",
      "container.events.update",
      "container.horizontalPodAutoscalers.create",
      "container.horizontalPodAutoscalers.delete",
      "container.horizontalPodAutoscalers.get",
      "container.horizontalPodAutoscalers.getStatus",
      "container.horizontalPodAutoscalers.list",
      "container.horizontalPodAutoscalers.update",
      "container.horizontalPodAutoscalers.updateStatus",
      "container.hostServiceAgent.use",
      "container.ingresses.create",
      "container.ingresses.delete",
      "container.ingresses.get",
      "container.ingresses.getStatus",
      "container.ingresses.list",
      "container.ingresses.update",
      "container.ingresses.updateStatus",
      "container.initializerConfigurations.create",
      "container.initializerConfigurations.delete",
      "container.initializerConfigurations.get",
      "container.initializerConfigurations.list",
      "container.initializerConfigurations.update",
      "container.jobs.create",
      "container.jobs.delete",
      "container.jobs.get",
      "container.jobs.getStatus",
      "container.jobs.list",
      "container.jobs.update",
      "container.jobs.updateStatus",
      "container.limitRanges.create",
      "container.limitRanges.delete",
      "container.limitRanges.get",
      "container.limitRanges.list",
      "container.limitRanges.update",
      "container.localSubjectAccessReviews.create",
      "container.localSubjectAccessReviews.list",
      "container.namespaces.create",
      "container.namespaces.delete",
      "container.namespaces.get",
      "container.namespaces.getStatus",
      "container.namespaces.list",
      "container.namespaces.update",
      "container.namespaces.updateStatus",
      "container.networkPolicies.create",
      "container.networkPolicies.delete",
      "container.networkPolicies.get",
      "container.networkPolicies.list",
      "container.networkPolicies.update",
      "container.nodes.create",
      "container.nodes.delete",
      "container.nodes.get",
      "container.nodes.getStatus",
      "container.nodes.list",
      "container.nodes.proxy",
      "container.nodes.update",
      "container.nodes.updateStatus",
      "container.operations.get",
      "container.operations.list",
      "container.persistentVolumeClaims.create",
      "container.persistentVolumeClaims.delete",
      "container.persistentVolumeClaims.get",
      "container.persistentVolumeClaims.getStatus",
      "container.persistentVolumeClaims.list",
      "container.persistentVolumeClaims.update",
      "container.persistentVolumeClaims.updateStatus",
      "container.persistentVolumes.create",
      "container.persistentVolumes.delete",
      "container.persistentVolumes.get",
      "container.persistentVolumes.getStatus",
      "container.persistentVolumes.list",
      "container.persistentVolumes.update",
      "container.persistentVolumes.updateStatus",
      "container.petSets.create",
      "container.petSets.delete",
      "container.petSets.get",
      "container.petSets.list",
      "container.petSets.update",
      "container.petSets.updateStatus",
      "container.podDisruptionBudgets.create",
      "container.podDisruptionBudgets.delete",
      "container.podDisruptionBudgets.get",
      "container.podDisruptionBudgets.getStatus",
      "container.podDisruptionBudgets.list",
      "container.podDisruptionBudgets.update",
      "container.podDisruptionBudgets.updateStatus",
      "container.podPresets.create",
      "container.podPresets.delete",
      "container.podPresets.get",
      "container.podPresets.list",
      "container.podPresets.update",
      "container.podSecurityPolicies.create",
      "container.podSecurityPolicies.delete",
      "container.podSecurityPolicies.get",
      "container.podSecurityPolicies.list",
      "container.podSecurityPolicies.update",
      "container.podSecurityPolicies.use",
      "container.podTemplates.create",
      "container.podTemplates.delete",
      "container.podTemplates.get",
      "container.podTemplates.list",
      "container.podTemplates.update",
      "container.pods.attach",
      "container.pods.create",
      "container.pods.delete",
      "container.pods.evict",
      "container.pods.exec",
      "container.pods.get",
      "container.pods.getLogs",
      "container.pods.getStatus",
      "container.pods.initialize",
      "container.pods.list",
      "container.pods.portForward",
      "container.pods.proxy",
      "container.pods.update",
      "container.pods.updateStatus",
      "container.replicaSets.create",
      "container.replicaSets.delete",
      "container.replicaSets.get",
      "container.replicaSets.getScale",
      "container.replicaSets.getStatus",
      "container.replicaSets.list",
      "container.replicaSets.update",
      "container.replicaSets.updateScale",
      "container.replicaSets.updateStatus",
      "container.replicationControllers.create",
      "container.replicationControllers.delete",
      "container.replicationControllers.get",
      "container.replicationControllers.getScale",
      "container.replicationControllers.getStatus",
      "container.replicationControllers.list",
      "container.replicationControllers.update",
      "container.replicationControllers.updateScale",
      "container.replicationControllers.updateStatus",
      "container.resourceQuotas.create",
      "container.resourceQuotas.delete",
      "container.resourceQuotas.get",
      "container.resourceQuotas.getStatus",
      "container.resourceQuotas.list",
      "container.resourceQuotas.update",
      "container.resourceQuotas.updateStatus",
      "container.roleBindings.create",
      "container.roleBindings.delete",
      "container.roleBindings.get",
      "container.roleBindings.list",
      "container.roleBindings.update",
      "container.roles.bind",
      "container.roles.create",
      "container.roles.delete",
      "container.roles.get",
      "container.roles.list",
      "container.roles.update",
      "container.runtimeClasses.create",
      "container.runtimeClasses.delete",
      "container.runtimeClasses.get",
      "container.runtimeClasses.list",
      "container.runtimeClasses.update",
      "container.scheduledJobs.create",
      "container.scheduledJobs.delete",
      "container.scheduledJobs.get",
      "container.scheduledJobs.list",
      "container.scheduledJobs.update",
      "container.scheduledJobs.updateStatus",
      "container.secrets.create",
      "container.secrets.delete",
      "container.secrets.get",
      "container.secrets.list",
      "container.secrets.update",
      "container.selfSubjectAccessReviews.create",
      "container.selfSubjectAccessReviews.list",
      "container.serviceAccounts.create",
      "container.serviceAccounts.delete",
      "container.serviceAccounts.get",
      "container.serviceAccounts.list",
      "container.serviceAccounts.update",
      "container.services.create",
      "container.services.delete",
      "container.services.get",
      "container.services.getStatus",
      "container.services.list",
      "container.services.proxy",
      "container.services.update",
      "container.services.updateStatus",
      "container.statefulSets.create",
      "container.statefulSets.delete",
      "container.statefulSets.get",
      "container.statefulSets.getScale",
      "container.statefulSets.getStatus",
      "container.statefulSets.list",
      "container.statefulSets.update",
      "container.statefulSets.updateScale",
      "container.statefulSets.updateStatus",
      "container.storageClasses.create",
      "container.storageClasses.delete",
      "container.storageClasses.get",
      "container.storageClasses.list",
      "container.storageClasses.update",
      "container.subjectAccessReviews.create",
      "container.subjectAccessReviews.list",
      "container.thirdPartyObjects.create",
      "container.thirdPartyObjects.delete",
      "container.thirdPartyObjects.get",
      "container.thirdPartyObjects.list",
      "container.thirdPartyObjects.update",
      "container.thirdPartyResources.create",
      "container.thirdPartyResources.delete",
      "container.thirdPartyResources.get",
      "container.thirdPartyResources.list",
      "container.thirdPartyResources.update",
      "container.tokenReviews.create",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/container.clusterAdmin": {
    "name": "roles/container.clusterAdmin",
    "title": "Kubernetes Engine Cluster Admin",
    "description": "Management of Kubernetes Clusters.",
    "includedPermissions": [
      "container.clusters.create",
      "container.clusters.delete",
      "container.clusters.get",
      "container.clusters.list",
      "container.clusters.update",
      "container.operations.get",
      "container.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/container.clusterViewer": {
    "name": "roles/container.clusterViewer",
    "title": "Kubernetes Engine Cluster Viewer",
    "description": "Read-only access to Kubernetes Clusters.",
    "includedPermissions": [
      "container.clusters.get",
      "container.clusters.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/container.developer": {
    "name": "roles/container.developer",
    "title": "Kubernetes Engine Developer",
    "description": "Full access to Kubernetes API objects inside Kubernetes Clusters.",
    "includedPermissions": [
      "container.apiServices.create",
      "container.apiServices.delete",
      "container.apiServices.get",
      "container.apiServices.list",
      "container.apiServices.update",
      "container.apiServices.updateStatus",
      "container.backendConfigs.create",
      "container.backendConfigs.delete",
      "container.backendConfigs.get",
      "container.backendConfigs.list",
      "container.backendConfigs.update",
      "container.bindings.create",
      "container.bindings.delete",
      "container.bindings.get",
      "container.bindings.list",
      "container.bindings.update",
      "container.certificateSigningRequests.create",
      "container.certificateSigningRequests.delete",
      "container.certificateSigningRequests.get",
      "container.certificateSigningRequests.list",
      "container.certificateSigningRequests.update",
      "container.certificateSigningRequests.updateStatus",
      "container.clusterRoleBindings.get",
      "container.clusterRoleBindings.list",
      "container.clusterRoles.get",
      "container.clusterRoles.list",
      "container.clusters.get",
      "container.clusters.list",
      "container.componentStatuses.get",
      "container.componentStatuses.list",
      "container.configMaps.create",
      "container.configMaps.delete",
      "container.configMaps.get",
      "container.configMaps.list",
      "container.configMaps.update",
      "container.controllerRevisions.get",
      "container.controllerRevisions.list",
      "container.cronJobs.create",
      "container.cronJobs.delete",
      "container.cronJobs.get",
      "container.cronJobs.getStatus",
      "container.cronJobs.list",
      "container.cronJobs.update",
      "container.cronJobs.updateStatus",
      "container.csiDrivers.create",
      "container.csiDrivers.delete",
      "container.csiDrivers.get",
      "container.csiDrivers.list",
      "container.csiDrivers.update",
      "container.csiNodes.create",
      "container.csiNodes.delete",
      "container.csiNodes.get",
      "container.csiNodes.list",
      "container.csiNodes.update",
      "container.customResourceDefinitions.create",
      "container.customResourceDefinitions.delete",
      "container.customResourceDefinitions.get",
      "container.customResourceDefinitions.list",
      "container.customResourceDefinitions.update",
      "container.customResourceDefinitions.updateStatus",
      "container.daemonSets.create",
      "container.daemonSets.delete",
      "container.daemonSets.get",
      "container.daemonSets.getStatus",
      "container.daemonSets.list",
      "container.daemonSets.update",
      "container.daemonSets.updateStatus",
      "container.deployments.create",
      "container.deployments.delete",
      "container.deployments.get",
      "container.deployments.getScale",
      "container.deployments.getStatus",
      "container.deployments.list",
      "container.deployments.rollback",
      "container.deployments.update",
      "container.deployments.updateScale",
      "container.deployments.updateStatus",
      "container.endpoints.create",
      "container.endpoints.delete",
      "container.endpoints.get",
      "container.endpoints.list",
      "container.endpoints.update",
      "container.events.create",
      "container.events.delete",
      "container.events.get",
      "container.events.list",
      "container.events.update",
      "container.horizontalPodAutoscalers.create",
      "container.horizontalPodAutoscalers.delete",
      "container.horizontalPodAutoscalers.get",
      "container.horizontalPodAutoscalers.getStatus",
      "container.horizontalPodAutoscalers.list",
      "container.horizontalPodAutoscalers.update",
      "container.horizontalPodAutoscalers.updateStatus",
      "container.ingresses.create",
      "container.ingresses.delete",
      "container.ingresses.get",
      "container.ingresses.getStatus",
      "container.ingresses.list",
      "container.ingresses.update",
      "container.ingresses.updateStatus",
      "container.initializerConfigurations.create",
      "container.initializerConfigurations.delete",
      "container.initializerConfigurations.get",
      "container.initializerConfigurations.list",
      "container.initializerConfigurations.update",
      "container.jobs.create",
      "container.jobs.delete",
      "container.jobs.get",
      "container.jobs.getStatus",
      "container.jobs.list",
      "container.jobs.update",
      "container.jobs.updateStatus",
      "container.limitRanges.create",
      "container.limitRanges.delete",
      "container.limitRanges.get",
      "container.limitRanges.list",
      "container.limitRanges.update",
      "container.localSubjectAccessReviews.create",
      "container.localSubjectAccessReviews.list",
      "container.namespaces.create",
      "container.namespaces.delete",
      "container.namespaces.get",
      "container.namespaces.getStatus",
      "container.namespaces.list",
      "container.namespaces.update",
      "container.namespaces.updateStatus",
      "container.networkPolicies.create",
      "container.networkPolicies.delete",
      "container.networkPolicies.get",
      "container.networkPolicies.list",
      "container.networkPolicies.update",
      "container.nodes.create",
      "container.nodes.delete",
      "container.nodes.get",
      "container.nodes.getStatus",
      "container.nodes.list",
      "container.nodes.proxy",
      "container.nodes.update",
      "container.nodes.updateStatus",
      "container.persistentVolumeClaims.create",
      "container.persistentVolumeClaims.delete",
      "container.persistentVolumeClaims.get",
      "container.persistentVolumeClaims.getStatus",
      "container.persistentVolumeClaims.list",
      "container.persistentVolumeClaims.update",
      "container.persistentVolumeClaims.updateStatus",
      "container.persistentVolumes.create",
      "container.persistentVolumes.delete",
      "container.persistentVolumes.get",
      "container.persistentVolumes.getStatus",
      "container.persistentVolumes.list",
      "container.persistentVolumes.update",
      "container.persistentVolumes.updateStatus",
      "container.petSets.create",
      "container.petSets.delete",
      "container.petSets.get",
      "container.petSets.list",
      "container.petSets.update",
      "container.petSets.updateStatus",
      "container.podDisruptionBudgets.create",
      "container.podDisruptionBudgets.delete",
      "container.podDisruptionBudgets.get",
      "container.podDisruptionBudgets.getStatus",
      "container.podDisruptionBudgets.list",
      "container.podDisruptionBudgets.update",
      "container.podDisruptionBudgets.updateStatus",
      "container.podPresets.create",
      "container.podPresets.delete",
      "container.podPresets.get",
      "container.podPresets.list",
      "container.podPresets.update",
      "container.podSecurityPolicies.get",
      "container.podSecurityPolicies.list",
      "container.podTemplates.create",
      "container.podTemplates.delete",
      "container.podTemplates.get",
      "container.podTemplates.list",
      "container.podTemplates.update",
      "container.pods.attach",
      "container.pods.create",
      "container.pods.delete",
      "container.pods.evict",
      "container.pods.exec",
      "container.pods.get",
      "container.pods.getLogs",
      "container.pods.getStatus",
      "container.pods.initialize",
      "container.pods.list",
      "container.pods.portForward",
      "container.pods.proxy",
      "container.pods.update",
      "container.pods.updateStatus",
      "container.replicaSets.create",
      "container.replicaSets.delete",
      "container.replicaSets.get",
      "container.replicaSets.getScale",
      "container.replicaSets.getStatus",
      "container.replicaSets.list",
      "container.replicaSets.update",
      "container.replicaSets.updateScale",
      "container.replicaSets.updateStatus",
      "container.replicationControllers.create",
      "container.replicationControllers.delete",
      "container.replicationControllers.get",
      "container.replicationControllers.getScale",
      "container.replicationControllers.getStatus",
      "container.replicationControllers.list",
      "container.replicationControllers.update",
      "container.replicationControllers.updateScale",
      "container.replicationControllers.updateStatus",
      "container.resourceQuotas.create",
      "container.resourceQuotas.delete",
      "container.resourceQuotas.get",
      "container.resourceQuotas.getStatus",
      "container.resourceQuotas.list",
      "container.resourceQuotas.update",
      "container.resourceQuotas.updateStatus",
      "container.roleBindings.get",
      "container.roleBindings.list",
      "container.roles.get",
      "container.roles.list",
      "container.runtimeClasses.create",
      "container.runtimeClasses.delete",
      "container.runtimeClasses.get",
      "container.runtimeClasses.list",
      "container.runtimeClasses.update",
      "container.scheduledJobs.create",
      "container.scheduledJobs.delete",
      "container.scheduledJobs.get",
      "container.scheduledJobs.list",
      "container.scheduledJobs.update",
      "container.scheduledJobs.updateStatus",
      "container.secrets.create",
      "container.secrets.delete",
      "container.secrets.get",
      "container.secrets.list",
      "container.secrets.update",
      "container.selfSubjectAccessReviews.create",
      "container.selfSubjectAccessReviews.list",
      "container.serviceAccounts.create",
      "container.serviceAccounts.delete",
      "container.serviceAccounts.get",
      "container.serviceAccounts.list",
      "container.serviceAccounts.update",
      "container.services.create",
      "container.services.delete",
      "container.services.get",
      "container.services.getStatus",
      "container.services.list",
      "container.services.proxy",
      "container.services.update",
      "container.services.updateStatus",
      "container.statefulSets.create",
      "container.statefulSets.delete",
      "container.statefulSets.get",
      "container.statefulSets.getScale",
      "container.statefulSets.getStatus",
      "container.statefulSets.list",
      "container.statefulSets.update",
      "container.statefulSets.updateScale",
      "container.statefulSets.updateStatus",
      "container.storageClasses.create",
      "container.storageClasses.delete",
      "container.storageClasses.get",
      "container.storageClasses.list",
      "container.storageClasses.update",
      "container.subjectAccessReviews.create",
      "container.subjectAccessReviews.list",
      "container.thirdPartyObjects.create",
      "container.thirdPartyObjects.delete",
      "container.thirdPartyObjects.get",
      "container.thirdPartyObjects.list",
      "container.thirdPartyObjects.update",
      "container.thirdPartyResources.create",
      "container.thirdPartyResources.delete",
      "container.thirdPartyResources.get",
      "container.thirdPartyResources.list",
      "container.thirdPartyResources.update",
      "container.tokenReviews.create",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/container.hostServiceAgentUser": {
    "name": "roles/container.hostServiceAgentUser",
    "title": "Kubernetes Engine Host Service Agent User",
    "description": "Gives permission to the Kubernetes Engine Service Account access to the Kugernetes Engine Service Account in the host project to configure shared network resources for cluster management. Also gives access to inspect the firewall rules in the host project.",
    "includedPermissions": [
      "compute.firewalls.get",
      "container.hostServiceAgent.use"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/container.viewer": {
    "name": "roles/container.viewer",
    "title": "Kubernetes Engine Viewer",
    "description": "Read-only access to Kubernetes Engine resources.",
    "includedPermissions": [
      "container.apiServices.get",
      "container.apiServices.list",
      "container.backendConfigs.get",
      "container.backendConfigs.list",
      "container.bindings.get",
      "container.bindings.list",
      "container.certificateSigningRequests.get",
      "container.certificateSigningRequests.list",
      "container.clusterRoleBindings.get",
      "container.clusterRoleBindings.list",
      "container.clusterRoles.get",
      "container.clusterRoles.list",
      "container.clusters.get",
      "container.clusters.list",
      "container.componentStatuses.get",
      "container.componentStatuses.list",
      "container.configMaps.get",
      "container.configMaps.list",
      "container.controllerRevisions.get",
      "container.controllerRevisions.list",
      "container.cronJobs.get",
      "container.cronJobs.getStatus",
      "container.cronJobs.list",
      "container.csiDrivers.get",
      "container.csiDrivers.list",
      "container.csiNodes.get",
      "container.csiNodes.list",
      "container.customResourceDefinitions.get",
      "container.customResourceDefinitions.list",
      "container.daemonSets.get",
      "container.daemonSets.getStatus",
      "container.daemonSets.list",
      "container.deployments.get",
      "container.deployments.getStatus",
      "container.deployments.list",
      "container.endpoints.get",
      "container.endpoints.list",
      "container.events.get",
      "container.events.list",
      "container.horizontalPodAutoscalers.get",
      "container.horizontalPodAutoscalers.getStatus",
      "container.horizontalPodAutoscalers.list",
      "container.ingresses.get",
      "container.ingresses.getStatus",
      "container.ingresses.list",
      "container.initializerConfigurations.get",
      "container.initializerConfigurations.list",
      "container.jobs.get",
      "container.jobs.getStatus",
      "container.jobs.list",
      "container.limitRanges.get",
      "container.limitRanges.list",
      "container.namespaces.get",
      "container.namespaces.getStatus",
      "container.namespaces.list",
      "container.networkPolicies.get",
      "container.networkPolicies.list",
      "container.nodes.get",
      "container.nodes.getStatus",
      "container.nodes.list",
      "container.operations.get",
      "container.operations.list",
      "container.persistentVolumeClaims.get",
      "container.persistentVolumeClaims.getStatus",
      "container.persistentVolumeClaims.list",
      "container.persistentVolumes.get",
      "container.persistentVolumes.getStatus",
      "container.persistentVolumes.list",
      "container.petSets.get",
      "container.petSets.list",
      "container.podDisruptionBudgets.get",
      "container.podDisruptionBudgets.getStatus",
      "container.podDisruptionBudgets.list",
      "container.podPresets.get",
      "container.podPresets.list",
      "container.podSecurityPolicies.get",
      "container.podSecurityPolicies.list",
      "container.podTemplates.get",
      "container.podTemplates.list",
      "container.pods.get",
      "container.pods.getStatus",
      "container.pods.list",
      "container.replicaSets.get",
      "container.replicaSets.getScale",
      "container.replicaSets.getStatus",
      "container.replicaSets.list",
      "container.replicationControllers.get",
      "container.replicationControllers.getScale",
      "container.replicationControllers.getStatus",
      "container.replicationControllers.list",
      "container.resourceQuotas.get",
      "container.resourceQuotas.getStatus",
      "container.resourceQuotas.list",
      "container.roleBindings.get",
      "container.roleBindings.list",
      "container.roles.get",
      "container.roles.list",
      "container.runtimeClasses.get",
      "container.runtimeClasses.list",
      "container.scheduledJobs.get",
      "container.scheduledJobs.list",
      "container.serviceAccounts.get",
      "container.serviceAccounts.list",
      "container.services.get",
      "container.services.getStatus",
      "container.services.list",
      "container.statefulSets.get",
      "container.statefulSets.getStatus",
      "container.statefulSets.list",
      "container.storageClasses.get",
      "container.storageClasses.list",
      "container.thirdPartyObjects.get",
      "container.thirdPartyObjects.list",
      "container.thirdPartyResources.get",
      "container.thirdPartyResources.list",
      "container.tokenReviews.create",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/containeranalysis.admin": {
    "name": "roles/containeranalysis.admin",
    "title": "Container Analysis Admin",
    "description": "Access to all resources.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "etag": "AA=="
  },
  "roles/containeranalysis.notes.attacher": {
    "name": "roles/containeranalysis.notes.attacher",
    "title": "Container Analysis Notes Attacher",
    "description": "Can attach occurrences to notes",
    "etag": "AA=="
  },
  "roles/containeranalysis.notes.editor": {
    "name": "roles/containeranalysis.notes.editor",
    "title": "Container Analysis Notes Editor",
    "description": "Can edit container analysis notes",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "etag": "AA=="
  },
  "roles/containeranalysis.notes.viewer": {
    "name": "roles/containeranalysis.notes.viewer",
    "title": "Container Analysis Notes Viewer",
    "description": "Can view container analysis notes",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "etag": "AA=="
  },
  "roles/containeranalysis.occurrences.editor": {
    "name": "roles/containeranalysis.occurrences.editor",
    "title": "Container Analysis Occurrences Editor",
    "description": "Can edit container analysis occurrences",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "etag": "AA=="
  },
  "roles/containeranalysis.occurrences.viewer": {
    "name": "roles/containeranalysis.occurrences.viewer",
    "title": "Container Analysis Occurrences Viewer",
    "description": "Can view container analysis occurrences",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "etag": "AA=="
  },
  "roles/datacatalog.admin": {
    "name": "roles/datacatalog.admin",
    "title": "Data Catalog Admin",
    "description": "Full access to all DataCatalog resources",
    "includedPermissions": [
      "bigquery.datasets.get",
      "bigquery.datasets.updateTag",
      "bigquery.models.getMetadata",
      "bigquery.models.updateTag",
      "bigquery.tables.get",
      "bigquery.tables.updateTag",
      "datacatalog.categories.getIamPolicy",
      "datacatalog.categories.setIamPolicy",
      "datacatalog.entries.create",
      "datacatalog.entries.delete",
      "datacatalog.entries.get",
      "datacatalog.entries.getIamPolicy",
      "datacatalog.entries.list",
      "datacatalog.entries.setIamPolicy",
      "datacatalog.entries.update",
      "datacatalog.entries.updateTag",
      "datacatalog.entryGroups.create",
      "datacatalog.entryGroups.delete",
      "datacatalog.entryGroups.get",
      "datacatalog.entryGroups.getIamPolicy",
      "datacatalog.entryGroups.setIamPolicy",
      "datacatalog.entryGroups.update",
      "datacatalog.tagTemplates.create",
      "datacatalog.tagTemplates.delete",
      "datacatalog.tagTemplates.get",
      "datacatalog.tagTemplates.getIamPolicy",
      "datacatalog.tagTemplates.getTag",
      "datacatalog.tagTemplates.setIamPolicy",
      "datacatalog.tagTemplates.update",
      "datacatalog.tagTemplates.use",
      "datacatalog.taxonomies.create",
      "datacatalog.taxonomies.delete",
      "datacatalog.taxonomies.get",
      "datacatalog.taxonomies.getIamPolicy",
      "datacatalog.taxonomies.list",
      "datacatalog.taxonomies.setIamPolicy",
      "datacatalog.taxonomies.update",
      "pubsub.topics.get",
      "pubsub.topics.updateTag",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datacatalog.categoryAdmin": {
    "name": "roles/datacatalog.categoryAdmin",
    "title": "Policy Tag Admin",
    "description": "Manage taxonomies",
    "includedPermissions": [
      "datacatalog.categories.getIamPolicy",
      "datacatalog.categories.setIamPolicy",
      "datacatalog.taxonomies.create",
      "datacatalog.taxonomies.delete",
      "datacatalog.taxonomies.get",
      "datacatalog.taxonomies.getIamPolicy",
      "datacatalog.taxonomies.list",
      "datacatalog.taxonomies.setIamPolicy",
      "datacatalog.taxonomies.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datacatalog.categoryFineGrainedReader": {
    "name": "roles/datacatalog.categoryFineGrainedReader",
    "title": "Fine-Grained Reader",
    "description": "Read access to sub-resources tagged by a policy tag, for example, BigQuery columns",
    "includedPermissions": [
      "datacatalog.categories.fineGrainedGet"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datacatalog.entryGroupCreator": {
    "name": "roles/datacatalog.entryGroupCreator",
    "title": "DataCatalog EntryGroup Creator",
    "description": "Can create new entryGroups",
    "includedPermissions": [
      "datacatalog.entryGroups.create",
      "datacatalog.entryGroups.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datacatalog.entryGroupOwner": {
    "name": "roles/datacatalog.entryGroupOwner",
    "title": "DataCatalog entryGroup Owner",
    "description": "Full access to entryGroups",
    "includedPermissions": [
      "datacatalog.entries.create",
      "datacatalog.entries.delete",
      "datacatalog.entries.get",
      "datacatalog.entries.getIamPolicy",
      "datacatalog.entries.list",
      "datacatalog.entries.setIamPolicy",
      "datacatalog.entries.update",
      "datacatalog.entries.updateTag",
      "datacatalog.entryGroups.create",
      "datacatalog.entryGroups.delete",
      "datacatalog.entryGroups.get",
      "datacatalog.entryGroups.getIamPolicy",
      "datacatalog.entryGroups.setIamPolicy",
      "datacatalog.entryGroups.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datacatalog.entryOwner": {
    "name": "roles/datacatalog.entryOwner",
    "title": "DataCatalog entry Owner",
    "description": "Full access to entries",
    "includedPermissions": [
      "datacatalog.entries.create",
      "datacatalog.entries.delete",
      "datacatalog.entries.get",
      "datacatalog.entries.getIamPolicy",
      "datacatalog.entries.list",
      "datacatalog.entries.setIamPolicy",
      "datacatalog.entries.update",
      "datacatalog.entries.updateTag",
      "datacatalog.entryGroups.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datacatalog.entryViewer": {
    "name": "roles/datacatalog.entryViewer",
    "title": "DataCatalog Entry Viewer",
    "description": "Read access to entries",
    "includedPermissions": [
      "datacatalog.entries.get",
      "datacatalog.entries.list",
      "datacatalog.entryGroups.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datacatalog.tagEditor": {
    "name": "roles/datacatalog.tagEditor",
    "title": "Data Catalog Tag Editor",
    "description": "Gives permission to modify tags on a GCP assets (BigQuery, Pub/Sub etc).",
    "includedPermissions": [
      "bigquery.datasets.updateTag",
      "bigquery.models.updateTag",
      "bigquery.tables.updateTag",
      "datacatalog.entries.updateTag",
      "pubsub.topics.updateTag"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datacatalog.tagTemplateCreator": {
    "name": "roles/datacatalog.tagTemplateCreator",
    "title": "Data Catalog TagTemplate Creator",
    "description": "Access to create new tag templates",
    "includedPermissions": [
      "datacatalog.tagTemplates.create",
      "datacatalog.tagTemplates.get"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datacatalog.tagTemplateOwner": {
    "name": "roles/datacatalog.tagTemplateOwner",
    "title": "Data Catalog TagTemplate Owner",
    "description": "Full acess to tag templates",
    "includedPermissions": [
      "datacatalog.tagTemplates.create",
      "datacatalog.tagTemplates.delete",
      "datacatalog.tagTemplates.get",
      "datacatalog.tagTemplates.getIamPolicy",
      "datacatalog.tagTemplates.getTag",
      "datacatalog.tagTemplates.setIamPolicy",
      "datacatalog.tagTemplates.update",
      "datacatalog.tagTemplates.use",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datacatalog.tagTemplateUser": {
    "name": "roles/datacatalog.tagTemplateUser",
    "title": "Data Catalog TagTemplate User",
    "description": "Access to use templates to tag resources",
    "includedPermissions": [
      "datacatalog.tagTemplates.get",
      "datacatalog.tagTemplates.getTag",
      "datacatalog.tagTemplates.use",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datacatalog.tagTemplateViewer": {
    "name": "roles/datacatalog.tagTemplateViewer",
    "title": "Data Catalog TagTemplate Viewer",
    "description": "Read access to templates and tags created using the templates",
    "includedPermissions": [
      "datacatalog.tagTemplates.get",
      "datacatalog.tagTemplates.getTag",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datacatalog.viewer": {
    "name": "roles/datacatalog.viewer",
    "title": "Data Catalog Viewer",
    "description": "Grants metadata read permissions to cataloged GCP assets (BigQuery, Pub/Sub etc)",
    "includedPermissions": [
      "bigquery.datasets.get",
      "bigquery.models.getMetadata",
      "bigquery.tables.get",
      "datacatalog.entries.get",
      "datacatalog.entries.list",
      "datacatalog.entryGroups.get",
      "datacatalog.tagTemplates.get",
      "datacatalog.tagTemplates.getTag",
      "datacatalog.taxonomies.get",
      "datacatalog.taxonomies.list",
      "pubsub.topics.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/dataflow.admin": {
    "name": "roles/dataflow.admin",
    "title": "Dataflow Admin",
    "description": "Minimal role for creating and managing dataflow jobs.",
    "includedPermissions": [
      "compute.machineTypes.get",
      "dataflow.jobs.cancel",
      "dataflow.jobs.create",
      "dataflow.jobs.get",
      "dataflow.jobs.list",
      "dataflow.jobs.updateContents",
      "dataflow.messages.list",
      "dataflow.metrics.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "storage.buckets.get",
      "storage.objects.create",
      "storage.objects.get",
      "storage.objects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dataflow.developer": {
    "name": "roles/dataflow.developer",
    "title": "Dataflow Developer",
    "description": "Full operational access to Dataflow jobs.",
    "includedPermissions": [
      "dataflow.jobs.cancel",
      "dataflow.jobs.create",
      "dataflow.jobs.get",
      "dataflow.jobs.list",
      "dataflow.jobs.updateContents",
      "dataflow.messages.list",
      "dataflow.metrics.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dataflow.viewer": {
    "name": "roles/dataflow.viewer",
    "title": "Dataflow Viewer",
    "description": "Read only access to Dataflow jobs.",
    "includedPermissions": [
      "dataflow.jobs.get",
      "dataflow.jobs.list",
      "dataflow.messages.list",
      "dataflow.metrics.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dataflow.worker": {
    "name": "roles/dataflow.worker",
    "title": "Dataflow Worker",
    "description": "Worker access to Dataflow.  Intended for service accounts.",
    "includedPermissions": [
      "compute.instanceGroupManagers.update",
      "compute.instances.delete",
      "compute.instances.setDiskAutoDelete",
      "dataflow.jobs.get",
      "logging.logEntries.create",
      "storage.objects.create",
      "storage.objects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/datafusion.admin": {
    "name": "roles/datafusion.admin",
    "title": "Cloud Data Fusion Admin",
    "description": "Full access to Cloud Data Fusion Instances and related resources.",
    "includedPermissions": [
      "datafusion.instances.create",
      "datafusion.instances.delete",
      "datafusion.instances.get",
      "datafusion.instances.getIamPolicy",
      "datafusion.instances.list",
      "datafusion.instances.restart",
      "datafusion.instances.setIamPolicy",
      "datafusion.instances.update",
      "datafusion.instances.upgrade",
      "datafusion.locations.get",
      "datafusion.locations.list",
      "datafusion.operations.cancel",
      "datafusion.operations.get",
      "datafusion.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datafusion.serviceAgent": {
    "name": "roles/datafusion.serviceAgent",
    "title": "Cloud Data Fusion API Service Agent",
    "description": "Gives Cloud Data Fusion service account access to Service Networking, Cloud Dataproc, Cloud Storage, BigQuery, Cloud Spanner, and Cloud Bigtable resources.",
    "includedPermissions": [
      "bigquery.datasets.create",
      "bigquery.datasets.delete",
      "bigquery.datasets.get",
      "bigquery.datasets.getIamPolicy",
      "bigquery.datasets.setIamPolicy",
      "bigquery.datasets.update",
      "bigquery.datasets.updateTag",
      "bigquery.jobs.create",
      "bigquery.models.create",
      "bigquery.models.delete",
      "bigquery.models.getData",
      "bigquery.models.getMetadata",
      "bigquery.models.list",
      "bigquery.models.updateData",
      "bigquery.models.updateMetadata",
      "bigquery.models.updateTag",
      "bigquery.routines.create",
      "bigquery.routines.delete",
      "bigquery.routines.get",
      "bigquery.routines.list",
      "bigquery.routines.update",
      "bigquery.tables.create",
      "bigquery.tables.delete",
      "bigquery.tables.export",
      "bigquery.tables.get",
      "bigquery.tables.getData",
      "bigquery.tables.list",
      "bigquery.tables.setCategory",
      "bigquery.tables.update",
      "bigquery.tables.updateData",
      "bigquery.tables.updateTag",
      "bigtable.appProfiles.create",
      "bigtable.appProfiles.delete",
      "bigtable.appProfiles.get",
      "bigtable.appProfiles.list",
      "bigtable.appProfiles.update",
      "bigtable.clusters.create",
      "bigtable.clusters.delete",
      "bigtable.clusters.get",
      "bigtable.clusters.list",
      "bigtable.clusters.update",
      "bigtable.instances.create",
      "bigtable.instances.delete",
      "bigtable.instances.get",
      "bigtable.instances.getIamPolicy",
      "bigtable.instances.list",
      "bigtable.instances.setIamPolicy",
      "bigtable.instances.update",
      "bigtable.locations.list",
      "bigtable.tables.checkConsistency",
      "bigtable.tables.create",
      "bigtable.tables.delete",
      "bigtable.tables.generateConsistencyToken",
      "bigtable.tables.get",
      "bigtable.tables.getIamPolicy",
      "bigtable.tables.list",
      "bigtable.tables.mutateRows",
      "bigtable.tables.readRows",
      "bigtable.tables.sampleRowKeys",
      "bigtable.tables.setIamPolicy",
      "bigtable.tables.update",
      "compute.addresses.get",
      "compute.addresses.list",
      "compute.autoscalers.get",
      "compute.autoscalers.list",
      "compute.backendBuckets.get",
      "compute.backendBuckets.list",
      "compute.backendServices.get",
      "compute.backendServices.list",
      "compute.firewalls.get",
      "compute.firewalls.list",
      "compute.forwardingRules.get",
      "compute.forwardingRules.list",
      "compute.globalAddresses.get",
      "compute.globalAddresses.list",
      "compute.globalForwardingRules.get",
      "compute.globalForwardingRules.list",
      "compute.globalOperations.get",
      "compute.healthChecks.get",
      "compute.healthChecks.list",
      "compute.httpHealthChecks.get",
      "compute.httpHealthChecks.list",
      "compute.httpsHealthChecks.get",
      "compute.httpsHealthChecks.list",
      "compute.instanceGroupManagers.get",
      "compute.instanceGroupManagers.list",
      "compute.instanceGroups.get",
      "compute.instanceGroups.list",
      "compute.instances.get",
      "compute.instances.getGuestAttributes",
      "compute.instances.getSerialPortOutput",
      "compute.instances.list",
      "compute.instances.listReferrers",
      "compute.interconnectAttachments.get",
      "compute.interconnectAttachments.list",
      "compute.interconnectLocations.get",
      "compute.interconnectLocations.list",
      "compute.interconnects.get",
      "compute.interconnects.list",
      "compute.machineTypes.get",
      "compute.machineTypes.list",
      "compute.networks.addPeering",
      "compute.networks.get",
      "compute.networks.list",
      "compute.networks.listPeeringRoutes",
      "compute.networks.removePeering",
      "compute.networks.update",
      "compute.projects.get",
      "compute.regionBackendServices.get",
      "compute.regionBackendServices.list",
      "compute.regions.get",
      "compute.regions.list",
      "compute.routers.get",
      "compute.routers.list",
      "compute.routes.get",
      "compute.routes.list",
      "compute.sslCertificates.get",
      "compute.sslCertificates.list",
      "compute.sslPolicies.get",
      "compute.sslPolicies.list",
      "compute.sslPolicies.listAvailableFeatures",
      "compute.subnetworks.get",
      "compute.subnetworks.list",
      "compute.targetHttpProxies.get",
      "compute.targetHttpProxies.list",
      "compute.targetHttpsProxies.get",
      "compute.targetHttpsProxies.list",
      "compute.targetInstances.get",
      "compute.targetInstances.list",
      "compute.targetPools.get",
      "compute.targetPools.list",
      "compute.targetSslProxies.get",
      "compute.targetSslProxies.list",
      "compute.targetTcpProxies.get",
      "compute.targetTcpProxies.list",
      "compute.targetVpnGateways.get",
      "compute.targetVpnGateways.list",
      "compute.urlMaps.get",
      "compute.urlMaps.list",
      "compute.vpnGateways.get",
      "compute.vpnGateways.list",
      "compute.vpnTunnels.get",
      "compute.vpnTunnels.list",
      "compute.zones.get",
      "compute.zones.list",
      "dataproc.autoscalingPolicies.create",
      "dataproc.autoscalingPolicies.delete",
      "dataproc.autoscalingPolicies.get",
      "dataproc.autoscalingPolicies.list",
      "dataproc.autoscalingPolicies.update",
      "dataproc.autoscalingPolicies.use",
      "dataproc.clusters.create",
      "dataproc.clusters.delete",
      "dataproc.clusters.get",
      "dataproc.clusters.list",
      "dataproc.clusters.update",
      "dataproc.clusters.use",
      "dataproc.jobs.cancel",
      "dataproc.jobs.create",
      "dataproc.jobs.delete",
      "dataproc.jobs.get",
      "dataproc.jobs.list",
      "dataproc.jobs.update",
      "dataproc.operations.delete",
      "dataproc.operations.get",
      "dataproc.operations.list",
      "dataproc.workflowTemplates.create",
      "dataproc.workflowTemplates.delete",
      "dataproc.workflowTemplates.get",
      "dataproc.workflowTemplates.instantiate",
      "dataproc.workflowTemplates.instantiateInline",
      "dataproc.workflowTemplates.list",
      "dataproc.workflowTemplates.update",
      "firebase.projects.get",
      "monitoring.metricDescriptors.get",
      "monitoring.metricDescriptors.list",
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "servicenetworking.services.get",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list",
      "spanner.databaseOperations.cancel",
      "spanner.databaseOperations.delete",
      "spanner.databaseOperations.get",
      "spanner.databaseOperations.list",
      "spanner.databases.beginOrRollbackReadWriteTransaction",
      "spanner.databases.beginReadOnlyTransaction",
      "spanner.databases.getDdl",
      "spanner.databases.list",
      "spanner.databases.read",
      "spanner.databases.select",
      "spanner.databases.updateDdl",
      "spanner.databases.write",
      "spanner.instanceConfigs.get",
      "spanner.instanceConfigs.list",
      "spanner.instances.get",
      "spanner.instances.list",
      "spanner.sessions.create",
      "spanner.sessions.delete",
      "spanner.sessions.get",
      "spanner.sessions.list",
      "storage.buckets.create",
      "storage.buckets.delete",
      "storage.buckets.get",
      "storage.buckets.getIamPolicy",
      "storage.buckets.list",
      "storage.buckets.setIamPolicy",
      "storage.buckets.update",
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.get",
      "storage.objects.getIamPolicy",
      "storage.objects.list",
      "storage.objects.setIamPolicy",
      "storage.objects.update"
    ],
    "etag": "AA=="
  },
  "roles/datafusion.viewer": {
    "name": "roles/datafusion.viewer",
    "title": "Cloud Data Fusion Viewer",
    "description": "Read-only access to Cloud Data Fusion Instances and related resources.",
    "includedPermissions": [
      "datafusion.instances.get",
      "datafusion.instances.getIamPolicy",
      "datafusion.instances.list",
      "datafusion.locations.get",
      "datafusion.locations.list",
      "datafusion.operations.get",
      "datafusion.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datalabeling.admin": {
    "name": "roles/datalabeling.admin",
    "title": "DataLabeling Service Admin",
    "description": "Full access to all DataLabeling resources",
    "includedPermissions": [
      "datalabeling.annotateddatasets.delete",
      "datalabeling.annotateddatasets.get",
      "datalabeling.annotateddatasets.label",
      "datalabeling.annotateddatasets.list",
      "datalabeling.annotationspecsets.create",
      "datalabeling.annotationspecsets.delete",
      "datalabeling.annotationspecsets.get",
      "datalabeling.annotationspecsets.list",
      "datalabeling.dataitems.get",
      "datalabeling.dataitems.list",
      "datalabeling.datasets.create",
      "datalabeling.datasets.delete",
      "datalabeling.datasets.export",
      "datalabeling.datasets.get",
      "datalabeling.datasets.import",
      "datalabeling.datasets.list",
      "datalabeling.examples.get",
      "datalabeling.examples.list",
      "datalabeling.instructions.create",
      "datalabeling.instructions.delete",
      "datalabeling.instructions.get",
      "datalabeling.instructions.list",
      "datalabeling.operations.cancel",
      "datalabeling.operations.get",
      "datalabeling.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datalabeling.editor": {
    "name": "roles/datalabeling.editor",
    "title": "DataLabeling Service Editor",
    "description": "Editor of all DataLabeling resources",
    "includedPermissions": [
      "datalabeling.annotateddatasets.delete",
      "datalabeling.annotateddatasets.get",
      "datalabeling.annotateddatasets.label",
      "datalabeling.annotateddatasets.list",
      "datalabeling.annotationspecsets.create",
      "datalabeling.annotationspecsets.delete",
      "datalabeling.annotationspecsets.get",
      "datalabeling.annotationspecsets.list",
      "datalabeling.dataitems.get",
      "datalabeling.dataitems.list",
      "datalabeling.datasets.create",
      "datalabeling.datasets.delete",
      "datalabeling.datasets.export",
      "datalabeling.datasets.get",
      "datalabeling.datasets.import",
      "datalabeling.datasets.list",
      "datalabeling.examples.get",
      "datalabeling.examples.list",
      "datalabeling.instructions.create",
      "datalabeling.instructions.delete",
      "datalabeling.instructions.get",
      "datalabeling.instructions.list",
      "datalabeling.operations.cancel",
      "datalabeling.operations.get",
      "datalabeling.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datalabeling.viewer": {
    "name": "roles/datalabeling.viewer",
    "title": "DataLabeling Service Viewer",
    "description": "Viewer of all DataLabeling resources",
    "includedPermissions": [
      "datalabeling.annotateddatasets.get",
      "datalabeling.annotateddatasets.list",
      "datalabeling.annotationspecsets.get",
      "datalabeling.annotationspecsets.list",
      "datalabeling.dataitems.get",
      "datalabeling.dataitems.list",
      "datalabeling.datasets.get",
      "datalabeling.datasets.list",
      "datalabeling.examples.get",
      "datalabeling.examples.list",
      "datalabeling.instructions.get",
      "datalabeling.instructions.list",
      "datalabeling.operations.get",
      "datalabeling.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/dataprep.projects.user": {
    "name": "roles/dataprep.projects.user",
    "title": "Dataprep User",
    "description": "Use of Dataprep.",
    "includedPermissions": [
      "dataprep.projects.use",
      "resourcemanager.projects.get",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/dataproc.admin": {
    "name": "roles/dataproc.admin",
    "title": "Dataproc Administrator",
    "description": "Full control of Dataproc resources.",
    "includedPermissions": [
      "compute.machineTypes.get",
      "compute.machineTypes.list",
      "compute.networks.get",
      "compute.networks.list",
      "compute.projects.get",
      "compute.regions.get",
      "compute.regions.list",
      "compute.zones.get",
      "compute.zones.list",
      "dataproc.autoscalingPolicies.create",
      "dataproc.autoscalingPolicies.delete",
      "dataproc.autoscalingPolicies.get",
      "dataproc.autoscalingPolicies.getIamPolicy",
      "dataproc.autoscalingPolicies.list",
      "dataproc.autoscalingPolicies.setIamPolicy",
      "dataproc.autoscalingPolicies.update",
      "dataproc.autoscalingPolicies.use",
      "dataproc.clusters.create",
      "dataproc.clusters.delete",
      "dataproc.clusters.get",
      "dataproc.clusters.getIamPolicy",
      "dataproc.clusters.list",
      "dataproc.clusters.setIamPolicy",
      "dataproc.clusters.update",
      "dataproc.clusters.use",
      "dataproc.jobs.cancel",
      "dataproc.jobs.create",
      "dataproc.jobs.delete",
      "dataproc.jobs.get",
      "dataproc.jobs.getIamPolicy",
      "dataproc.jobs.list",
      "dataproc.jobs.setIamPolicy",
      "dataproc.jobs.update",
      "dataproc.operations.cancel",
      "dataproc.operations.delete",
      "dataproc.operations.get",
      "dataproc.operations.getIamPolicy",
      "dataproc.operations.list",
      "dataproc.operations.setIamPolicy",
      "dataproc.workflowTemplates.create",
      "dataproc.workflowTemplates.delete",
      "dataproc.workflowTemplates.get",
      "dataproc.workflowTemplates.getIamPolicy",
      "dataproc.workflowTemplates.instantiate",
      "dataproc.workflowTemplates.instantiateInline",
      "dataproc.workflowTemplates.list",
      "dataproc.workflowTemplates.setIamPolicy",
      "dataproc.workflowTemplates.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dataproc.editor": {
    "name": "roles/dataproc.editor",
    "title": "Dataproc Editor",
    "description": "Full control of Dataproc resources. Allows viewing all networks.",
    "includedPermissions": [
      "compute.machineTypes.get",
      "compute.machineTypes.list",
      "compute.networks.get",
      "compute.networks.list",
      "compute.projects.get",
      "compute.regions.get",
      "compute.regions.list",
      "compute.zones.get",
      "compute.zones.list",
      "dataproc.autoscalingPolicies.create",
      "dataproc.autoscalingPolicies.delete",
      "dataproc.autoscalingPolicies.get",
      "dataproc.autoscalingPolicies.list",
      "dataproc.autoscalingPolicies.update",
      "dataproc.autoscalingPolicies.use",
      "dataproc.clusters.create",
      "dataproc.clusters.delete",
      "dataproc.clusters.get",
      "dataproc.clusters.list",
      "dataproc.clusters.update",
      "dataproc.clusters.use",
      "dataproc.jobs.cancel",
      "dataproc.jobs.create",
      "dataproc.jobs.delete",
      "dataproc.jobs.get",
      "dataproc.jobs.list",
      "dataproc.jobs.update",
      "dataproc.operations.delete",
      "dataproc.operations.get",
      "dataproc.operations.list",
      "dataproc.workflowTemplates.create",
      "dataproc.workflowTemplates.delete",
      "dataproc.workflowTemplates.get",
      "dataproc.workflowTemplates.instantiate",
      "dataproc.workflowTemplates.instantiateInline",
      "dataproc.workflowTemplates.list",
      "dataproc.workflowTemplates.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dataproc.serviceAgent": {
    "name": "roles/dataproc.serviceAgent",
    "title": "Dataproc Service Agent",
    "description": "Gives Cloud Dataproc service account access to Compute, and Storage resources and Service Accounts.",
    "includedPermissions": [
      "compute.acceleratorTypes.get",
      "compute.acceleratorTypes.list",
      "compute.addresses.get",
      "compute.addresses.list",
      "compute.addresses.use",
      "compute.autoscalers.create",
      "compute.autoscalers.delete",
      "compute.autoscalers.get",
      "compute.autoscalers.list",
      "compute.autoscalers.update",
      "compute.diskTypes.get",
      "compute.diskTypes.list",
      "compute.disks.create",
      "compute.disks.createSnapshot",
      "compute.disks.delete",
      "compute.disks.get",
      "compute.disks.list",
      "compute.disks.resize",
      "compute.disks.setLabels",
      "compute.disks.update",
      "compute.disks.use",
      "compute.disks.useReadOnly",
      "compute.firewalls.get",
      "compute.firewalls.list",
      "compute.globalAddresses.get",
      "compute.globalAddresses.list",
      "compute.globalAddresses.use",
      "compute.globalOperations.get",
      "compute.globalOperations.list",
      "compute.images.get",
      "compute.images.getFromFamily",
      "compute.images.list",
      "compute.images.useReadOnly",
      "compute.instanceGroupManagers.create",
      "compute.instanceGroupManagers.delete",
      "compute.instanceGroupManagers.get",
      "compute.instanceGroupManagers.list",
      "compute.instanceGroupManagers.update",
      "compute.instanceGroupManagers.use",
      "compute.instanceGroups.create",
      "compute.instanceGroups.delete",
      "compute.instanceGroups.get",
      "compute.instanceGroups.list",
      "compute.instanceGroups.update",
      "compute.instanceGroups.use",
      "compute.instanceTemplates.create",
      "compute.instanceTemplates.delete",
      "compute.instanceTemplates.get",
      "compute.instanceTemplates.getIamPolicy",
      "compute.instanceTemplates.list",
      "compute.instanceTemplates.setIamPolicy",
      "compute.instanceTemplates.useReadOnly",
      "compute.instances.addAccessConfig",
      "compute.instances.addMaintenancePolicies",
      "compute.instances.attachDisk",
      "compute.instances.create",
      "compute.instances.delete",
      "compute.instances.deleteAccessConfig",
      "compute.instances.detachDisk",
      "compute.instances.get",
      "compute.instances.getGuestAttributes",
      "compute.instances.getIamPolicy",
      "compute.instances.getSerialPortOutput",
      "compute.instances.getShieldedInstanceIdentity",
      "compute.instances.getShieldedVmIdentity",
      "compute.instances.list",
      "compute.instances.listReferrers",
      "compute.instances.osAdminLogin",
      "compute.instances.osLogin",
      "compute.instances.removeMaintenancePolicies",
      "compute.instances.reset",
      "compute.instances.resume",
      "compute.instances.setDeletionProtection",
      "compute.instances.setDiskAutoDelete",
      "compute.instances.setIamPolicy",
      "compute.instances.setLabels",
      "compute.instances.setMachineResources",
      "compute.instances.setMachineType",
      "compute.instances.setMetadata",
      "compute.instances.setMinCpuPlatform",
      "compute.instances.setScheduling",
      "compute.instances.setServiceAccount",
      "compute.instances.setShieldedInstanceIntegrityPolicy",
      "compute.instances.setShieldedVmIntegrityPolicy",
      "compute.instances.setTags",
      "compute.instances.start",
      "compute.instances.startWithEncryptionKey",
      "compute.instances.stop",
      "compute.instances.suspend",
      "compute.instances.updateAccessConfig",
      "compute.instances.updateDisplayDevice",
      "compute.instances.updateNetworkInterface",
      "compute.instances.updateShieldedInstanceConfig",
      "compute.instances.updateShieldedVmConfig",
      "compute.instances.use",
      "compute.licenses.get",
      "compute.licenses.list",
      "compute.machineTypes.get",
      "compute.machineTypes.list",
      "compute.networkEndpointGroups.attachNetworkEndpoints",
      "compute.networkEndpointGroups.create",
      "compute.networkEndpointGroups.delete",
      "compute.networkEndpointGroups.detachNetworkEndpoints",
      "compute.networkEndpointGroups.get",
      "compute.networkEndpointGroups.getIamPolicy",
      "compute.networkEndpointGroups.list",
      "compute.networkEndpointGroups.setIamPolicy",
      "compute.networkEndpointGroups.use",
      "compute.networks.get",
      "compute.networks.list",
      "compute.networks.use",
      "compute.networks.useExternalIp",
      "compute.projects.get",
      "compute.regionOperations.get",
      "compute.regionOperations.list",
      "compute.regions.get",
      "compute.regions.list",
      "compute.reservations.get",
      "compute.reservations.list",
      "compute.subnetworks.get",
      "compute.subnetworks.list",
      "compute.subnetworks.use",
      "compute.subnetworks.useExternalIp",
      "compute.targetPools.get",
      "compute.targetPools.list",
      "compute.zoneOperations.get",
      "compute.zoneOperations.list",
      "compute.zones.get",
      "compute.zones.list",
      "dataproc.autoscalingPolicies.get",
      "dataproc.autoscalingPolicies.list",
      "dataproc.autoscalingPolicies.use",
      "dataproc.clusters.create",
      "dataproc.clusters.delete",
      "dataproc.clusters.get",
      "dataproc.clusters.getIamPolicy",
      "dataproc.clusters.list",
      "dataproc.clusters.setIamPolicy",
      "dataproc.clusters.update",
      "dataproc.clusters.use",
      "dataproc.jobs.cancel",
      "dataproc.jobs.create",
      "dataproc.jobs.delete",
      "dataproc.jobs.get",
      "dataproc.jobs.getIamPolicy",
      "dataproc.jobs.list",
      "dataproc.jobs.setIamPolicy",
      "dataproc.jobs.update",
      "firebase.projects.get",
      "iam.serviceAccounts.actAs",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list",
      "storage.buckets.create",
      "storage.buckets.delete",
      "storage.buckets.get",
      "storage.buckets.getIamPolicy",
      "storage.buckets.list",
      "storage.buckets.setIamPolicy",
      "storage.buckets.update",
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.get",
      "storage.objects.getIamPolicy",
      "storage.objects.list",
      "storage.objects.setIamPolicy",
      "storage.objects.update"
    ],
    "etag": "AA=="
  },
  "roles/dataproc.viewer": {
    "name": "roles/dataproc.viewer",
    "title": "Dataproc Viewer",
    "description": "Read-only access to Dataproc resources.",
    "includedPermissions": [
      "compute.machineTypes.get",
      "compute.regions.get",
      "compute.regions.list",
      "compute.zones.get",
      "dataproc.autoscalingPolicies.get",
      "dataproc.autoscalingPolicies.list",
      "dataproc.clusters.get",
      "dataproc.clusters.list",
      "dataproc.jobs.get",
      "dataproc.jobs.list",
      "dataproc.operations.get",
      "dataproc.operations.list",
      "dataproc.workflowTemplates.get",
      "dataproc.workflowTemplates.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dataproc.worker": {
    "name": "roles/dataproc.worker",
    "title": "Dataproc Worker",
    "description": "Worker access to Dataproc. Intended for service accounts.",
    "includedPermissions": [
      "dataproc.agents.create",
      "dataproc.agents.delete",
      "dataproc.agents.get",
      "dataproc.agents.list",
      "dataproc.agents.update",
      "dataproc.tasks.lease",
      "dataproc.tasks.listInvalidatedLeases",
      "dataproc.tasks.reportStatus",
      "logging.logEntries.create",
      "monitoring.metricDescriptors.create",
      "monitoring.metricDescriptors.get",
      "monitoring.metricDescriptors.list",
      "monitoring.monitoredResourceDescriptors.get",
      "monitoring.monitoredResourceDescriptors.list",
      "monitoring.timeSeries.create",
      "storage.buckets.get",
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.get",
      "storage.objects.getIamPolicy",
      "storage.objects.list",
      "storage.objects.setIamPolicy",
      "storage.objects.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dataprocessing.admin": {
    "name": "roles/dataprocessing.admin",
    "title": "Data Processing Controls Resource Admin",
    "description": "Data processing controls admin who can fully manage data processing controls settings and view all datasource data.",
    "includedPermissions": [
      "dataprocessing.featurecontrols.get",
      "dataprocessing.featurecontrols.list",
      "dataprocessing.featurecontrols.update",
      "dataprocessing.iamaccesshistory.exportData"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/dataprocessing.iamAccessHistoryExporter": {
    "name": "roles/dataprocessing.iamAccessHistoryExporter",
    "title": "Data Processing IAM Access History Exporter",
    "description": "Data Processing exporter who can export IAM access history using bigquery.",
    "includedPermissions": [
      "dataprocessing.iamaccesshistory.exportData"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/datastore.importExportAdmin": {
    "name": "roles/datastore.importExportAdmin",
    "title": "Cloud Datastore Import Export Admin",
    "description": "Full access to manage imports and exports.",
    "includedPermissions": [
      "appengine.applications.get",
      "datastore.databases.export",
      "datastore.databases.import",
      "datastore.operations.cancel",
      "datastore.operations.get",
      "datastore.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/datastore.indexAdmin": {
    "name": "roles/datastore.indexAdmin",
    "title": "Cloud Datastore Index Admin",
    "description": "Full access to manage index definitions.",
    "includedPermissions": [
      "appengine.applications.get",
      "datastore.indexes.create",
      "datastore.indexes.delete",
      "datastore.indexes.get",
      "datastore.indexes.list",
      "datastore.indexes.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/datastore.owner": {
    "name": "roles/datastore.owner",
    "title": "Cloud Datastore Owner",
    "description": "Full access to Cloud Datastore.",
    "includedPermissions": [
      "appengine.applications.get",
      "datastore.databases.create",
      "datastore.databases.delete",
      "datastore.databases.export",
      "datastore.databases.get",
      "datastore.databases.getIamPolicy",
      "datastore.databases.import",
      "datastore.databases.list",
      "datastore.databases.setIamPolicy",
      "datastore.databases.update",
      "datastore.entities.allocateIds",
      "datastore.entities.create",
      "datastore.entities.delete",
      "datastore.entities.get",
      "datastore.entities.list",
      "datastore.entities.update",
      "datastore.indexes.create",
      "datastore.indexes.delete",
      "datastore.indexes.get",
      "datastore.indexes.list",
      "datastore.indexes.update",
      "datastore.locations.get",
      "datastore.locations.list",
      "datastore.namespaces.get",
      "datastore.namespaces.getIamPolicy",
      "datastore.namespaces.list",
      "datastore.namespaces.setIamPolicy",
      "datastore.operations.cancel",
      "datastore.operations.delete",
      "datastore.operations.get",
      "datastore.operations.list",
      "datastore.statistics.get",
      "datastore.statistics.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/datastore.user": {
    "name": "roles/datastore.user",
    "title": "Cloud Datastore User",
    "description": "Provides read/write access to data in a Cloud Datastore database. Intended for application developers and service accounts.",
    "includedPermissions": [
      "appengine.applications.get",
      "datastore.databases.get",
      "datastore.entities.allocateIds",
      "datastore.entities.create",
      "datastore.entities.delete",
      "datastore.entities.get",
      "datastore.entities.list",
      "datastore.entities.update",
      "datastore.indexes.list",
      "datastore.namespaces.get",
      "datastore.namespaces.list",
      "datastore.statistics.get",
      "datastore.statistics.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/datastore.viewer": {
    "name": "roles/datastore.viewer",
    "title": "Cloud Datastore Viewer",
    "description": "Read access to all Cloud Datastore resources.",
    "includedPermissions": [
      "appengine.applications.get",
      "datastore.databases.get",
      "datastore.databases.list",
      "datastore.entities.get",
      "datastore.entities.list",
      "datastore.indexes.get",
      "datastore.indexes.list",
      "datastore.namespaces.get",
      "datastore.namespaces.list",
      "datastore.statistics.get",
      "datastore.statistics.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/deploymentmanager.editor": {
    "name": "roles/deploymentmanager.editor",
    "title": "Deployment Manager Editor",
    "description": "Read and Write access to all Deployment Manager resources.",
    "includedPermissions": [
      "deploymentmanager.compositeTypes.create",
      "deploymentmanager.compositeTypes.delete",
      "deploymentmanager.compositeTypes.get",
      "deploymentmanager.compositeTypes.list",
      "deploymentmanager.compositeTypes.update",
      "deploymentmanager.deployments.cancelPreview",
      "deploymentmanager.deployments.create",
      "deploymentmanager.deployments.delete",
      "deploymentmanager.deployments.get",
      "deploymentmanager.deployments.list",
      "deploymentmanager.deployments.stop",
      "deploymentmanager.deployments.update",
      "deploymentmanager.manifests.get",
      "deploymentmanager.manifests.list",
      "deploymentmanager.operations.get",
      "deploymentmanager.operations.list",
      "deploymentmanager.resources.get",
      "deploymentmanager.resources.list",
      "deploymentmanager.typeProviders.create",
      "deploymentmanager.typeProviders.delete",
      "deploymentmanager.typeProviders.get",
      "deploymentmanager.typeProviders.getType",
      "deploymentmanager.typeProviders.list",
      "deploymentmanager.typeProviders.listTypes",
      "deploymentmanager.typeProviders.update",
      "deploymentmanager.types.create",
      "deploymentmanager.types.delete",
      "deploymentmanager.types.get",
      "deploymentmanager.types.list",
      "deploymentmanager.types.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/deploymentmanager.typeEditor": {
    "name": "roles/deploymentmanager.typeEditor",
    "title": "Deployment Manager Type Editor",
    "description": "Read and Write access to all Type Registry resources.",
    "includedPermissions": [
      "deploymentmanager.compositeTypes.create",
      "deploymentmanager.compositeTypes.delete",
      "deploymentmanager.compositeTypes.get",
      "deploymentmanager.compositeTypes.list",
      "deploymentmanager.compositeTypes.update",
      "deploymentmanager.operations.get",
      "deploymentmanager.typeProviders.create",
      "deploymentmanager.typeProviders.delete",
      "deploymentmanager.typeProviders.get",
      "deploymentmanager.typeProviders.getType",
      "deploymentmanager.typeProviders.list",
      "deploymentmanager.typeProviders.listTypes",
      "deploymentmanager.typeProviders.update",
      "deploymentmanager.types.create",
      "deploymentmanager.types.delete",
      "deploymentmanager.types.get",
      "deploymentmanager.types.list",
      "deploymentmanager.types.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/deploymentmanager.typeViewer": {
    "name": "roles/deploymentmanager.typeViewer",
    "title": "Deployment Manager Type Viewer",
    "description": "Read-only access to all Type Registry resources.",
    "includedPermissions": [
      "deploymentmanager.compositeTypes.get",
      "deploymentmanager.compositeTypes.list",
      "deploymentmanager.typeProviders.get",
      "deploymentmanager.typeProviders.getType",
      "deploymentmanager.typeProviders.list",
      "deploymentmanager.typeProviders.listTypes",
      "deploymentmanager.types.get",
      "deploymentmanager.types.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/deploymentmanager.viewer": {
    "name": "roles/deploymentmanager.viewer",
    "title": "Deployment Manager Viewer",
    "description": "Read-only access to all Deployment Manager resources.",
    "includedPermissions": [
      "deploymentmanager.compositeTypes.get",
      "deploymentmanager.compositeTypes.list",
      "deploymentmanager.deployments.get",
      "deploymentmanager.deployments.list",
      "deploymentmanager.manifests.get",
      "deploymentmanager.manifests.list",
      "deploymentmanager.operations.get",
      "deploymentmanager.operations.list",
      "deploymentmanager.resources.get",
      "deploymentmanager.resources.list",
      "deploymentmanager.typeProviders.get",
      "deploymentmanager.typeProviders.getType",
      "deploymentmanager.typeProviders.list",
      "deploymentmanager.typeProviders.listTypes",
      "deploymentmanager.types.get",
      "deploymentmanager.types.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dialogflow.admin": {
    "name": "roles/dialogflow.admin",
    "title": "Dialogflow API Admin",
    "description": "Can query for intent; read & write session properties; read & write agent properties.",
    "includedPermissions": [
      "dialogflow.agents.create",
      "dialogflow.agents.delete",
      "dialogflow.agents.export",
      "dialogflow.agents.get",
      "dialogflow.agents.import",
      "dialogflow.agents.restore",
      "dialogflow.agents.search",
      "dialogflow.agents.train",
      "dialogflow.agents.update",
      "dialogflow.contexts.create",
      "dialogflow.contexts.delete",
      "dialogflow.contexts.get",
      "dialogflow.contexts.list",
      "dialogflow.contexts.update",
      "dialogflow.documents.create",
      "dialogflow.documents.delete",
      "dialogflow.documents.get",
      "dialogflow.documents.list",
      "dialogflow.entityTypes.create",
      "dialogflow.entityTypes.createEntity",
      "dialogflow.entityTypes.delete",
      "dialogflow.entityTypes.deleteEntity",
      "dialogflow.entityTypes.get",
      "dialogflow.entityTypes.list",
      "dialogflow.entityTypes.update",
      "dialogflow.entityTypes.updateEntity",
      "dialogflow.intents.create",
      "dialogflow.intents.delete",
      "dialogflow.intents.get",
      "dialogflow.intents.list",
      "dialogflow.intents.update",
      "dialogflow.knowledgeBases.create",
      "dialogflow.knowledgeBases.delete",
      "dialogflow.knowledgeBases.get",
      "dialogflow.knowledgeBases.list",
      "dialogflow.operations.get",
      "dialogflow.sessionEntityTypes.create",
      "dialogflow.sessionEntityTypes.delete",
      "dialogflow.sessionEntityTypes.get",
      "dialogflow.sessionEntityTypes.list",
      "dialogflow.sessionEntityTypes.update",
      "dialogflow.sessions.detectIntent",
      "dialogflow.sessions.streamingDetectIntent",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dialogflow.client": {
    "name": "roles/dialogflow.client",
    "title": "Dialogflow API Client",
    "description": "Can call all methods on sessions and conversations resources as well as their descendants.",
    "includedPermissions": [
      "dialogflow.contexts.create",
      "dialogflow.contexts.delete",
      "dialogflow.contexts.get",
      "dialogflow.contexts.list",
      "dialogflow.contexts.update",
      "dialogflow.sessionEntityTypes.create",
      "dialogflow.sessionEntityTypes.delete",
      "dialogflow.sessionEntityTypes.get",
      "dialogflow.sessionEntityTypes.list",
      "dialogflow.sessionEntityTypes.update",
      "dialogflow.sessions.detectIntent",
      "dialogflow.sessions.streamingDetectIntent"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dialogflow.consoleAgentEditor": {
    "name": "roles/dialogflow.consoleAgentEditor",
    "title": "Dialogflow Console Agent Editor",
    "description": "Can edit agent in Dialogflow Console",
    "includedPermissions": [
      "actions.agentVersions.create",
      "dialogflow.agents.create",
      "dialogflow.agents.delete",
      "dialogflow.agents.export",
      "dialogflow.agents.get",
      "dialogflow.agents.import",
      "dialogflow.agents.restore",
      "dialogflow.agents.search",
      "dialogflow.agents.train",
      "dialogflow.agents.update",
      "dialogflow.contexts.create",
      "dialogflow.contexts.delete",
      "dialogflow.contexts.get",
      "dialogflow.contexts.list",
      "dialogflow.contexts.update",
      "dialogflow.documents.create",
      "dialogflow.documents.delete",
      "dialogflow.documents.get",
      "dialogflow.documents.list",
      "dialogflow.entityTypes.create",
      "dialogflow.entityTypes.createEntity",
      "dialogflow.entityTypes.delete",
      "dialogflow.entityTypes.deleteEntity",
      "dialogflow.entityTypes.get",
      "dialogflow.entityTypes.list",
      "dialogflow.entityTypes.update",
      "dialogflow.entityTypes.updateEntity",
      "dialogflow.intents.create",
      "dialogflow.intents.delete",
      "dialogflow.intents.get",
      "dialogflow.intents.list",
      "dialogflow.intents.update",
      "dialogflow.knowledgeBases.create",
      "dialogflow.knowledgeBases.delete",
      "dialogflow.knowledgeBases.get",
      "dialogflow.knowledgeBases.list",
      "dialogflow.operations.get",
      "dialogflow.sessionEntityTypes.create",
      "dialogflow.sessionEntityTypes.delete",
      "dialogflow.sessionEntityTypes.get",
      "dialogflow.sessionEntityTypes.list",
      "dialogflow.sessionEntityTypes.update",
      "dialogflow.sessions.detectIntent",
      "dialogflow.sessions.streamingDetectIntent",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dialogflow.reader": {
    "name": "roles/dialogflow.reader",
    "title": "Dialogflow API Reader",
    "description": "Can read agent and session properties; cannot query for intent.",
    "includedPermissions": [
      "dialogflow.agents.export",
      "dialogflow.agents.get",
      "dialogflow.agents.search",
      "dialogflow.contexts.get",
      "dialogflow.contexts.list",
      "dialogflow.documents.get",
      "dialogflow.documents.list",
      "dialogflow.entityTypes.get",
      "dialogflow.entityTypes.list",
      "dialogflow.intents.get",
      "dialogflow.intents.list",
      "dialogflow.knowledgeBases.get",
      "dialogflow.knowledgeBases.list",
      "dialogflow.operations.get",
      "dialogflow.sessionEntityTypes.get",
      "dialogflow.sessionEntityTypes.list",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dlp.admin": {
    "name": "roles/dlp.admin",
    "title": "DLP Administrator",
    "description": "Administer DLP including jobs and templates.",
    "includedPermissions": [
      "dlp.analyzeRiskTemplates.create",
      "dlp.analyzeRiskTemplates.delete",
      "dlp.analyzeRiskTemplates.get",
      "dlp.analyzeRiskTemplates.list",
      "dlp.analyzeRiskTemplates.update",
      "dlp.deidentifyTemplates.create",
      "dlp.deidentifyTemplates.delete",
      "dlp.deidentifyTemplates.get",
      "dlp.deidentifyTemplates.list",
      "dlp.deidentifyTemplates.update",
      "dlp.inspectTemplates.create",
      "dlp.inspectTemplates.delete",
      "dlp.inspectTemplates.get",
      "dlp.inspectTemplates.list",
      "dlp.inspectTemplates.update",
      "dlp.jobTriggers.create",
      "dlp.jobTriggers.delete",
      "dlp.jobTriggers.get",
      "dlp.jobTriggers.list",
      "dlp.jobTriggers.update",
      "dlp.jobs.cancel",
      "dlp.jobs.create",
      "dlp.jobs.delete",
      "dlp.jobs.get",
      "dlp.jobs.list",
      "dlp.kms.encrypt",
      "dlp.storedInfoTypes.create",
      "dlp.storedInfoTypes.delete",
      "dlp.storedInfoTypes.get",
      "dlp.storedInfoTypes.list",
      "dlp.storedInfoTypes.update",
      "serviceusage.services.use"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dlp.analyzeRiskTemplatesEditor": {
    "name": "roles/dlp.analyzeRiskTemplatesEditor",
    "title": "DLP Analyze Risk Templates Editor",
    "description": "Edit DLP analyze risk templates.",
    "includedPermissions": [
      "dlp.analyzeRiskTemplates.create",
      "dlp.analyzeRiskTemplates.delete",
      "dlp.analyzeRiskTemplates.get",
      "dlp.analyzeRiskTemplates.list",
      "dlp.analyzeRiskTemplates.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dlp.analyzeRiskTemplatesReader": {
    "name": "roles/dlp.analyzeRiskTemplatesReader",
    "title": "DLP Analyze Risk Templates Reader",
    "description": "Read DLP analyze risk templates.",
    "includedPermissions": [
      "dlp.analyzeRiskTemplates.get",
      "dlp.analyzeRiskTemplates.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dlp.deidentifyTemplatesEditor": {
    "name": "roles/dlp.deidentifyTemplatesEditor",
    "title": "DLP De-identify Templates Editor",
    "description": "Edit DLP de-identify templates.",
    "includedPermissions": [
      "dlp.deidentifyTemplates.create",
      "dlp.deidentifyTemplates.delete",
      "dlp.deidentifyTemplates.get",
      "dlp.deidentifyTemplates.list",
      "dlp.deidentifyTemplates.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dlp.deidentifyTemplatesReader": {
    "name": "roles/dlp.deidentifyTemplatesReader",
    "title": "DLP De-identify Templates Reader",
    "description": "Read DLP de-identify templates.",
    "includedPermissions": [
      "dlp.deidentifyTemplates.get",
      "dlp.deidentifyTemplates.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dlp.inspectTemplatesEditor": {
    "name": "roles/dlp.inspectTemplatesEditor",
    "title": "DLP Inspect Templates Editor",
    "description": "Edit DLP inspect templates.",
    "includedPermissions": [
      "dlp.inspectTemplates.create",
      "dlp.inspectTemplates.delete",
      "dlp.inspectTemplates.get",
      "dlp.inspectTemplates.list",
      "dlp.inspectTemplates.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dlp.inspectTemplatesReader": {
    "name": "roles/dlp.inspectTemplatesReader",
    "title": "DLP Inspect Templates Reader",
    "description": "Read DLP inspect templates.",
    "includedPermissions": [
      "dlp.inspectTemplates.get",
      "dlp.inspectTemplates.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dlp.jobTriggersEditor": {
    "name": "roles/dlp.jobTriggersEditor",
    "title": "DLP Job Triggers Editor",
    "description": "Edit job triggers configurations.",
    "includedPermissions": [
      "dlp.jobTriggers.create",
      "dlp.jobTriggers.delete",
      "dlp.jobTriggers.get",
      "dlp.jobTriggers.list",
      "dlp.jobTriggers.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dlp.jobTriggersReader": {
    "name": "roles/dlp.jobTriggersReader",
    "title": "DLP Job Triggers Reader",
    "description": "Read job triggers.",
    "includedPermissions": [
      "dlp.jobTriggers.get",
      "dlp.jobTriggers.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dlp.jobsEditor": {
    "name": "roles/dlp.jobsEditor",
    "title": "DLP Jobs Editor",
    "description": "Edit and create jobs",
    "includedPermissions": [
      "dlp.jobs.cancel",
      "dlp.jobs.create",
      "dlp.jobs.delete",
      "dlp.jobs.get",
      "dlp.jobs.list",
      "dlp.kms.encrypt"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dlp.jobsReader": {
    "name": "roles/dlp.jobsReader",
    "title": "DLP Jobs Reader",
    "description": "Read jobs",
    "includedPermissions": [
      "dlp.jobs.get",
      "dlp.jobs.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dlp.reader": {
    "name": "roles/dlp.reader",
    "title": "DLP Reader",
    "description": "Read DLP entities, such as jobs and templates.",
    "includedPermissions": [
      "dlp.analyzeRiskTemplates.get",
      "dlp.analyzeRiskTemplates.list",
      "dlp.deidentifyTemplates.get",
      "dlp.deidentifyTemplates.list",
      "dlp.inspectTemplates.get",
      "dlp.inspectTemplates.list",
      "dlp.jobTriggers.get",
      "dlp.jobTriggers.list",
      "dlp.jobs.get",
      "dlp.jobs.list",
      "dlp.storedInfoTypes.get",
      "dlp.storedInfoTypes.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dlp.storedInfoTypesEditor": {
    "name": "roles/dlp.storedInfoTypesEditor",
    "title": "DLP Stored InfoTypes Editor",
    "description": "Edit DLP stored info types.",
    "includedPermissions": [
      "dlp.storedInfoTypes.create",
      "dlp.storedInfoTypes.delete",
      "dlp.storedInfoTypes.get",
      "dlp.storedInfoTypes.list",
      "dlp.storedInfoTypes.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dlp.storedInfoTypesReader": {
    "name": "roles/dlp.storedInfoTypesReader",
    "title": "DLP Stored InfoTypes Reader",
    "description": "Read DLP stored info types.",
    "includedPermissions": [
      "dlp.storedInfoTypes.get",
      "dlp.storedInfoTypes.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dlp.user": {
    "name": "roles/dlp.user",
    "title": "DLP User",
    "description": "Inspect, Redact, and De-identify Content",
    "includedPermissions": [
      "dlp.kms.encrypt",
      "serviceusage.services.use"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dns.admin": {
    "name": "roles/dns.admin",
    "title": "DNS Administrator",
    "description": "Full read-write access to DNS resources.",
    "includedPermissions": [
      "compute.networks.get",
      "compute.networks.list",
      "dns.changes.create",
      "dns.changes.get",
      "dns.changes.list",
      "dns.dnsKeys.get",
      "dns.dnsKeys.list",
      "dns.managedZoneOperations.get",
      "dns.managedZoneOperations.list",
      "dns.managedZones.create",
      "dns.managedZones.delete",
      "dns.managedZones.get",
      "dns.managedZones.list",
      "dns.managedZones.update",
      "dns.networks.bindPrivateDNSPolicy",
      "dns.networks.bindPrivateDNSZone",
      "dns.networks.targetWithPeeringZone",
      "dns.policies.create",
      "dns.policies.delete",
      "dns.policies.get",
      "dns.policies.list",
      "dns.policies.update",
      "dns.projects.get",
      "dns.resourceRecordSets.create",
      "dns.resourceRecordSets.delete",
      "dns.resourceRecordSets.list",
      "dns.resourceRecordSets.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dns.peer": {
    "name": "roles/dns.peer",
    "title": "DNS Peer",
    "description": "Access to target networks with DNS peering zones",
    "includedPermissions": [
      "dns.networks.targetWithPeeringZone"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/dns.reader": {
    "name": "roles/dns.reader",
    "title": "DNS Reader",
    "description": "Read-only access to DNS resources.",
    "includedPermissions": [
      "compute.networks.get",
      "dns.changes.get",
      "dns.changes.list",
      "dns.dnsKeys.get",
      "dns.dnsKeys.list",
      "dns.managedZoneOperations.get",
      "dns.managedZoneOperations.list",
      "dns.managedZones.get",
      "dns.managedZones.list",
      "dns.policies.get",
      "dns.policies.list",
      "dns.projects.get",
      "dns.resourceRecordSets.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/editor": {
    "name": "roles/editor",
    "title": "Editor",
    "description": "Edit access to all resources.",
    "includedPermissions": [
      "accessapproval.requests.get",
      "accessapproval.requests.list",
      "accessapproval.settings.get",
      "accesscontextmanager.accessLevels.create",
      "accesscontextmanager.accessLevels.delete",
      "accesscontextmanager.accessLevels.get",
      "accesscontextmanager.accessLevels.list",
      "accesscontextmanager.accessLevels.update",
      "accesscontextmanager.accessPolicies.create",
      "accesscontextmanager.accessPolicies.delete",
      "accesscontextmanager.accessPolicies.get",
      "accesscontextmanager.accessPolicies.getIamPolicy",
      "accesscontextmanager.accessPolicies.list",
      "accesscontextmanager.accessPolicies.update",
      "accesscontextmanager.accessZones.create",
      "accesscontextmanager.accessZones.delete",
      "accesscontextmanager.accessZones.get",
      "accesscontextmanager.accessZones.list",
      "accesscontextmanager.accessZones.update",
      "accesscontextmanager.policies.create",
      "accesscontextmanager.policies.delete",
      "accesscontextmanager.policies.get",
      "accesscontextmanager.policies.getIamPolicy",
      "accesscontextmanager.policies.list",
      "accesscontextmanager.policies.update",
      "accesscontextmanager.servicePerimeters.create",
      "accesscontextmanager.servicePerimeters.delete",
      "accesscontextmanager.servicePerimeters.get",
      "accesscontextmanager.servicePerimeters.list",
      "accesscontextmanager.servicePerimeters.update",
      "actions.agent.claimContentProvider",
      "actions.agent.get",
      "actions.agent.update",
      "actions.agentVersions.create",
      "actions.agentVersions.delete",
      "actions.agentVersions.deploy",
      "actions.agentVersions.get",
      "actions.agentVersions.list",
      "androidmanagement.enterprises.manage",
      "apigee.apiproductattributes.createOrUpdateAll",
      "apigee.apiproductattributes.delete",
      "apigee.apiproductattributes.get",
      "apigee.apiproductattributes.list",
      "apigee.apiproductattributes.update",
      "apigee.apiproducts.create",
      "apigee.apiproducts.delete",
      "apigee.apiproducts.get",
      "apigee.apiproducts.list",
      "apigee.apiproducts.update",
      "apigee.appkeys.create",
      "apigee.appkeys.delete",
      "apigee.appkeys.get",
      "apigee.appkeys.manage",
      "apigee.apps.get",
      "apigee.apps.list",
      "apigee.deployments.create",
      "apigee.deployments.delete",
      "apigee.deployments.get",
      "apigee.deployments.list",
      "apigee.deployments.update",
      "apigee.developerappattributes.createOrUpdateAll",
      "apigee.developerappattributes.delete",
      "apigee.developerappattributes.get",
      "apigee.developerappattributes.list",
      "apigee.developerappattributes.update",
      "apigee.developerapps.create",
      "apigee.developerapps.delete",
      "apigee.developerapps.get",
      "apigee.developerapps.list",
      "apigee.developerapps.manage",
      "apigee.developerattributes.createOrUpdateAll",
      "apigee.developerattributes.delete",
      "apigee.developerattributes.get",
      "apigee.developerattributes.list",
      "apigee.developerattributes.update",
      "apigee.developers.create",
      "apigee.developers.delete",
      "apigee.developers.get",
      "apigee.developers.list",
      "apigee.developers.update",
      "apigee.environments.create",
      "apigee.environments.delete",
      "apigee.environments.get",
      "apigee.environments.getDataLocation",
      "apigee.environments.getIamPolicy",
      "apigee.environments.getStats",
      "apigee.environments.list",
      "apigee.environments.manageRuntime",
      "apigee.environments.update",
      "apigee.flowhooks.attachSharedFlow",
      "apigee.flowhooks.detachSharedFlow",
      "apigee.flowhooks.getSharedFlow",
      "apigee.flowhooks.list",
      "apigee.keystorealiases.create",
      "apigee.keystorealiases.delete",
      "apigee.keystorealiases.exportCertificate",
      "apigee.keystorealiases.generateCSR",
      "apigee.keystorealiases.get",
      "apigee.keystorealiases.list",
      "apigee.keystorealiases.update",
      "apigee.keystores.create",
      "apigee.keystores.delete",
      "apigee.keystores.export",
      "apigee.keystores.get",
      "apigee.keystores.list",
      "apigee.keyvaluemaps.create",
      "apigee.keyvaluemaps.delete",
      "apigee.keyvaluemaps.list",
      "apigee.maskconfigs.get",
      "apigee.maskconfigs.update",
      "apigee.organizations.create",
      "apigee.organizations.get",
      "apigee.organizations.list",
      "apigee.organizations.update",
      "apigee.proxies.create",
      "apigee.proxies.delete",
      "apigee.proxies.get",
      "apigee.proxies.list",
      "apigee.proxyrevisions.delete",
      "apigee.proxyrevisions.deploy",
      "apigee.proxyrevisions.get",
      "apigee.proxyrevisions.list",
      "apigee.proxyrevisions.undeploy",
      "apigee.proxyrevisions.update",
      "apigee.queries.create",
      "apigee.queries.get",
      "apigee.queries.list",
      "apigee.references.create",
      "apigee.references.delete",
      "apigee.references.get",
      "apigee.references.list",
      "apigee.references.update",
      "apigee.reports.create",
      "apigee.reports.delete",
      "apigee.reports.get",
      "apigee.reports.list",
      "apigee.reports.update",
      "apigee.resourcefiles.create",
      "apigee.resourcefiles.delete",
      "apigee.resourcefiles.get",
      "apigee.resourcefiles.list",
      "apigee.resourcefiles.update",
      "apigee.sharedflowrevisions.delete",
      "apigee.sharedflowrevisions.deploy",
      "apigee.sharedflowrevisions.get",
      "apigee.sharedflowrevisions.list",
      "apigee.sharedflowrevisions.undeploy",
      "apigee.sharedflowrevisions.update",
      "apigee.sharedflows.create",
      "apigee.sharedflows.delete",
      "apigee.sharedflows.get",
      "apigee.sharedflows.list",
      "apigee.targetservers.create",
      "apigee.targetservers.delete",
      "apigee.targetservers.get",
      "apigee.targetservers.list",
      "apigee.targetservers.update",
      "apigee.tracesessions.create",
      "apigee.tracesessions.delete",
      "apigee.tracesessions.get",
      "apigee.tracesessions.list",
      "appengine.applications.get",
      "appengine.applications.update",
      "appengine.instances.delete",
      "appengine.instances.get",
      "appengine.instances.list",
      "appengine.memcache.addKey",
      "appengine.memcache.flush",
      "appengine.memcache.get",
      "appengine.memcache.getKey",
      "appengine.memcache.list",
      "appengine.memcache.update",
      "appengine.operations.get",
      "appengine.operations.list",
      "appengine.runtimes.actAsAdmin",
      "appengine.services.delete",
      "appengine.services.get",
      "appengine.services.list",
      "appengine.services.update",
      "appengine.versions.create",
      "appengine.versions.delete",
      "appengine.versions.get",
      "appengine.versions.list",
      "appengine.versions.update",
      "artifactregistry.files.get",
      "artifactregistry.files.list",
      "artifactregistry.packages.delete",
      "artifactregistry.packages.get",
      "artifactregistry.packages.list",
      "artifactregistry.repositories.create",
      "artifactregistry.repositories.delete",
      "artifactregistry.repositories.deleteArtifacts",
      "artifactregistry.repositories.downloadArtifacts",
      "artifactregistry.repositories.get",
      "artifactregistry.repositories.getIamPolicy",
      "artifactregistry.repositories.list",
      "artifactregistry.repositories.update",
      "artifactregistry.repositories.uploadArtifacts",
      "artifactregistry.tags.create",
      "artifactregistry.tags.delete",
      "artifactregistry.tags.get",
      "artifactregistry.tags.list",
      "artifactregistry.tags.update",
      "artifactregistry.versions.delete",
      "artifactregistry.versions.get",
      "artifactregistry.versions.list",
      "automl.annotationSpecs.create",
      "automl.annotationSpecs.delete",
      "automl.annotationSpecs.get",
      "automl.annotationSpecs.list",
      "automl.annotationSpecs.update",
      "automl.annotations.approve",
      "automl.annotations.create",
      "automl.annotations.list",
      "automl.annotations.manipulate",
      "automl.annotations.reject",
      "automl.columnSpecs.get",
      "automl.columnSpecs.list",
      "automl.columnSpecs.update",
      "automl.datasets.create",
      "automl.datasets.delete",
      "automl.datasets.export",
      "automl.datasets.get",
      "automl.datasets.getIamPolicy",
      "automl.datasets.import",
      "automl.datasets.list",
      "automl.datasets.update",
      "automl.examples.delete",
      "automl.examples.get",
      "automl.examples.list",
      "automl.humanAnnotationTasks.create",
      "automl.humanAnnotationTasks.delete",
      "automl.humanAnnotationTasks.get",
      "automl.humanAnnotationTasks.list",
      "automl.locations.get",
      "automl.locations.getIamPolicy",
      "automl.locations.list",
      "automl.modelEvaluations.create",
      "automl.modelEvaluations.get",
      "automl.modelEvaluations.list",
      "automl.models.create",
      "automl.models.delete",
      "automl.models.deploy",
      "automl.models.export",
      "automl.models.get",
      "automl.models.getIamPolicy",
      "automl.models.list",
      "automl.models.predict",
      "automl.models.undeploy",
      "automl.operations.cancel",
      "automl.operations.delete",
      "automl.operations.get",
      "automl.operations.list",
      "automl.tableSpecs.get",
      "automl.tableSpecs.list",
      "automl.tableSpecs.update",
      "automlrecommendations.apiKeys.create",
      "automlrecommendations.apiKeys.delete",
      "automlrecommendations.apiKeys.list",
      "automlrecommendations.catalogItems.create",
      "automlrecommendations.catalogItems.delete",
      "automlrecommendations.catalogItems.get",
      "automlrecommendations.catalogItems.list",
      "automlrecommendations.catalogItems.update",
      "automlrecommendations.catalogs.getStats",
      "automlrecommendations.catalogs.list",
      "automlrecommendations.eventStores.getStats",
      "automlrecommendations.events.create",
      "automlrecommendations.events.list",
      "automlrecommendations.placements.getStats",
      "automlrecommendations.placements.list",
      "automlrecommendations.recommendations.list",
      "bigquery.config.get",
      "bigquery.connections.create",
      "bigquery.connections.delete",
      "bigquery.connections.get",
      "bigquery.connections.getIamPolicy",
      "bigquery.connections.list",
      "bigquery.connections.update",
      "bigquery.connections.use",
      "bigquery.datasets.create",
      "bigquery.datasets.get",
      "bigquery.datasets.getIamPolicy",
      "bigquery.datasets.updateTag",
      "bigquery.jobs.create",
      "bigquery.jobs.get",
      "bigquery.jobs.list",
      "bigquery.models.create",
      "bigquery.models.delete",
      "bigquery.models.getData",
      "bigquery.models.getMetadata",
      "bigquery.models.list",
      "bigquery.models.updateData",
      "bigquery.models.updateMetadata",
      "bigquery.models.updateTag",
      "bigquery.readsessions.create",
      "bigquery.routines.create",
      "bigquery.routines.delete",
      "bigquery.routines.get",
      "bigquery.routines.list",
      "bigquery.routines.update",
      "bigquery.savedqueries.create",
      "bigquery.savedqueries.delete",
      "bigquery.savedqueries.get",
      "bigquery.savedqueries.list",
      "bigquery.savedqueries.update",
      "bigquery.transfers.get",
      "bigquery.transfers.update",
      "bigtable.appProfiles.create",
      "bigtable.appProfiles.delete",
      "bigtable.appProfiles.get",
      "bigtable.appProfiles.list",
      "bigtable.appProfiles.update",
      "bigtable.clusters.create",
      "bigtable.clusters.delete",
      "bigtable.clusters.get",
      "bigtable.clusters.list",
      "bigtable.clusters.update",
      "bigtable.instances.create",
      "bigtable.instances.delete",
      "bigtable.instances.get",
      "bigtable.instances.getIamPolicy",
      "bigtable.instances.list",
      "bigtable.instances.update",
      "bigtable.locations.list",
      "bigtable.tables.checkConsistency",
      "bigtable.tables.create",
      "bigtable.tables.delete",
      "bigtable.tables.generateConsistencyToken",
      "bigtable.tables.get",
      "bigtable.tables.getIamPolicy",
      "bigtable.tables.list",
      "bigtable.tables.mutateRows",
      "bigtable.tables.readRows",
      "bigtable.tables.sampleRowKeys",
      "bigtable.tables.update",
      "billing.resourceCosts.get",
      "binaryauthorization.attestors.create",
      "binaryauthorization.attestors.delete",
      "binaryauthorization.attestors.get",
      "binaryauthorization.attestors.getIamPolicy",
      "binaryauthorization.attestors.list",
      "binaryauthorization.attestors.update",
      "binaryauthorization.attestors.verifyImageAttested",
      "binaryauthorization.policy.get",
      "binaryauthorization.policy.getIamPolicy",
      "binaryauthorization.policy.update",
      "chat.bots.get",
      "chat.bots.update",
      "clientauthconfig.brands.create",
      "clientauthconfig.brands.delete",
      "clientauthconfig.brands.get",
      "clientauthconfig.brands.list",
      "clientauthconfig.brands.update",
      "clientauthconfig.clients.create",
      "clientauthconfig.clients.createSecret",
      "clientauthconfig.clients.delete",
      "clientauthconfig.clients.get",
      "clientauthconfig.clients.getWithSecret",
      "clientauthconfig.clients.list",
      "clientauthconfig.clients.listWithSecrets",
      "clientauthconfig.clients.undelete",
      "clientauthconfig.clients.update",
      "cloudasset.assets.exportAppengineApplications",
      "cloudasset.assets.exportAppengineServices",
      "cloudasset.assets.exportAppengineVersions",
      "cloudasset.assets.exportBigqueryDatasets",
      "cloudasset.assets.exportBigqueryTables",
      "cloudasset.assets.exportCloudbillingBillingAccounts",
      "cloudasset.assets.exportCloudkmsCryptoKeyVersions",
      "cloudasset.assets.exportCloudkmsCryptoKeys",
      "cloudasset.assets.exportCloudkmsKeyRings",
      "cloudasset.assets.exportCloudresourcemanagerFolders",
      "cloudasset.assets.exportCloudresourcemanagerOrganizations",
      "cloudasset.assets.exportCloudresourcemanagerProjects",
      "cloudasset.assets.exportComputeAddress",
      "cloudasset.assets.exportComputeAutoscalers",
      "cloudasset.assets.exportComputeBackendBuckets",
      "cloudasset.assets.exportComputeBackendServices",
      "cloudasset.assets.exportComputeDisks",
      "cloudasset.assets.exportComputeFirewalls",
      "cloudasset.assets.exportComputeForwardingRules",
      "cloudasset.assets.exportComputeGlobalForwardingRules",
      "cloudasset.assets.exportComputeHealthChecks",
      "cloudasset.assets.exportComputeHttpHealthChecks",
      "cloudasset.assets.exportComputeHttpsHealthChecks",
      "cloudasset.assets.exportComputeImages",
      "cloudasset.assets.exportComputeInstanceGroupManagers",
      "cloudasset.assets.exportComputeInstanceGroups",
      "cloudasset.assets.exportComputeInstanceTemplates",
      "cloudasset.assets.exportComputeInstances",
      "cloudasset.assets.exportComputeInterconnect",
      "cloudasset.assets.exportComputeInterconnectAttachment",
      "cloudasset.assets.exportComputeLicenses",
      "cloudasset.assets.exportComputeNetworks",
      "cloudasset.assets.exportComputeProjects",
      "cloudasset.assets.exportComputeRegionBackendServices",
      "cloudasset.assets.exportComputeRouters",
      "cloudasset.assets.exportComputeRoutes",
      "cloudasset.assets.exportComputeSecurityPolicy",
      "cloudasset.assets.exportComputeSnapshots",
      "cloudasset.assets.exportComputeSslCertificates",
      "cloudasset.assets.exportComputeSubnetworks",
      "cloudasset.assets.exportComputeTargetHttpProxies",
      "cloudasset.assets.exportComputeTargetHttpsProxies",
      "cloudasset.assets.exportComputeTargetInstances",
      "cloudasset.assets.exportComputeTargetPools",
      "cloudasset.assets.exportComputeTargetSslProxies",
      "cloudasset.assets.exportComputeTargetTcpProxies",
      "cloudasset.assets.exportComputeTargetVpnGateways",
      "cloudasset.assets.exportComputeUrlMaps",
      "cloudasset.assets.exportComputeVpnTunnels",
      "cloudasset.assets.exportContainerClusters",
      "cloudasset.assets.exportDataprocClusters",
      "cloudasset.assets.exportDataprocJobs",
      "cloudasset.assets.exportDnsManagedZones",
      "cloudasset.assets.exportDnsPolicies",
      "cloudasset.assets.exportIamRoles",
      "cloudasset.assets.exportIamServiceAccountKeys",
      "cloudasset.assets.exportIamServiceAccounts",
      "cloudasset.assets.exportPubsubSubscriptions",
      "cloudasset.assets.exportPubsubTopics",
      "cloudasset.assets.exportServicemanagementServices",
      "cloudasset.assets.exportSpannerDatabases",
      "cloudasset.assets.exportSpannerInstances",
      "cloudasset.assets.exportSqladminInstances",
      "cloudasset.assets.exportStorageBuckets",
      "cloudbuild.builds.create",
      "cloudbuild.builds.get",
      "cloudbuild.builds.list",
      "cloudbuild.builds.update",
      "cloudconfig.configs.get",
      "cloudconfig.configs.update",
      "clouddebugger.breakpoints.create",
      "clouddebugger.breakpoints.delete",
      "clouddebugger.breakpoints.get",
      "clouddebugger.breakpoints.list",
      "clouddebugger.breakpoints.listActive",
      "clouddebugger.breakpoints.update",
      "clouddebugger.debuggees.create",
      "clouddebugger.debuggees.list",
      "cloudfunctions.functions.call",
      "cloudfunctions.functions.create",
      "cloudfunctions.functions.delete",
      "cloudfunctions.functions.get",
      "cloudfunctions.functions.getIamPolicy",
      "cloudfunctions.functions.invoke",
      "cloudfunctions.functions.list",
      "cloudfunctions.functions.sourceCodeGet",
      "cloudfunctions.functions.sourceCodeSet",
      "cloudfunctions.functions.update",
      "cloudfunctions.locations.list",
      "cloudfunctions.operations.get",
      "cloudfunctions.operations.list",
      "cloudiot.devices.bindGateway",
      "cloudiot.devices.create",
      "cloudiot.devices.delete",
      "cloudiot.devices.get",
      "cloudiot.devices.list",
      "cloudiot.devices.sendCommand",
      "cloudiot.devices.unbindGateway",
      "cloudiot.devices.update",
      "cloudiot.devices.updateConfig",
      "cloudiot.registries.create",
      "cloudiot.registries.delete",
      "cloudiot.registries.get",
      "cloudiot.registries.getIamPolicy",
      "cloudiot.registries.list",
      "cloudiot.registries.update",
      "cloudiottoken.tokensettings.get",
      "cloudiottoken.tokensettings.update",
      "cloudjobdiscovery.companies.create",
      "cloudjobdiscovery.companies.delete",
      "cloudjobdiscovery.companies.get",
      "cloudjobdiscovery.companies.list",
      "cloudjobdiscovery.companies.update",
      "cloudjobdiscovery.events.create",
      "cloudjobdiscovery.jobs.create",
      "cloudjobdiscovery.jobs.delete",
      "cloudjobdiscovery.jobs.get",
      "cloudjobdiscovery.jobs.search",
      "cloudjobdiscovery.jobs.update",
      "cloudjobdiscovery.profiles.create",
      "cloudjobdiscovery.profiles.delete",
      "cloudjobdiscovery.profiles.get",
      "cloudjobdiscovery.profiles.search",
      "cloudjobdiscovery.profiles.update",
      "cloudjobdiscovery.tenants.create",
      "cloudjobdiscovery.tenants.delete",
      "cloudjobdiscovery.tenants.get",
      "cloudjobdiscovery.tenants.update",
      "cloudjobdiscovery.tools.access",
      "cloudkms.cryptoKeyVersions.create",
      "cloudkms.cryptoKeyVersions.get",
      "cloudkms.cryptoKeyVersions.list",
      "cloudkms.cryptoKeyVersions.update",
      "cloudkms.cryptoKeys.create",
      "cloudkms.cryptoKeys.get",
      "cloudkms.cryptoKeys.getIamPolicy",
      "cloudkms.cryptoKeys.list",
      "cloudkms.cryptoKeys.update",
      "cloudkms.importJobs.create",
      "cloudkms.importJobs.get",
      "cloudkms.importJobs.getIamPolicy",
      "cloudkms.importJobs.list",
      "cloudkms.importJobs.useToImport",
      "cloudkms.keyRings.create",
      "cloudkms.keyRings.get",
      "cloudkms.keyRings.getIamPolicy",
      "cloudkms.keyRings.list",
      "cloudmessaging.messages.create",
      "cloudnotifications.activities.list",
      "cloudprivatecatalog.targets.get",
      "cloudprivatecatalogproducer.associations.create",
      "cloudprivatecatalogproducer.associations.delete",
      "cloudprivatecatalogproducer.associations.get",
      "cloudprivatecatalogproducer.associations.list",
      "cloudprivatecatalogproducer.catalogs.create",
      "cloudprivatecatalogproducer.catalogs.delete",
      "cloudprivatecatalogproducer.catalogs.get",
      "cloudprivatecatalogproducer.catalogs.getIamPolicy",
      "cloudprivatecatalogproducer.catalogs.list",
      "cloudprivatecatalogproducer.catalogs.undelete",
      "cloudprivatecatalogproducer.catalogs.update",
      "cloudprivatecatalogproducer.targets.associate",
      "cloudprivatecatalogproducer.targets.unassociate",
      "cloudprofiler.profiles.create",
      "cloudprofiler.profiles.list",
      "cloudprofiler.profiles.update",
      "cloudscheduler.jobs.create",
      "cloudscheduler.jobs.delete",
      "cloudscheduler.jobs.enable",
      "cloudscheduler.jobs.fullView",
      "cloudscheduler.jobs.get",
      "cloudscheduler.jobs.list",
      "cloudscheduler.jobs.pause",
      "cloudscheduler.jobs.run",
      "cloudscheduler.jobs.update",
      "cloudscheduler.locations.get",
      "cloudscheduler.locations.list",
      "cloudsecurityscanner.crawledurls.list",
      "cloudsecurityscanner.results.get",
      "cloudsecurityscanner.results.list",
      "cloudsecurityscanner.scanruns.get",
      "cloudsecurityscanner.scanruns.getSummary",
      "cloudsecurityscanner.scanruns.list",
      "cloudsecurityscanner.scanruns.stop",
      "cloudsecurityscanner.scans.create",
      "cloudsecurityscanner.scans.delete",
      "cloudsecurityscanner.scans.get",
      "cloudsecurityscanner.scans.list",
      "cloudsecurityscanner.scans.run",
      "cloudsecurityscanner.scans.update",
      "cloudsql.backupRuns.create",
      "cloudsql.backupRuns.delete",
      "cloudsql.backupRuns.get",
      "cloudsql.backupRuns.list",
      "cloudsql.databases.create",
      "cloudsql.databases.delete",
      "cloudsql.databases.get",
      "cloudsql.databases.list",
      "cloudsql.databases.update",
      "cloudsql.instances.addServerCa",
      "cloudsql.instances.clone",
      "cloudsql.instances.connect",
      "cloudsql.instances.create",
      "cloudsql.instances.delete",
      "cloudsql.instances.demoteMaster",
      "cloudsql.instances.export",
      "cloudsql.instances.failover",
      "cloudsql.instances.get",
      "cloudsql.instances.import",
      "cloudsql.instances.list",
      "cloudsql.instances.listServerCas",
      "cloudsql.instances.promoteReplica",
      "cloudsql.instances.resetSslConfig",
      "cloudsql.instances.restart",
      "cloudsql.instances.restoreBackup",
      "cloudsql.instances.rotateServerCa",
      "cloudsql.instances.startReplica",
      "cloudsql.instances.stopReplica",
      "cloudsql.instances.truncateLog",
      "cloudsql.instances.update",
      "cloudsql.sslCerts.create",
      "cloudsql.sslCerts.createEphemeral",
      "cloudsql.sslCerts.delete",
      "cloudsql.sslCerts.get",
      "cloudsql.sslCerts.list",
      "cloudsql.users.create",
      "cloudsql.users.delete",
      "cloudsql.users.list",
      "cloudsql.users.update",
      "cloudsupport.accounts.get",
      "cloudsupport.accounts.getIamPolicy",
      "cloudsupport.accounts.getUserRoles",
      "cloudsupport.accounts.list",
      "cloudsupport.accounts.update",
      "cloudsupport.accounts.updateUserRoles",
      "cloudsupport.operations.get",
      "cloudtasks.locations.get",
      "cloudtasks.locations.list",
      "cloudtasks.queues.create",
      "cloudtasks.queues.delete",
      "cloudtasks.queues.get",
      "cloudtasks.queues.list",
      "cloudtasks.queues.pause",
      "cloudtasks.queues.purge",
      "cloudtasks.queues.resume",
      "cloudtasks.queues.update",
      "cloudtasks.tasks.create",
      "cloudtasks.tasks.delete",
      "cloudtasks.tasks.fullView",
      "cloudtasks.tasks.get",
      "cloudtasks.tasks.list",
      "cloudtasks.tasks.run",
      "cloudtestservice.environmentcatalog.get",
      "cloudtestservice.matrices.create",
      "cloudtestservice.matrices.get",
      "cloudtestservice.matrices.update",
      "cloudtoolresults.executions.create",
      "cloudtoolresults.executions.get",
      "cloudtoolresults.executions.list",
      "cloudtoolresults.executions.update",
      "cloudtoolresults.histories.create",
      "cloudtoolresults.histories.get",
      "cloudtoolresults.histories.list",
      "cloudtoolresults.settings.create",
      "cloudtoolresults.settings.get",
      "cloudtoolresults.settings.update",
      "cloudtoolresults.steps.create",
      "cloudtoolresults.steps.get",
      "cloudtoolresults.steps.list",
      "cloudtoolresults.steps.update",
      "cloudtrace.insights.get",
      "cloudtrace.insights.list",
      "cloudtrace.stats.get",
      "cloudtrace.tasks.create",
      "cloudtrace.tasks.delete",
      "cloudtrace.tasks.get",
      "cloudtrace.tasks.list",
      "cloudtrace.traces.get",
      "cloudtrace.traces.list",
      "cloudtrace.traces.patch",
      "cloudtranslate.generalModels.batchPredict",
      "cloudtranslate.generalModels.get",
      "cloudtranslate.generalModels.predict",
      "cloudtranslate.glossaries.batchPredict",
      "cloudtranslate.glossaries.create",
      "cloudtranslate.glossaries.delete",
      "cloudtranslate.glossaries.get",
      "cloudtranslate.glossaries.list",
      "cloudtranslate.glossaries.predict",
      "cloudtranslate.languageDetectionModels.predict",
      "cloudtranslate.locations.get",
      "cloudtranslate.locations.list",
      "cloudtranslate.operations.cancel",
      "cloudtranslate.operations.delete",
      "cloudtranslate.operations.get",
      "cloudtranslate.operations.list",
      "cloudtranslate.operations.wait",
      "composer.environments.create",
      "composer.environments.delete",
      "composer.environments.get",
      "composer.environments.list",
      "composer.environments.update",
      "composer.imageversions.list",
      "composer.operations.delete",
      "composer.operations.get",
      "composer.operations.list",
      "compute.acceleratorTypes.get",
      "compute.acceleratorTypes.list",
      "compute.addresses.create",
      "compute.addresses.createInternal",
      "compute.addresses.delete",
      "compute.addresses.deleteInternal",
      "compute.addresses.get",
      "compute.addresses.list",
      "compute.addresses.setLabels",
      "compute.addresses.use",
      "compute.addresses.useInternal",
      "compute.autoscalers.create",
      "compute.autoscalers.delete",
      "compute.autoscalers.get",
      "compute.autoscalers.list",
      "compute.autoscalers.update",
      "compute.backendBuckets.create",
      "compute.backendBuckets.delete",
      "compute.backendBuckets.get",
      "compute.backendBuckets.list",
      "compute.backendBuckets.update",
      "compute.backendBuckets.use",
      "compute.backendServices.create",
      "compute.backendServices.delete",
      "compute.backendServices.get",
      "compute.backendServices.list",
      "compute.backendServices.setSecurityPolicy",
      "compute.backendServices.update",
      "compute.backendServices.use",
      "compute.commitments.create",
      "compute.commitments.get",
      "compute.commitments.list",
      "compute.diskTypes.get",
      "compute.diskTypes.list",
      "compute.disks.addResourcePolicies",
      "compute.disks.create",
      "compute.disks.createSnapshot",
      "compute.disks.delete",
      "compute.disks.get",
      "compute.disks.getIamPolicy",
      "compute.disks.list",
      "compute.disks.removeResourcePolicies",
      "compute.disks.resize",
      "compute.disks.setLabels",
      "compute.disks.update",
      "compute.disks.use",
      "compute.disks.useReadOnly",
      "compute.externalVpnGateways.create",
      "compute.externalVpnGateways.delete",
      "compute.externalVpnGateways.get",
      "compute.externalVpnGateways.list",
      "compute.externalVpnGateways.setLabels",
      "compute.externalVpnGateways.use",
      "compute.firewalls.create",
      "compute.firewalls.delete",
      "compute.firewalls.get",
      "compute.firewalls.list",
      "compute.firewalls.update",
      "compute.forwardingRules.create",
      "compute.forwardingRules.delete",
      "compute.forwardingRules.get",
      "compute.forwardingRules.list",
      "compute.forwardingRules.setLabels",
      "compute.forwardingRules.setTarget",
      "compute.globalAddresses.create",
      "compute.globalAddresses.createInternal",
      "compute.globalAddresses.delete",
      "compute.globalAddresses.deleteInternal",
      "compute.globalAddresses.get",
      "compute.globalAddresses.list",
      "compute.globalAddresses.setLabels",
      "compute.globalAddresses.use",
      "compute.globalForwardingRules.create",
      "compute.globalForwardingRules.delete",
      "compute.globalForwardingRules.get",
      "compute.globalForwardingRules.list",
      "compute.globalForwardingRules.setLabels",
      "compute.globalForwardingRules.setTarget",
      "compute.globalOperations.delete",
      "compute.globalOperations.get",
      "compute.globalOperations.getIamPolicy",
      "compute.globalOperations.list",
      "compute.healthChecks.create",
      "compute.healthChecks.delete",
      "compute.healthChecks.get",
      "compute.healthChecks.list",
      "compute.healthChecks.update",
      "compute.healthChecks.use",
      "compute.healthChecks.useReadOnly",
      "compute.httpHealthChecks.create",
      "compute.httpHealthChecks.delete",
      "compute.httpHealthChecks.get",
      "compute.httpHealthChecks.list",
      "compute.httpHealthChecks.update",
      "compute.httpHealthChecks.use",
      "compute.httpHealthChecks.useReadOnly",
      "compute.httpsHealthChecks.create",
      "compute.httpsHealthChecks.delete",
      "compute.httpsHealthChecks.get",
      "compute.httpsHealthChecks.list",
      "compute.httpsHealthChecks.update",
      "compute.httpsHealthChecks.use",
      "compute.httpsHealthChecks.useReadOnly",
      "compute.images.create",
      "compute.images.delete",
      "compute.images.deprecate",
      "compute.images.get",
      "compute.images.getFromFamily",
      "compute.images.getIamPolicy",
      "compute.images.list",
      "compute.images.setLabels",
      "compute.images.update",
      "compute.images.useReadOnly",
      "compute.instanceGroupManagers.create",
      "compute.instanceGroupManagers.delete",
      "compute.instanceGroupManagers.get",
      "compute.instanceGroupManagers.list",
      "compute.instanceGroupManagers.update",
      "compute.instanceGroupManagers.use",
      "compute.instanceGroups.create",
      "compute.instanceGroups.delete",
      "compute.instanceGroups.get",
      "compute.instanceGroups.list",
      "compute.instanceGroups.update",
      "compute.instanceGroups.use",
      "compute.instanceTemplates.create",
      "compute.instanceTemplates.delete",
      "compute.instanceTemplates.get",
      "compute.instanceTemplates.getIamPolicy",
      "compute.instanceTemplates.list",
      "compute.instanceTemplates.useReadOnly",
      "compute.instances.addAccessConfig",
      "compute.instances.addMaintenancePolicies",
      "compute.instances.attachDisk",
      "compute.instances.create",
      "compute.instances.delete",
      "compute.instances.deleteAccessConfig",
      "compute.instances.detachDisk",
      "compute.instances.get",
      "compute.instances.getGuestAttributes",
      "compute.instances.getIamPolicy",
      "compute.instances.getSerialPortOutput",
      "compute.instances.getShieldedInstanceIdentity",
      "compute.instances.getShieldedVmIdentity",
      "compute.instances.list",
      "compute.instances.listReferrers",
      "compute.instances.osAdminLogin",
      "compute.instances.osLogin",
      "compute.instances.removeMaintenancePolicies",
      "compute.instances.reset",
      "compute.instances.resume",
      "compute.instances.setDeletionProtection",
      "compute.instances.setDiskAutoDelete",
      "compute.instances.setLabels",
      "compute.instances.setMachineResources",
      "compute.instances.setMachineType",
      "compute.instances.setMetadata",
      "compute.instances.setMinCpuPlatform",
      "compute.instances.setScheduling",
      "compute.instances.setServiceAccount",
      "compute.instances.setShieldedInstanceIntegrityPolicy",
      "compute.instances.setShieldedVmIntegrityPolicy",
      "compute.instances.setTags",
      "compute.instances.start",
      "compute.instances.startWithEncryptionKey",
      "compute.instances.stop",
      "compute.instances.suspend",
      "compute.instances.updateAccessConfig",
      "compute.instances.updateDisplayDevice",
      "compute.instances.updateNetworkInterface",
      "compute.instances.updateShieldedInstanceConfig",
      "compute.instances.updateShieldedVmConfig",
      "compute.instances.use",
      "compute.interconnectAttachments.create",
      "compute.interconnectAttachments.delete",
      "compute.interconnectAttachments.get",
      "compute.interconnectAttachments.list",
      "compute.interconnectAttachments.setLabels",
      "compute.interconnectAttachments.update",
      "compute.interconnectAttachments.use",
      "compute.interconnectLocations.get",
      "compute.interconnectLocations.list",
      "compute.interconnects.create",
      "compute.interconnects.delete",
      "compute.interconnects.get",
      "compute.interconnects.list",
      "compute.interconnects.setLabels",
      "compute.interconnects.update",
      "compute.interconnects.use",
      "compute.licenseCodes.get",
      "compute.licenseCodes.getIamPolicy",
      "compute.licenseCodes.list",
      "compute.licenseCodes.update",
      "compute.licenseCodes.use",
      "compute.licenses.create",
      "compute.licenses.delete",
      "compute.licenses.get",
      "compute.licenses.getIamPolicy",
      "compute.licenses.list",
      "compute.machineTypes.get",
      "compute.machineTypes.list",
      "compute.maintenancePolicies.create",
      "compute.maintenancePolicies.delete",
      "compute.maintenancePolicies.get",
      "compute.maintenancePolicies.getIamPolicy",
      "compute.maintenancePolicies.list",
      "compute.maintenancePolicies.use",
      "compute.networkEndpointGroups.attachNetworkEndpoints",
      "compute.networkEndpointGroups.create",
      "compute.networkEndpointGroups.delete",
      "compute.networkEndpointGroups.detachNetworkEndpoints",
      "compute.networkEndpointGroups.get",
      "compute.networkEndpointGroups.getIamPolicy",
      "compute.networkEndpointGroups.list",
      "compute.networkEndpointGroups.use",
      "compute.networks.addPeering",
      "compute.networks.create",
      "compute.networks.delete",
      "compute.networks.get",
      "compute.networks.list",
      "compute.networks.listPeeringRoutes",
      "compute.networks.mirror",
      "compute.networks.removePeering",
      "compute.networks.switchToCustomMode",
      "compute.networks.update",
      "compute.networks.updatePeering",
      "compute.networks.updatePolicy",
      "compute.networks.use",
      "compute.networks.useExternalIp",
      "compute.nodeGroups.addNodes",
      "compute.nodeGroups.create",
      "compute.nodeGroups.delete",
      "compute.nodeGroups.deleteNodes",
      "compute.nodeGroups.get",
      "compute.nodeGroups.getIamPolicy",
      "compute.nodeGroups.list",
      "compute.nodeGroups.setNodeTemplate",
      "compute.nodeGroups.update",
      "compute.nodeTemplates.create",
      "compute.nodeTemplates.delete",
      "compute.nodeTemplates.get",
      "compute.nodeTemplates.getIamPolicy",
      "compute.nodeTemplates.list",
      "compute.nodeTypes.get",
      "compute.nodeTypes.list",
      "compute.packetMirrorings.update",
      "compute.projects.get",
      "compute.projects.setCommonInstanceMetadata",
      "compute.projects.setDefaultNetworkTier",
      "compute.projects.setDefaultServiceAccount",
      "compute.projects.setUsageExportBucket",
      "compute.regionBackendServices.create",
      "compute.regionBackendServices.delete",
      "compute.regionBackendServices.get",
      "compute.regionBackendServices.list",
      "compute.regionBackendServices.setSecurityPolicy",
      "compute.regionBackendServices.update",
      "compute.regionBackendServices.use",
      "compute.regionOperations.delete",
      "compute.regionOperations.get",
      "compute.regionOperations.getIamPolicy",
      "compute.regionOperations.list",
      "compute.regions.get",
      "compute.regions.list",
      "compute.reservations.create",
      "compute.reservations.delete",
      "compute.reservations.get",
      "compute.reservations.list",
      "compute.reservations.resize",
      "compute.resourcePolicies.create",
      "compute.resourcePolicies.delete",
      "compute.resourcePolicies.get",
      "compute.resourcePolicies.list",
      "compute.resourcePolicies.use",
      "compute.routers.create",
      "compute.routers.delete",
      "compute.routers.get",
      "compute.routers.list",
      "compute.routers.update",
      "compute.routers.use",
      "compute.routes.create",
      "compute.routes.delete",
      "compute.routes.get",
      "compute.routes.list",
      "compute.securityPolicies.create",
      "compute.securityPolicies.delete",
      "compute.securityPolicies.get",
      "compute.securityPolicies.getIamPolicy",
      "compute.securityPolicies.list",
      "compute.securityPolicies.update",
      "compute.securityPolicies.use",
      "compute.snapshots.create",
      "compute.snapshots.delete",
      "compute.snapshots.get",
      "compute.snapshots.getIamPolicy",
      "compute.snapshots.list",
      "compute.snapshots.setLabels",
      "compute.snapshots.useReadOnly",
      "compute.sslCertificates.create",
      "compute.sslCertificates.delete",
      "compute.sslCertificates.get",
      "compute.sslCertificates.list",
      "compute.sslPolicies.create",
      "compute.sslPolicies.delete",
      "compute.sslPolicies.get",
      "compute.sslPolicies.list",
      "compute.sslPolicies.listAvailableFeatures",
      "compute.sslPolicies.update",
      "compute.sslPolicies.use",
      "compute.subnetworks.create",
      "compute.subnetworks.delete",
      "compute.subnetworks.expandIpCidrRange",
      "compute.subnetworks.get",
      "compute.subnetworks.getIamPolicy",
      "compute.subnetworks.list",
      "compute.subnetworks.mirror",
      "compute.subnetworks.setPrivateIpGoogleAccess",
      "compute.subnetworks.update",
      "compute.subnetworks.use",
      "compute.subnetworks.useExternalIp",
      "compute.targetHttpProxies.create",
      "compute.targetHttpProxies.delete",
      "compute.targetHttpProxies.get",
      "compute.targetHttpProxies.list",
      "compute.targetHttpProxies.setUrlMap",
      "compute.targetHttpProxies.use",
      "compute.targetHttpsProxies.create",
      "compute.targetHttpsProxies.delete",
      "compute.targetHttpsProxies.get",
      "compute.targetHttpsProxies.list",
      "compute.targetHttpsProxies.setSslCertificates",
      "compute.targetHttpsProxies.setSslPolicy",
      "compute.targetHttpsProxies.setUrlMap",
      "compute.targetHttpsProxies.use",
      "compute.targetInstances.create",
      "compute.targetInstances.delete",
      "compute.targetInstances.get",
      "compute.targetInstances.list",
      "compute.targetInstances.use",
      "compute.targetPools.addHealthCheck",
      "compute.targetPools.addInstance",
      "compute.targetPools.create",
      "compute.targetPools.delete",
      "compute.targetPools.get",
      "compute.targetPools.list",
      "compute.targetPools.removeHealthCheck",
      "compute.targetPools.removeInstance",
      "compute.targetPools.update",
      "compute.targetPools.use",
      "compute.targetSslProxies.create",
      "compute.targetSslProxies.delete",
      "compute.targetSslProxies.get",
      "compute.targetSslProxies.list",
      "compute.targetSslProxies.setBackendService",
      "compute.targetSslProxies.setProxyHeader",
      "compute.targetSslProxies.setSslCertificates",
      "compute.targetSslProxies.use",
      "compute.targetTcpProxies.create",
      "compute.targetTcpProxies.delete",
      "compute.targetTcpProxies.get",
      "compute.targetTcpProxies.list",
      "compute.targetTcpProxies.update",
      "compute.targetTcpProxies.use",
      "compute.targetVpnGateways.create",
      "compute.targetVpnGateways.delete",
      "compute.targetVpnGateways.get",
      "compute.targetVpnGateways.list",
      "compute.targetVpnGateways.setLabels",
      "compute.targetVpnGateways.use",
      "compute.urlMaps.create",
      "compute.urlMaps.delete",
      "compute.urlMaps.get",
      "compute.urlMaps.invalidateCache",
      "compute.urlMaps.list",
      "compute.urlMaps.update",
      "compute.urlMaps.use",
      "compute.urlMaps.validate",
      "compute.vpnGateways.create",
      "compute.vpnGateways.delete",
      "compute.vpnGateways.get",
      "compute.vpnGateways.list",
      "compute.vpnGateways.setLabels",
      "compute.vpnGateways.use",
      "compute.vpnTunnels.create",
      "compute.vpnTunnels.delete",
      "compute.vpnTunnels.get",
      "compute.vpnTunnels.list",
      "compute.vpnTunnels.setLabels",
      "compute.zoneOperations.delete",
      "compute.zoneOperations.get",
      "compute.zoneOperations.getIamPolicy",
      "compute.zoneOperations.list",
      "compute.zones.get",
      "compute.zones.list",
      "container.apiServices.create",
      "container.apiServices.delete",
      "container.apiServices.get",
      "container.apiServices.list",
      "container.apiServices.update",
      "container.apiServices.updateStatus",
      "container.backendConfigs.create",
      "container.backendConfigs.delete",
      "container.backendConfigs.get",
      "container.backendConfigs.list",
      "container.backendConfigs.update",
      "container.bindings.create",
      "container.bindings.delete",
      "container.bindings.get",
      "container.bindings.list",
      "container.bindings.update",
      "container.certificateSigningRequests.create",
      "container.certificateSigningRequests.delete",
      "container.certificateSigningRequests.get",
      "container.certificateSigningRequests.list",
      "container.certificateSigningRequests.update",
      "container.certificateSigningRequests.updateStatus",
      "container.clusterRoleBindings.get",
      "container.clusterRoleBindings.list",
      "container.clusterRoles.get",
      "container.clusterRoles.list",
      "container.clusters.create",
      "container.clusters.delete",
      "container.clusters.get",
      "container.clusters.getCredentials",
      "container.clusters.list",
      "container.clusters.update",
      "container.componentStatuses.get",
      "container.componentStatuses.list",
      "container.configMaps.create",
      "container.configMaps.delete",
      "container.configMaps.get",
      "container.configMaps.list",
      "container.configMaps.update",
      "container.controllerRevisions.create",
      "container.controllerRevisions.delete",
      "container.controllerRevisions.get",
      "container.controllerRevisions.list",
      "container.controllerRevisions.update",
      "container.cronJobs.create",
      "container.cronJobs.delete",
      "container.cronJobs.get",
      "container.cronJobs.getStatus",
      "container.cronJobs.list",
      "container.cronJobs.update",
      "container.cronJobs.updateStatus",
      "container.csiDrivers.create",
      "container.csiDrivers.delete",
      "container.csiDrivers.get",
      "container.csiDrivers.list",
      "container.csiDrivers.update",
      "container.csiNodes.create",
      "container.csiNodes.delete",
      "container.csiNodes.get",
      "container.csiNodes.list",
      "container.csiNodes.update",
      "container.customResourceDefinitions.create",
      "container.customResourceDefinitions.delete",
      "container.customResourceDefinitions.get",
      "container.customResourceDefinitions.list",
      "container.customResourceDefinitions.update",
      "container.customResourceDefinitions.updateStatus",
      "container.daemonSets.create",
      "container.daemonSets.delete",
      "container.daemonSets.get",
      "container.daemonSets.getStatus",
      "container.daemonSets.list",
      "container.daemonSets.update",
      "container.daemonSets.updateStatus",
      "container.deployments.create",
      "container.deployments.delete",
      "container.deployments.get",
      "container.deployments.getScale",
      "container.deployments.getStatus",
      "container.deployments.list",
      "container.deployments.rollback",
      "container.deployments.update",
      "container.deployments.updateScale",
      "container.deployments.updateStatus",
      "container.endpoints.create",
      "container.endpoints.delete",
      "container.endpoints.get",
      "container.endpoints.list",
      "container.endpoints.update",
      "container.events.create",
      "container.events.delete",
      "container.events.get",
      "container.events.list",
      "container.events.update",
      "container.horizontalPodAutoscalers.create",
      "container.horizontalPodAutoscalers.delete",
      "container.horizontalPodAutoscalers.get",
      "container.horizontalPodAutoscalers.getStatus",
      "container.horizontalPodAutoscalers.list",
      "container.horizontalPodAutoscalers.update",
      "container.horizontalPodAutoscalers.updateStatus",
      "container.ingresses.create",
      "container.ingresses.delete",
      "container.ingresses.get",
      "container.ingresses.getStatus",
      "container.ingresses.list",
      "container.ingresses.update",
      "container.ingresses.updateStatus",
      "container.initializerConfigurations.create",
      "container.initializerConfigurations.delete",
      "container.initializerConfigurations.get",
      "container.initializerConfigurations.list",
      "container.initializerConfigurations.update",
      "container.jobs.create",
      "container.jobs.delete",
      "container.jobs.get",
      "container.jobs.getStatus",
      "container.jobs.list",
      "container.jobs.update",
      "container.jobs.updateStatus",
      "container.limitRanges.create",
      "container.limitRanges.delete",
      "container.limitRanges.get",
      "container.limitRanges.list",
      "container.limitRanges.update",
      "container.localSubjectAccessReviews.list",
      "container.namespaces.create",
      "container.namespaces.delete",
      "container.namespaces.get",
      "container.namespaces.getStatus",
      "container.namespaces.list",
      "container.namespaces.update",
      "container.namespaces.updateStatus",
      "container.networkPolicies.create",
      "container.networkPolicies.delete",
      "container.networkPolicies.get",
      "container.networkPolicies.list",
      "container.networkPolicies.update",
      "container.nodes.create",
      "container.nodes.delete",
      "container.nodes.get",
      "container.nodes.getStatus",
      "container.nodes.list",
      "container.nodes.proxy",
      "container.nodes.update",
      "container.nodes.updateStatus",
      "container.operations.get",
      "container.operations.list",
      "container.persistentVolumeClaims.create",
      "container.persistentVolumeClaims.delete",
      "container.persistentVolumeClaims.get",
      "container.persistentVolumeClaims.getStatus",
      "container.persistentVolumeClaims.list",
      "container.persistentVolumeClaims.update",
      "container.persistentVolumeClaims.updateStatus",
      "container.persistentVolumes.create",
      "container.persistentVolumes.delete",
      "container.persistentVolumes.get",
      "container.persistentVolumes.getStatus",
      "container.persistentVolumes.list",
      "container.persistentVolumes.update",
      "container.persistentVolumes.updateStatus",
      "container.petSets.create",
      "container.petSets.delete",
      "container.petSets.get",
      "container.petSets.list",
      "container.petSets.update",
      "container.petSets.updateStatus",
      "container.podDisruptionBudgets.create",
      "container.podDisruptionBudgets.delete",
      "container.podDisruptionBudgets.get",
      "container.podDisruptionBudgets.getStatus",
      "container.podDisruptionBudgets.list",
      "container.podDisruptionBudgets.update",
      "container.podDisruptionBudgets.updateStatus",
      "container.podPresets.create",
      "container.podPresets.delete",
      "container.podPresets.get",
      "container.podPresets.list",
      "container.podPresets.update",
      "container.podSecurityPolicies.create",
      "container.podSecurityPolicies.delete",
      "container.podSecurityPolicies.get",
      "container.podSecurityPolicies.list",
      "container.podSecurityPolicies.update",
      "container.podSecurityPolicies.use",
      "container.podTemplates.create",
      "container.podTemplates.delete",
      "container.podTemplates.get",
      "container.podTemplates.list",
      "container.podTemplates.update",
      "container.pods.attach",
      "container.pods.create",
      "container.pods.delete",
      "container.pods.evict",
      "container.pods.exec",
      "container.pods.get",
      "container.pods.getLogs",
      "container.pods.getStatus",
      "container.pods.initialize",
      "container.pods.list",
      "container.pods.portForward",
      "container.pods.proxy",
      "container.pods.update",
      "container.pods.updateStatus",
      "container.replicaSets.create",
      "container.replicaSets.delete",
      "container.replicaSets.get",
      "container.replicaSets.getScale",
      "container.replicaSets.getStatus",
      "container.replicaSets.list",
      "container.replicaSets.update",
      "container.replicaSets.updateScale",
      "container.replicaSets.updateStatus",
      "container.replicationControllers.create",
      "container.replicationControllers.delete",
      "container.replicationControllers.get",
      "container.replicationControllers.getScale",
      "container.replicationControllers.getStatus",
      "container.replicationControllers.list",
      "container.replicationControllers.update",
      "container.replicationControllers.updateScale",
      "container.replicationControllers.updateStatus",
      "container.resourceQuotas.create",
      "container.resourceQuotas.delete",
      "container.resourceQuotas.get",
      "container.resourceQuotas.getStatus",
      "container.resourceQuotas.list",
      "container.resourceQuotas.update",
      "container.resourceQuotas.updateStatus",
      "container.roleBindings.get",
      "container.roleBindings.list",
      "container.roles.get",
      "container.roles.list",
      "container.runtimeClasses.create",
      "container.runtimeClasses.delete",
      "container.runtimeClasses.get",
      "container.runtimeClasses.list",
      "container.runtimeClasses.update",
      "container.scheduledJobs.create",
      "container.scheduledJobs.delete",
      "container.scheduledJobs.get",
      "container.scheduledJobs.list",
      "container.scheduledJobs.update",
      "container.scheduledJobs.updateStatus",
      "container.secrets.create",
      "container.secrets.delete",
      "container.secrets.get",
      "container.secrets.list",
      "container.secrets.update",
      "container.selfSubjectAccessReviews.create",
      "container.selfSubjectAccessReviews.list",
      "container.serviceAccounts.create",
      "container.serviceAccounts.delete",
      "container.serviceAccounts.get",
      "container.serviceAccounts.list",
      "container.serviceAccounts.update",
      "container.services.create",
      "container.services.delete",
      "container.services.get",
      "container.services.getStatus",
      "container.services.list",
      "container.services.proxy",
      "container.services.update",
      "container.services.updateStatus",
      "container.statefulSets.create",
      "container.statefulSets.delete",
      "container.statefulSets.get",
      "container.statefulSets.getScale",
      "container.statefulSets.getStatus",
      "container.statefulSets.list",
      "container.statefulSets.update",
      "container.statefulSets.updateScale",
      "container.statefulSets.updateStatus",
      "container.storageClasses.create",
      "container.storageClasses.delete",
      "container.storageClasses.get",
      "container.storageClasses.list",
      "container.storageClasses.update",
      "container.subjectAccessReviews.list",
      "container.thirdPartyObjects.create",
      "container.thirdPartyObjects.delete",
      "container.thirdPartyObjects.get",
      "container.thirdPartyObjects.list",
      "container.thirdPartyObjects.update",
      "container.thirdPartyResources.create",
      "container.thirdPartyResources.delete",
      "container.thirdPartyResources.get",
      "container.thirdPartyResources.list",
      "container.thirdPartyResources.update",
      "container.tokenReviews.create",
      "datacatalog.categories.getIamPolicy",
      "datacatalog.entries.create",
      "datacatalog.entries.delete",
      "datacatalog.entries.get",
      "datacatalog.entries.getIamPolicy",
      "datacatalog.entries.list",
      "datacatalog.entries.update",
      "datacatalog.entries.updateTag",
      "datacatalog.entryGroups.create",
      "datacatalog.entryGroups.delete",
      "datacatalog.entryGroups.get",
      "datacatalog.entryGroups.getIamPolicy",
      "datacatalog.entryGroups.update",
      "datacatalog.tagTemplates.create",
      "datacatalog.tagTemplates.delete",
      "datacatalog.tagTemplates.get",
      "datacatalog.tagTemplates.getIamPolicy",
      "datacatalog.tagTemplates.getTag",
      "datacatalog.tagTemplates.update",
      "datacatalog.tagTemplates.use",
      "datacatalog.taxonomies.get",
      "datacatalog.taxonomies.getIamPolicy",
      "datacatalog.taxonomies.list",
      "dataflow.jobs.cancel",
      "dataflow.jobs.create",
      "dataflow.jobs.get",
      "dataflow.jobs.list",
      "dataflow.jobs.updateContents",
      "dataflow.messages.list",
      "dataflow.metrics.get",
      "datafusion.instances.create",
      "datafusion.instances.delete",
      "datafusion.instances.get",
      "datafusion.instances.getIamPolicy",
      "datafusion.instances.list",
      "datafusion.instances.restart",
      "datafusion.instances.update",
      "datafusion.instances.upgrade",
      "datafusion.locations.get",
      "datafusion.locations.list",
      "datafusion.operations.cancel",
      "datafusion.operations.get",
      "datafusion.operations.list",
      "datalabeling.annotateddatasets.delete",
      "datalabeling.annotateddatasets.get",
      "datalabeling.annotateddatasets.label",
      "datalabeling.annotateddatasets.list",
      "datalabeling.annotationspecsets.create",
      "datalabeling.annotationspecsets.delete",
      "datalabeling.annotationspecsets.get",
      "datalabeling.annotationspecsets.list",
      "datalabeling.dataitems.get",
      "datalabeling.dataitems.list",
      "datalabeling.datasets.create",
      "datalabeling.datasets.delete",
      "datalabeling.datasets.export",
      "datalabeling.datasets.get",
      "datalabeling.datasets.import",
      "datalabeling.datasets.list",
      "datalabeling.examples.get",
      "datalabeling.examples.list",
      "datalabeling.instructions.create",
      "datalabeling.instructions.delete",
      "datalabeling.instructions.get",
      "datalabeling.instructions.list",
      "datalabeling.operations.cancel",
      "datalabeling.operations.get",
      "datalabeling.operations.list",
      "dataprep.projects.use",
      "dataproc.agents.create",
      "dataproc.agents.delete",
      "dataproc.agents.get",
      "dataproc.agents.list",
      "dataproc.agents.update",
      "dataproc.autoscalingPolicies.create",
      "dataproc.autoscalingPolicies.delete",
      "dataproc.autoscalingPolicies.get",
      "dataproc.autoscalingPolicies.getIamPolicy",
      "dataproc.autoscalingPolicies.list",
      "dataproc.autoscalingPolicies.update",
      "dataproc.autoscalingPolicies.use",
      "dataproc.clusters.create",
      "dataproc.clusters.delete",
      "dataproc.clusters.get",
      "dataproc.clusters.getIamPolicy",
      "dataproc.clusters.list",
      "dataproc.clusters.update",
      "dataproc.clusters.use",
      "dataproc.jobs.cancel",
      "dataproc.jobs.create",
      "dataproc.jobs.delete",
      "dataproc.jobs.get",
      "dataproc.jobs.getIamPolicy",
      "dataproc.jobs.list",
      "dataproc.jobs.update",
      "dataproc.operations.cancel",
      "dataproc.operations.delete",
      "dataproc.operations.get",
      "dataproc.operations.getIamPolicy",
      "dataproc.operations.list",
      "dataproc.tasks.lease",
      "dataproc.tasks.listInvalidatedLeases",
      "dataproc.tasks.reportStatus",
      "dataproc.workflowTemplates.create",
      "dataproc.workflowTemplates.delete",
      "dataproc.workflowTemplates.get",
      "dataproc.workflowTemplates.getIamPolicy",
      "dataproc.workflowTemplates.instantiate",
      "dataproc.workflowTemplates.instantiateInline",
      "dataproc.workflowTemplates.list",
      "dataproc.workflowTemplates.update",
      "dataprocessing.featurecontrols.get",
      "dataprocessing.featurecontrols.list",
      "datastore.databases.get",
      "datastore.databases.getIamPolicy",
      "datastore.databases.list",
      "datastore.databases.update",
      "datastore.entities.allocateIds",
      "datastore.entities.create",
      "datastore.entities.delete",
      "datastore.entities.get",
      "datastore.entities.list",
      "datastore.entities.update",
      "datastore.indexes.create",
      "datastore.indexes.delete",
      "datastore.indexes.get",
      "datastore.indexes.list",
      "datastore.indexes.update",
      "datastore.namespaces.get",
      "datastore.namespaces.getIamPolicy",
      "datastore.namespaces.list",
      "datastore.statistics.get",
      "datastore.statistics.list",
      "deploymentmanager.compositeTypes.create",
      "deploymentmanager.compositeTypes.delete",
      "deploymentmanager.compositeTypes.get",
      "deploymentmanager.compositeTypes.list",
      "deploymentmanager.compositeTypes.update",
      "deploymentmanager.deployments.cancelPreview",
      "deploymentmanager.deployments.create",
      "deploymentmanager.deployments.delete",
      "deploymentmanager.deployments.get",
      "deploymentmanager.deployments.list",
      "deploymentmanager.deployments.stop",
      "deploymentmanager.deployments.update",
      "deploymentmanager.manifests.get",
      "deploymentmanager.manifests.list",
      "deploymentmanager.operations.get",
      "deploymentmanager.operations.list",
      "deploymentmanager.resources.get",
      "deploymentmanager.resources.list",
      "deploymentmanager.typeProviders.create",
      "deploymentmanager.typeProviders.delete",
      "deploymentmanager.typeProviders.get",
      "deploymentmanager.typeProviders.getType",
      "deploymentmanager.typeProviders.list",
      "deploymentmanager.typeProviders.listTypes",
      "deploymentmanager.typeProviders.update",
      "deploymentmanager.types.create",
      "deploymentmanager.types.delete",
      "deploymentmanager.types.get",
      "deploymentmanager.types.list",
      "deploymentmanager.types.update",
      "dialogflow.agents.create",
      "dialogflow.agents.delete",
      "dialogflow.agents.export",
      "dialogflow.agents.get",
      "dialogflow.agents.import",
      "dialogflow.agents.restore",
      "dialogflow.agents.search",
      "dialogflow.agents.train",
      "dialogflow.agents.update",
      "dialogflow.contexts.create",
      "dialogflow.contexts.delete",
      "dialogflow.contexts.get",
      "dialogflow.contexts.list",
      "dialogflow.contexts.update",
      "dialogflow.documents.create",
      "dialogflow.documents.delete",
      "dialogflow.documents.get",
      "dialogflow.documents.list",
      "dialogflow.entityTypes.create",
      "dialogflow.entityTypes.createEntity",
      "dialogflow.entityTypes.delete",
      "dialogflow.entityTypes.deleteEntity",
      "dialogflow.entityTypes.get",
      "dialogflow.entityTypes.list",
      "dialogflow.entityTypes.update",
      "dialogflow.entityTypes.updateEntity",
      "dialogflow.intents.create",
      "dialogflow.intents.delete",
      "dialogflow.intents.get",
      "dialogflow.intents.list",
      "dialogflow.intents.update",
      "dialogflow.knowledgeBases.create",
      "dialogflow.knowledgeBases.delete",
      "dialogflow.knowledgeBases.get",
      "dialogflow.knowledgeBases.list",
      "dialogflow.operations.get",
      "dialogflow.sessionEntityTypes.create",
      "dialogflow.sessionEntityTypes.delete",
      "dialogflow.sessionEntityTypes.get",
      "dialogflow.sessionEntityTypes.list",
      "dialogflow.sessionEntityTypes.update",
      "dialogflow.sessions.detectIntent",
      "dialogflow.sessions.streamingDetectIntent",
      "dlp.analyzeRiskTemplates.create",
      "dlp.analyzeRiskTemplates.delete",
      "dlp.analyzeRiskTemplates.get",
      "dlp.analyzeRiskTemplates.list",
      "dlp.analyzeRiskTemplates.update",
      "dlp.deidentifyTemplates.create",
      "dlp.deidentifyTemplates.delete",
      "dlp.deidentifyTemplates.get",
      "dlp.deidentifyTemplates.list",
      "dlp.deidentifyTemplates.update",
      "dlp.inspectTemplates.create",
      "dlp.inspectTemplates.delete",
      "dlp.inspectTemplates.get",
      "dlp.inspectTemplates.list",
      "dlp.inspectTemplates.update",
      "dlp.jobTriggers.create",
      "dlp.jobTriggers.delete",
      "dlp.jobTriggers.get",
      "dlp.jobTriggers.list",
      "dlp.jobTriggers.update",
      "dlp.jobs.cancel",
      "dlp.jobs.delete",
      "dlp.storedInfoTypes.create",
      "dlp.storedInfoTypes.delete",
      "dlp.storedInfoTypes.get",
      "dlp.storedInfoTypes.list",
      "dlp.storedInfoTypes.update",
      "dns.changes.create",
      "dns.changes.get",
      "dns.changes.list",
      "dns.dnsKeys.get",
      "dns.dnsKeys.list",
      "dns.managedZoneOperations.get",
      "dns.managedZoneOperations.list",
      "dns.managedZones.create",
      "dns.managedZones.delete",
      "dns.managedZones.get",
      "dns.managedZones.list",
      "dns.managedZones.update",
      "dns.networks.bindPrivateDNSPolicy",
      "dns.networks.bindPrivateDNSZone",
      "dns.networks.targetWithPeeringZone",
      "dns.policies.create",
      "dns.policies.delete",
      "dns.policies.get",
      "dns.policies.list",
      "dns.policies.update",
      "dns.projects.get",
      "dns.resourceRecordSets.create",
      "dns.resourceRecordSets.delete",
      "dns.resourceRecordSets.list",
      "dns.resourceRecordSets.update",
      "endpoints.portals.attachCustomDomain",
      "endpoints.portals.detachCustomDomain",
      "endpoints.portals.listCustomDomains",
      "endpoints.portals.update",
      "errorreporting.applications.list",
      "errorreporting.errorEvents.create",
      "errorreporting.errorEvents.delete",
      "errorreporting.errorEvents.list",
      "errorreporting.groupMetadata.get",
      "errorreporting.groupMetadata.update",
      "errorreporting.groups.list",
      "file.instances.create",
      "file.instances.delete",
      "file.instances.get",
      "file.instances.list",
      "file.instances.restore",
      "file.instances.update",
      "file.locations.get",
      "file.locations.list",
      "file.operations.cancel",
      "file.operations.delete",
      "file.operations.get",
      "file.operations.list",
      "file.snapshots.create",
      "file.snapshots.delete",
      "file.snapshots.get",
      "file.snapshots.list",
      "file.snapshots.update",
      "firebase.billingPlans.get",
      "firebase.clients.create",
      "firebase.clients.delete",
      "firebase.clients.get",
      "firebase.links.list",
      "firebase.projects.get",
      "firebase.projects.update",
      "firebaseabt.experimentresults.get",
      "firebaseabt.experiments.create",
      "firebaseabt.experiments.delete",
      "firebaseabt.experiments.get",
      "firebaseabt.experiments.list",
      "firebaseabt.experiments.update",
      "firebaseabt.projectmetadata.get",
      "firebaseanalytics.resources.googleAnalyticsEdit",
      "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
      "firebaseappdistro.groups.list",
      "firebaseappdistro.groups.update",
      "firebaseappdistro.releases.list",
      "firebaseappdistro.releases.update",
      "firebaseappdistro.testers.list",
      "firebaseappdistro.testers.update",
      "firebaseauth.configs.create",
      "firebaseauth.configs.get",
      "firebaseauth.configs.getHashConfig",
      "firebaseauth.configs.update",
      "firebaseauth.users.create",
      "firebaseauth.users.createSession",
      "firebaseauth.users.delete",
      "firebaseauth.users.get",
      "firebaseauth.users.sendEmail",
      "firebaseauth.users.update",
      "firebasecrash.issues.update",
      "firebasecrash.reports.get",
      "firebasecrashlytics.config.get",
      "firebasecrashlytics.config.update",
      "firebasecrashlytics.data.get",
      "firebasecrashlytics.issues.get",
      "firebasecrashlytics.issues.list",
      "firebasecrashlytics.issues.update",
      "firebasecrashlytics.sessions.get",
      "firebasedatabase.instances.create",
      "firebasedatabase.instances.get",
      "firebasedatabase.instances.list",
      "firebasedatabase.instances.update",
      "firebasedynamiclinks.destinations.list",
      "firebasedynamiclinks.domains.create",
      "firebasedynamiclinks.domains.get",
      "firebasedynamiclinks.domains.list",
      "firebasedynamiclinks.domains.update",
      "firebasedynamiclinks.links.create",
      "firebasedynamiclinks.links.get",
      "firebasedynamiclinks.links.list",
      "firebasedynamiclinks.links.update",
      "firebasedynamiclinks.stats.get",
      "firebaseextensions.configs.list",
      "firebasehosting.sites.create",
      "firebasehosting.sites.delete",
      "firebasehosting.sites.get",
      "firebasehosting.sites.list",
      "firebasehosting.sites.update",
      "firebaseinappmessaging.campaigns.create",
      "firebaseinappmessaging.campaigns.delete",
      "firebaseinappmessaging.campaigns.get",
      "firebaseinappmessaging.campaigns.list",
      "firebaseinappmessaging.campaigns.update",
      "firebaseml.compressionjobs.create",
      "firebaseml.compressionjobs.delete",
      "firebaseml.compressionjobs.get",
      "firebaseml.compressionjobs.list",
      "firebaseml.compressionjobs.start",
      "firebaseml.compressionjobs.update",
      "firebaseml.models.create",
      "firebaseml.models.delete",
      "firebaseml.models.get",
      "firebaseml.models.list",
      "firebaseml.modelversions.create",
      "firebaseml.modelversions.get",
      "firebaseml.modelversions.list",
      "firebaseml.modelversions.update",
      "firebasenotifications.messages.create",
      "firebasenotifications.messages.delete",
      "firebasenotifications.messages.get",
      "firebasenotifications.messages.list",
      "firebasenotifications.messages.update",
      "firebaseperformance.config.create",
      "firebaseperformance.config.delete",
      "firebaseperformance.config.update",
      "firebaseperformance.data.get",
      "firebasepredictions.predictions.create",
      "firebasepredictions.predictions.delete",
      "firebasepredictions.predictions.list",
      "firebasepredictions.predictions.update",
      "firebaserules.releases.create",
      "firebaserules.releases.delete",
      "firebaserules.releases.get",
      "firebaserules.releases.getExecutable",
      "firebaserules.releases.list",
      "firebaserules.releases.update",
      "firebaserules.rulesets.create",
      "firebaserules.rulesets.delete",
      "firebaserules.rulesets.get",
      "firebaserules.rulesets.list",
      "firebaserules.rulesets.test",
      "gameservices.gameServerClusters.create",
      "gameservices.gameServerClusters.delete",
      "gameservices.gameServerClusters.get",
      "gameservices.gameServerClusters.list",
      "gameservices.gameServerClusters.update",
      "gameservices.gameServerConfigs.create",
      "gameservices.gameServerConfigs.delete",
      "gameservices.gameServerConfigs.get",
      "gameservices.gameServerConfigs.list",
      "gameservices.gameServerDeployments.create",
      "gameservices.gameServerDeployments.delete",
      "gameservices.gameServerDeployments.get",
      "gameservices.gameServerDeployments.list",
      "gameservices.gameServerDeployments.rollout",
      "gameservices.gameServerDeployments.update",
      "gameservices.locations.get",
      "gameservices.locations.list",
      "gameservices.operations.cancel",
      "gameservices.operations.delete",
      "gameservices.operations.get",
      "gameservices.operations.list",
      "gameservices.realms.create",
      "gameservices.realms.delete",
      "gameservices.realms.get",
      "gameservices.realms.list",
      "gameservices.realms.update",
      "genomics.datasets.create",
      "genomics.datasets.delete",
      "genomics.datasets.get",
      "genomics.datasets.list",
      "genomics.datasets.update",
      "genomics.operations.cancel",
      "genomics.operations.create",
      "genomics.operations.get",
      "genomics.operations.list",
      "gkehub.locations.get",
      "gkehub.locations.list",
      "gkehub.memberships.create",
      "gkehub.memberships.delete",
      "gkehub.memberships.generateConnectManifest",
      "gkehub.memberships.get",
      "gkehub.memberships.getIamPolicy",
      "gkehub.memberships.list",
      "gkehub.memberships.update",
      "gkehub.operations.cancel",
      "gkehub.operations.get",
      "gkehub.operations.list",
      "healthcare.datasets.create",
      "healthcare.datasets.deidentify",
      "healthcare.datasets.delete",
      "healthcare.datasets.get",
      "healthcare.datasets.getIamPolicy",
      "healthcare.datasets.list",
      "healthcare.datasets.update",
      "healthcare.dicomStores.create",
      "healthcare.dicomStores.delete",
      "healthcare.dicomStores.dicomWebDelete",
      "healthcare.dicomStores.dicomWebRead",
      "healthcare.dicomStores.dicomWebWrite",
      "healthcare.dicomStores.export",
      "healthcare.dicomStores.get",
      "healthcare.dicomStores.getIamPolicy",
      "healthcare.dicomStores.import",
      "healthcare.dicomStores.list",
      "healthcare.dicomStores.update",
      "healthcare.fhirResources.create",
      "healthcare.fhirResources.delete",
      "healthcare.fhirResources.get",
      "healthcare.fhirResources.patch",
      "healthcare.fhirResources.purge",
      "healthcare.fhirResources.update",
      "healthcare.fhirStores.create",
      "healthcare.fhirStores.delete",
      "healthcare.fhirStores.export",
      "healthcare.fhirStores.get",
      "healthcare.fhirStores.getIamPolicy",
      "healthcare.fhirStores.import",
      "healthcare.fhirStores.list",
      "healthcare.fhirStores.searchResources",
      "healthcare.fhirStores.update",
      "healthcare.hl7V2Messages.create",
      "healthcare.hl7V2Messages.delete",
      "healthcare.hl7V2Messages.get",
      "healthcare.hl7V2Messages.ingest",
      "healthcare.hl7V2Messages.list",
      "healthcare.hl7V2Messages.update",
      "healthcare.hl7V2Stores.create",
      "healthcare.hl7V2Stores.delete",
      "healthcare.hl7V2Stores.get",
      "healthcare.hl7V2Stores.getIamPolicy",
      "healthcare.hl7V2Stores.list",
      "healthcare.hl7V2Stores.update",
      "healthcare.operations.cancel",
      "healthcare.operations.get",
      "healthcare.operations.list",
      "iam.roles.get",
      "iam.roles.list",
      "iam.serviceAccountKeys.create",
      "iam.serviceAccountKeys.delete",
      "iam.serviceAccountKeys.get",
      "iam.serviceAccountKeys.list",
      "iam.serviceAccounts.actAs",
      "iam.serviceAccounts.create",
      "iam.serviceAccounts.delete",
      "iam.serviceAccounts.get",
      "iam.serviceAccounts.getIamPolicy",
      "iam.serviceAccounts.list",
      "iam.serviceAccounts.update",
      "iap.projects.getSettings",
      "iap.projects.updateSettings",
      "iap.web.getSettings",
      "iap.web.updateSettings",
      "iap.webServiceVersions.getSettings",
      "iap.webServiceVersions.updateSettings",
      "iap.webServices.getSettings",
      "iap.webServices.updateSettings",
      "iap.webTypes.getSettings",
      "iap.webTypes.updateSettings",
      "lifesciences.operations.cancel",
      "lifesciences.operations.get",
      "lifesciences.operations.list",
      "lifesciences.workflows.run",
      "logging.cmekSettings.get",
      "logging.cmekSettings.update",
      "logging.exclusions.get",
      "logging.exclusions.list",
      "logging.logEntries.create",
      "logging.logEntries.list",
      "logging.logMetrics.create",
      "logging.logMetrics.delete",
      "logging.logMetrics.get",
      "logging.logMetrics.list",
      "logging.logMetrics.update",
      "logging.logServiceIndexes.list",
      "logging.logServices.list",
      "logging.logs.delete",
      "logging.logs.list",
      "logging.sinks.get",
      "logging.sinks.list",
      "logging.usage.get",
      "managedidentities.domains.attachTrust",
      "managedidentities.domains.create",
      "managedidentities.domains.delete",
      "managedidentities.domains.detachTrust",
      "managedidentities.domains.get",
      "managedidentities.domains.getIamPolicy",
      "managedidentities.domains.list",
      "managedidentities.domains.reconfigureTrust",
      "managedidentities.domains.resetpassword",
      "managedidentities.domains.update",
      "managedidentities.domains.validateTrust",
      "managedidentities.locations.get",
      "managedidentities.locations.list",
      "managedidentities.operations.cancel",
      "managedidentities.operations.delete",
      "managedidentities.operations.get",
      "managedidentities.operations.list",
      "ml.jobs.cancel",
      "ml.jobs.create",
      "ml.jobs.get",
      "ml.jobs.getIamPolicy",
      "ml.jobs.list",
      "ml.jobs.update",
      "ml.locations.get",
      "ml.locations.list",
      "ml.models.create",
      "ml.models.delete",
      "ml.models.get",
      "ml.models.getIamPolicy",
      "ml.models.list",
      "ml.models.predict",
      "ml.models.update",
      "ml.operations.cancel",
      "ml.operations.get",
      "ml.operations.list",
      "ml.projects.getConfig",
      "ml.versions.create",
      "ml.versions.delete",
      "ml.versions.get",
      "ml.versions.list",
      "ml.versions.predict",
      "ml.versions.update",
      "monitoring.alertPolicies.create",
      "monitoring.alertPolicies.delete",
      "monitoring.alertPolicies.get",
      "monitoring.alertPolicies.list",
      "monitoring.alertPolicies.update",
      "monitoring.dashboards.create",
      "monitoring.dashboards.delete",
      "monitoring.dashboards.get",
      "monitoring.dashboards.list",
      "monitoring.dashboards.update",
      "monitoring.groups.create",
      "monitoring.groups.delete",
      "monitoring.groups.get",
      "monitoring.groups.list",
      "monitoring.groups.update",
      "monitoring.metricDescriptors.create",
      "monitoring.metricDescriptors.delete",
      "monitoring.metricDescriptors.get",
      "monitoring.metricDescriptors.list",
      "monitoring.monitoredResourceDescriptors.get",
      "monitoring.monitoredResourceDescriptors.list",
      "monitoring.notificationChannelDescriptors.get",
      "monitoring.notificationChannelDescriptors.list",
      "monitoring.notificationChannels.create",
      "monitoring.notificationChannels.delete",
      "monitoring.notificationChannels.get",
      "monitoring.notificationChannels.list",
      "monitoring.notificationChannels.sendVerificationCode",
      "monitoring.notificationChannels.update",
      "monitoring.notificationChannels.verify",
      "monitoring.publicWidgets.create",
      "monitoring.publicWidgets.delete",
      "monitoring.publicWidgets.get",
      "monitoring.publicWidgets.list",
      "monitoring.publicWidgets.update",
      "monitoring.timeSeries.create",
      "monitoring.timeSeries.list",
      "monitoring.uptimeCheckConfigs.create",
      "monitoring.uptimeCheckConfigs.delete",
      "monitoring.uptimeCheckConfigs.get",
      "monitoring.uptimeCheckConfigs.list",
      "monitoring.uptimeCheckConfigs.update",
      "netappcloudvolumes.activeDirectories.create",
      "netappcloudvolumes.activeDirectories.delete",
      "netappcloudvolumes.activeDirectories.get",
      "netappcloudvolumes.activeDirectories.list",
      "netappcloudvolumes.activeDirectories.update",
      "netappcloudvolumes.ipRanges.list",
      "netappcloudvolumes.jobs.get",
      "netappcloudvolumes.jobs.list",
      "netappcloudvolumes.regions.list",
      "netappcloudvolumes.serviceLevels.list",
      "netappcloudvolumes.snapshots.create",
      "netappcloudvolumes.snapshots.delete",
      "netappcloudvolumes.snapshots.get",
      "netappcloudvolumes.snapshots.list",
      "netappcloudvolumes.snapshots.update",
      "netappcloudvolumes.volumes.create",
      "netappcloudvolumes.volumes.delete",
      "netappcloudvolumes.volumes.get",
      "netappcloudvolumes.volumes.list",
      "netappcloudvolumes.volumes.update",
      "networkmanagement.connectivitytests.create",
      "networkmanagement.connectivitytests.delete",
      "networkmanagement.connectivitytests.get",
      "networkmanagement.connectivitytests.getIamPolicy",
      "networkmanagement.connectivitytests.list",
      "networkmanagement.connectivitytests.rerun",
      "networkmanagement.connectivitytests.update",
      "networkmanagement.locations.get",
      "networkmanagement.locations.list",
      "networkmanagement.operations.get",
      "networkmanagement.operations.list",
      "notebooks.environments.create",
      "notebooks.environments.delete",
      "notebooks.environments.get",
      "notebooks.environments.getIamPolicy",
      "notebooks.environments.list",
      "notebooks.instances.create",
      "notebooks.instances.delete",
      "notebooks.instances.get",
      "notebooks.instances.getIamPolicy",
      "notebooks.instances.list",
      "notebooks.instances.update",
      "notebooks.locations.get",
      "notebooks.locations.list",
      "notebooks.operations.cancel",
      "notebooks.operations.delete",
      "notebooks.operations.get",
      "notebooks.operations.list",
      "opsconfigmonitoring.resourceMetadata.write",
      "orgpolicy.policy.get",
      "proximitybeacon.attachments.create",
      "proximitybeacon.attachments.delete",
      "proximitybeacon.attachments.get",
      "proximitybeacon.attachments.list",
      "proximitybeacon.beacons.attach",
      "proximitybeacon.beacons.create",
      "proximitybeacon.beacons.get",
      "proximitybeacon.beacons.list",
      "proximitybeacon.beacons.update",
      "proximitybeacon.namespaces.create",
      "proximitybeacon.namespaces.delete",
      "proximitybeacon.namespaces.get",
      "proximitybeacon.namespaces.list",
      "proximitybeacon.namespaces.update",
      "pubsub.snapshots.create",
      "pubsub.snapshots.delete",
      "pubsub.snapshots.get",
      "pubsub.snapshots.list",
      "pubsub.snapshots.seek",
      "pubsub.snapshots.update",
      "pubsub.subscriptions.consume",
      "pubsub.subscriptions.create",
      "pubsub.subscriptions.delete",
      "pubsub.subscriptions.get",
      "pubsub.subscriptions.list",
      "pubsub.subscriptions.update",
      "pubsub.topics.attachSubscription",
      "pubsub.topics.create",
      "pubsub.topics.delete",
      "pubsub.topics.get",
      "pubsub.topics.list",
      "pubsub.topics.publish",
      "pubsub.topics.update",
      "pubsub.topics.updateTag",
      "recommender.computeInstanceGroupManagerMachineTypeRecommendations.get",
      "recommender.computeInstanceGroupManagerMachineTypeRecommendations.list",
      "recommender.computeInstanceGroupManagerMachineTypeRecommendations.update",
      "recommender.computeInstanceMachineTypeRecommendations.get",
      "recommender.computeInstanceMachineTypeRecommendations.list",
      "recommender.computeInstanceMachineTypeRecommendations.update",
      "recommender.iamPolicyRecommendations.get",
      "recommender.iamPolicyRecommendations.list",
      "recommender.iamPolicyRecommendations.update",
      "recommender.locations.get",
      "recommender.locations.list",
      "redis.instances.create",
      "redis.instances.delete",
      "redis.instances.export",
      "redis.instances.get",
      "redis.instances.import",
      "redis.instances.list",
      "redis.instances.update",
      "redis.locations.get",
      "redis.locations.list",
      "redis.operations.cancel",
      "redis.operations.delete",
      "redis.operations.get",
      "redis.operations.list",
      "redisenterprisecloud.databases.create",
      "redisenterprisecloud.databases.delete",
      "redisenterprisecloud.databases.get",
      "redisenterprisecloud.databases.list",
      "redisenterprisecloud.databases.update",
      "redisenterprisecloud.subscriptions.create",
      "redisenterprisecloud.subscriptions.delete",
      "redisenterprisecloud.subscriptions.get",
      "redisenterprisecloud.subscriptions.list",
      "redisenterprisecloud.subscriptions.update",
      "remotebuildexecution.actions.create",
      "remotebuildexecution.actions.delete",
      "remotebuildexecution.actions.get",
      "remotebuildexecution.actions.update",
      "remotebuildexecution.blobs.create",
      "remotebuildexecution.blobs.get",
      "remotebuildexecution.botsessions.create",
      "remotebuildexecution.botsessions.update",
      "remotebuildexecution.instances.create",
      "remotebuildexecution.instances.get",
      "remotebuildexecution.instances.list",
      "remotebuildexecution.logstreams.create",
      "remotebuildexecution.logstreams.get",
      "remotebuildexecution.logstreams.update",
      "remotebuildexecution.workerpools.create",
      "remotebuildexecution.workerpools.get",
      "remotebuildexecution.workerpools.list",
      "remotebuildexecution.workerpools.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "resourcemanager.projects.move",
      "resourcemanager.projects.update",
      "run.configurations.get",
      "run.configurations.list",
      "run.locations.list",
      "run.revisions.delete",
      "run.revisions.get",
      "run.revisions.list",
      "run.routes.get",
      "run.routes.invoke",
      "run.routes.list",
      "run.services.create",
      "run.services.delete",
      "run.services.get",
      "run.services.getIamPolicy",
      "run.services.list",
      "run.services.update",
      "runtimeconfig.configs.create",
      "runtimeconfig.configs.delete",
      "runtimeconfig.configs.get",
      "runtimeconfig.configs.list",
      "runtimeconfig.configs.update",
      "runtimeconfig.operations.get",
      "runtimeconfig.operations.list",
      "runtimeconfig.variables.create",
      "runtimeconfig.variables.delete",
      "runtimeconfig.variables.get",
      "runtimeconfig.variables.list",
      "runtimeconfig.variables.update",
      "runtimeconfig.variables.watch",
      "runtimeconfig.waiters.create",
      "runtimeconfig.waiters.delete",
      "runtimeconfig.waiters.get",
      "runtimeconfig.waiters.list",
      "runtimeconfig.waiters.update",
      "secretmanager.locations.get",
      "secretmanager.locations.list",
      "secretmanager.secrets.create",
      "secretmanager.secrets.delete",
      "secretmanager.secrets.get",
      "secretmanager.secrets.getIamPolicy",
      "secretmanager.secrets.list",
      "secretmanager.secrets.update",
      "secretmanager.versions.add",
      "secretmanager.versions.destroy",
      "secretmanager.versions.disable",
      "secretmanager.versions.enable",
      "secretmanager.versions.get",
      "secretmanager.versions.list",
      "securitycenter.assets.group",
      "securitycenter.assets.list",
      "securitycenter.assets.listAssetPropertyNames",
      "securitycenter.assets.runDiscovery",
      "securitycenter.assetsecuritymarks.update",
      "securitycenter.findings.group",
      "securitycenter.findings.list",
      "securitycenter.findings.listFindingPropertyNames",
      "securitycenter.findings.setState",
      "securitycenter.findings.update",
      "securitycenter.findingsecuritymarks.update",
      "securitycenter.notificationconfig.create",
      "securitycenter.notificationconfig.delete",
      "securitycenter.notificationconfig.get",
      "securitycenter.notificationconfig.list",
      "securitycenter.notificationconfig.update",
      "securitycenter.organizationsettings.get",
      "securitycenter.organizationsettings.update",
      "securitycenter.sources.get",
      "securitycenter.sources.getIamPolicy",
      "securitycenter.sources.list",
      "securitycenter.sources.update",
      "servicebroker.bindingoperations.get",
      "servicebroker.bindingoperations.list",
      "servicebroker.bindings.create",
      "servicebroker.bindings.delete",
      "servicebroker.bindings.get",
      "servicebroker.bindings.getIamPolicy",
      "servicebroker.bindings.list",
      "servicebroker.catalogs.create",
      "servicebroker.catalogs.delete",
      "servicebroker.catalogs.get",
      "servicebroker.catalogs.getIamPolicy",
      "servicebroker.catalogs.list",
      "servicebroker.instanceoperations.get",
      "servicebroker.instanceoperations.list",
      "servicebroker.instances.create",
      "servicebroker.instances.delete",
      "servicebroker.instances.get",
      "servicebroker.instances.getIamPolicy",
      "servicebroker.instances.list",
      "servicebroker.instances.update",
      "serviceconsumermanagement.consumers.get",
      "serviceconsumermanagement.quota.get",
      "serviceconsumermanagement.quota.update",
      "serviceconsumermanagement.tenancyu.addResource",
      "serviceconsumermanagement.tenancyu.create",
      "serviceconsumermanagement.tenancyu.delete",
      "serviceconsumermanagement.tenancyu.list",
      "serviceconsumermanagement.tenancyu.removeResource",
      "servicemanagement.consumerSettings.get",
      "servicemanagement.consumerSettings.list",
      "servicemanagement.consumerSettings.update",
      "servicemanagement.services.bind",
      "servicemanagement.services.check",
      "servicemanagement.services.create",
      "servicemanagement.services.delete",
      "servicemanagement.services.get",
      "servicemanagement.services.list",
      "servicemanagement.services.quota",
      "servicemanagement.services.report",
      "servicemanagement.services.update",
      "servicenetworking.operations.cancel",
      "servicenetworking.operations.delete",
      "servicenetworking.operations.get",
      "servicenetworking.operations.list",
      "servicenetworking.services.addSubnetwork",
      "servicenetworking.services.get",
      "serviceusage.apiKeys.create",
      "serviceusage.apiKeys.delete",
      "serviceusage.apiKeys.get",
      "serviceusage.apiKeys.getProjectForKey",
      "serviceusage.apiKeys.list",
      "serviceusage.apiKeys.regenerate",
      "serviceusage.apiKeys.revert",
      "serviceusage.apiKeys.update",
      "serviceusage.operations.cancel",
      "serviceusage.operations.delete",
      "serviceusage.operations.get",
      "serviceusage.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.quotas.update",
      "serviceusage.services.disable",
      "serviceusage.services.enable",
      "serviceusage.services.get",
      "serviceusage.services.list",
      "serviceusage.services.use",
      "source.repos.get",
      "source.repos.getIamPolicy",
      "source.repos.list",
      "source.repos.update",
      "spanner.databaseOperations.cancel",
      "spanner.databaseOperations.delete",
      "spanner.databaseOperations.get",
      "spanner.databaseOperations.list",
      "spanner.databases.beginOrRollbackReadWriteTransaction",
      "spanner.databases.beginReadOnlyTransaction",
      "spanner.databases.create",
      "spanner.databases.drop",
      "spanner.databases.get",
      "spanner.databases.getDdl",
      "spanner.databases.getIamPolicy",
      "spanner.databases.list",
      "spanner.databases.read",
      "spanner.databases.select",
      "spanner.databases.update",
      "spanner.databases.updateDdl",
      "spanner.databases.write",
      "spanner.instanceConfigs.get",
      "spanner.instanceConfigs.list",
      "spanner.instanceOperations.cancel",
      "spanner.instanceOperations.delete",
      "spanner.instanceOperations.get",
      "spanner.instanceOperations.list",
      "spanner.instances.create",
      "spanner.instances.delete",
      "spanner.instances.get",
      "spanner.instances.getIamPolicy",
      "spanner.instances.list",
      "spanner.instances.update",
      "spanner.sessions.create",
      "spanner.sessions.delete",
      "spanner.sessions.get",
      "spanner.sessions.list",
      "stackdriver.projects.get",
      "stackdriver.resourceMetadata.write",
      "storage.buckets.create",
      "storage.buckets.delete",
      "storage.buckets.list",
      "storage.hmacKeys.create",
      "storage.hmacKeys.delete",
      "storage.hmacKeys.get",
      "storage.hmacKeys.list",
      "storage.hmacKeys.update",
      "storagetransfer.jobs.create",
      "storagetransfer.jobs.delete",
      "storagetransfer.jobs.get",
      "storagetransfer.jobs.list",
      "storagetransfer.jobs.update",
      "storagetransfer.operations.cancel",
      "storagetransfer.operations.get",
      "storagetransfer.operations.list",
      "storagetransfer.operations.pause",
      "storagetransfer.operations.resume",
      "storagetransfer.projects.getServiceAccount",
      "subscribewithgoogledeveloper.tools.get",
      "tpu.acceleratortypes.get",
      "tpu.acceleratortypes.list",
      "tpu.locations.get",
      "tpu.locations.list",
      "tpu.nodes.create",
      "tpu.nodes.delete",
      "tpu.nodes.get",
      "tpu.nodes.list",
      "tpu.nodes.reimage",
      "tpu.nodes.reset",
      "tpu.nodes.start",
      "tpu.nodes.stop",
      "tpu.operations.get",
      "tpu.operations.list",
      "tpu.tensorflowversions.get",
      "tpu.tensorflowversions.list",
      "vmmigration.deployments.create",
      "vmmigration.deployments.get",
      "vmmigration.deployments.list",
      "vpcaccess.connectors.create",
      "vpcaccess.connectors.delete",
      "vpcaccess.connectors.get",
      "vpcaccess.connectors.list",
      "vpcaccess.connectors.use",
      "vpcaccess.locations.list",
      "vpcaccess.operations.get",
      "vpcaccess.operations.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/endpoints.portalAdmin": {
    "name": "roles/endpoints.portalAdmin",
    "title": "Endpoints Portal Admin",
    "description": "Full access to Endpoints Portal resources",
    "includedPermissions": [
      "endpoints.portals.attachCustomDomain",
      "endpoints.portals.detachCustomDomain",
      "endpoints.portals.listCustomDomains",
      "endpoints.portals.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "servicemanagement.services.get"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/errorreporting.admin": {
    "name": "roles/errorreporting.admin",
    "title": "Error Reporting Admin",
    "description": "Administrative access to Error Reporting.",
    "includedPermissions": [
      "cloudnotifications.activities.list",
      "errorreporting.applications.list",
      "errorreporting.errorEvents.create",
      "errorreporting.errorEvents.delete",
      "errorreporting.errorEvents.list",
      "errorreporting.groupMetadata.get",
      "errorreporting.groupMetadata.update",
      "errorreporting.groups.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/errorreporting.user": {
    "name": "roles/errorreporting.user",
    "title": "Error Reporting User",
    "description": "User access to Error Reporting. Can list all errors and update their metadata. Can delete error events.",
    "includedPermissions": [
      "cloudnotifications.activities.list",
      "errorreporting.applications.list",
      "errorreporting.errorEvents.delete",
      "errorreporting.errorEvents.list",
      "errorreporting.groupMetadata.get",
      "errorreporting.groupMetadata.update",
      "errorreporting.groups.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/errorreporting.viewer": {
    "name": "roles/errorreporting.viewer",
    "title": "Error Reporting Viewer",
    "description": "Read-only access to all Error Reporting data.",
    "includedPermissions": [
      "cloudnotifications.activities.list",
      "errorreporting.applications.list",
      "errorreporting.errorEvents.list",
      "errorreporting.groupMetadata.get",
      "errorreporting.groups.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/errorreporting.writer": {
    "name": "roles/errorreporting.writer",
    "title": "Errors Writer",
    "description": "Can send error events to Error Reporting. Intended for service accounts.",
    "includedPermissions": [
      "errorreporting.errorEvents.create"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/file.editor": {
    "name": "roles/file.editor",
    "title": "Cloud Filestore Editor",
    "description": "Read-write access to Filestore instances and related resources.",
    "includedPermissions": [
      "file.instances.create",
      "file.instances.delete",
      "file.instances.get",
      "file.instances.list",
      "file.instances.restore",
      "file.instances.update",
      "file.locations.get",
      "file.locations.list",
      "file.operations.cancel",
      "file.operations.delete",
      "file.operations.get",
      "file.operations.list",
      "file.snapshots.create",
      "file.snapshots.delete",
      "file.snapshots.get",
      "file.snapshots.list",
      "file.snapshots.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/file.viewer": {
    "name": "roles/file.viewer",
    "title": "Cloud Filestore Viewer",
    "description": "Read-only access to Filestore instances and related resources.",
    "includedPermissions": [
      "file.instances.get",
      "file.instances.list",
      "file.locations.get",
      "file.locations.list",
      "file.operations.get",
      "file.operations.list",
      "file.snapshots.get",
      "file.snapshots.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/firebase.admin": {
    "name": "roles/firebase.admin",
    "title": "Firebase Admin",
    "description": "Full access to Firebase products.",
    "includedPermissions": [
      "appengine.applications.get",
      "automl.annotationSpecs.create",
      "automl.annotationSpecs.delete",
      "automl.annotationSpecs.get",
      "automl.annotationSpecs.list",
      "automl.annotationSpecs.update",
      "automl.annotations.approve",
      "automl.annotations.create",
      "automl.annotations.list",
      "automl.annotations.manipulate",
      "automl.annotations.reject",
      "automl.columnSpecs.get",
      "automl.columnSpecs.list",
      "automl.columnSpecs.update",
      "automl.datasets.create",
      "automl.datasets.delete",
      "automl.datasets.export",
      "automl.datasets.get",
      "automl.datasets.getIamPolicy",
      "automl.datasets.import",
      "automl.datasets.list",
      "automl.datasets.setIamPolicy",
      "automl.datasets.update",
      "automl.examples.delete",
      "automl.examples.get",
      "automl.examples.list",
      "automl.humanAnnotationTasks.create",
      "automl.humanAnnotationTasks.delete",
      "automl.humanAnnotationTasks.get",
      "automl.humanAnnotationTasks.list",
      "automl.locations.get",
      "automl.locations.getIamPolicy",
      "automl.locations.list",
      "automl.locations.setIamPolicy",
      "automl.modelEvaluations.create",
      "automl.modelEvaluations.get",
      "automl.modelEvaluations.list",
      "automl.models.create",
      "automl.models.delete",
      "automl.models.deploy",
      "automl.models.export",
      "automl.models.get",
      "automl.models.getIamPolicy",
      "automl.models.list",
      "automl.models.predict",
      "automl.models.setIamPolicy",
      "automl.models.undeploy",
      "automl.operations.cancel",
      "automl.operations.delete",
      "automl.operations.get",
      "automl.operations.list",
      "automl.tableSpecs.get",
      "automl.tableSpecs.list",
      "automl.tableSpecs.update",
      "clientauthconfig.brands.get",
      "clientauthconfig.brands.list",
      "clientauthconfig.brands.update",
      "clientauthconfig.clients.create",
      "clientauthconfig.clients.delete",
      "clientauthconfig.clients.get",
      "clientauthconfig.clients.list",
      "clientauthconfig.clients.update",
      "cloudconfig.configs.get",
      "cloudconfig.configs.update",
      "cloudfunctions.functions.call",
      "cloudfunctions.functions.create",
      "cloudfunctions.functions.delete",
      "cloudfunctions.functions.get",
      "cloudfunctions.functions.getIamPolicy",
      "cloudfunctions.functions.invoke",
      "cloudfunctions.functions.list",
      "cloudfunctions.functions.setIamPolicy",
      "cloudfunctions.functions.sourceCodeGet",
      "cloudfunctions.functions.sourceCodeSet",
      "cloudfunctions.functions.update",
      "cloudfunctions.locations.list",
      "cloudfunctions.operations.get",
      "cloudfunctions.operations.list",
      "cloudmessaging.messages.create",
      "cloudnotifications.activities.list",
      "cloudtestservice.environmentcatalog.get",
      "cloudtestservice.matrices.create",
      "cloudtestservice.matrices.get",
      "cloudtestservice.matrices.update",
      "cloudtoolresults.executions.create",
      "cloudtoolresults.executions.get",
      "cloudtoolresults.executions.list",
      "cloudtoolresults.executions.update",
      "cloudtoolresults.histories.create",
      "cloudtoolresults.histories.get",
      "cloudtoolresults.histories.list",
      "cloudtoolresults.settings.create",
      "cloudtoolresults.settings.get",
      "cloudtoolresults.settings.update",
      "cloudtoolresults.steps.create",
      "cloudtoolresults.steps.get",
      "cloudtoolresults.steps.list",
      "cloudtoolresults.steps.update",
      "datastore.databases.create",
      "datastore.databases.delete",
      "datastore.databases.export",
      "datastore.databases.get",
      "datastore.databases.getIamPolicy",
      "datastore.databases.import",
      "datastore.databases.list",
      "datastore.databases.setIamPolicy",
      "datastore.databases.update",
      "datastore.entities.allocateIds",
      "datastore.entities.create",
      "datastore.entities.delete",
      "datastore.entities.get",
      "datastore.entities.list",
      "datastore.entities.update",
      "datastore.indexes.create",
      "datastore.indexes.delete",
      "datastore.indexes.get",
      "datastore.indexes.list",
      "datastore.indexes.update",
      "datastore.locations.get",
      "datastore.locations.list",
      "datastore.namespaces.get",
      "datastore.namespaces.getIamPolicy",
      "datastore.namespaces.list",
      "datastore.namespaces.setIamPolicy",
      "datastore.operations.cancel",
      "datastore.operations.delete",
      "datastore.operations.get",
      "datastore.operations.list",
      "datastore.statistics.get",
      "datastore.statistics.list",
      "errorreporting.groups.list",
      "firebase.billingPlans.get",
      "firebase.billingPlans.update",
      "firebase.clients.create",
      "firebase.clients.delete",
      "firebase.clients.get",
      "firebase.links.create",
      "firebase.links.delete",
      "firebase.links.list",
      "firebase.links.update",
      "firebase.projects.delete",
      "firebase.projects.get",
      "firebase.projects.update",
      "firebaseabt.experimentresults.get",
      "firebaseabt.experiments.create",
      "firebaseabt.experiments.delete",
      "firebaseabt.experiments.get",
      "firebaseabt.experiments.list",
      "firebaseabt.experiments.update",
      "firebaseabt.projectmetadata.get",
      "firebaseanalytics.resources.googleAnalyticsEdit",
      "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
      "firebaseappdistro.groups.list",
      "firebaseappdistro.groups.update",
      "firebaseappdistro.releases.list",
      "firebaseappdistro.releases.update",
      "firebaseappdistro.testers.list",
      "firebaseappdistro.testers.update",
      "firebaseauth.configs.create",
      "firebaseauth.configs.get",
      "firebaseauth.configs.getHashConfig",
      "firebaseauth.configs.update",
      "firebaseauth.users.create",
      "firebaseauth.users.createSession",
      "firebaseauth.users.delete",
      "firebaseauth.users.get",
      "firebaseauth.users.sendEmail",
      "firebaseauth.users.update",
      "firebasecrash.issues.update",
      "firebasecrash.reports.get",
      "firebasecrashlytics.config.get",
      "firebasecrashlytics.config.update",
      "firebasecrashlytics.data.get",
      "firebasecrashlytics.issues.get",
      "firebasecrashlytics.issues.list",
      "firebasecrashlytics.issues.update",
      "firebasecrashlytics.sessions.get",
      "firebasedatabase.instances.create",
      "firebasedatabase.instances.get",
      "firebasedatabase.instances.list",
      "firebasedatabase.instances.update",
      "firebasedynamiclinks.destinations.list",
      "firebasedynamiclinks.destinations.update",
      "firebasedynamiclinks.domains.create",
      "firebasedynamiclinks.domains.delete",
      "firebasedynamiclinks.domains.get",
      "firebasedynamiclinks.domains.list",
      "firebasedynamiclinks.domains.update",
      "firebasedynamiclinks.links.create",
      "firebasedynamiclinks.links.get",
      "firebasedynamiclinks.links.list",
      "firebasedynamiclinks.links.update",
      "firebasedynamiclinks.stats.get",
      "firebaseextensions.configs.create",
      "firebaseextensions.configs.delete",
      "firebaseextensions.configs.list",
      "firebaseextensions.configs.update",
      "firebasehosting.sites.create",
      "firebasehosting.sites.delete",
      "firebasehosting.sites.get",
      "firebasehosting.sites.list",
      "firebasehosting.sites.update",
      "firebaseinappmessaging.campaigns.create",
      "firebaseinappmessaging.campaigns.delete",
      "firebaseinappmessaging.campaigns.get",
      "firebaseinappmessaging.campaigns.list",
      "firebaseinappmessaging.campaigns.update",
      "firebaseml.compressionjobs.create",
      "firebaseml.compressionjobs.delete",
      "firebaseml.compressionjobs.get",
      "firebaseml.compressionjobs.list",
      "firebaseml.compressionjobs.start",
      "firebaseml.compressionjobs.update",
      "firebaseml.models.create",
      "firebaseml.models.delete",
      "firebaseml.models.get",
      "firebaseml.models.list",
      "firebaseml.modelversions.create",
      "firebaseml.modelversions.get",
      "firebaseml.modelversions.list",
      "firebaseml.modelversions.update",
      "firebasenotifications.messages.create",
      "firebasenotifications.messages.delete",
      "firebasenotifications.messages.get",
      "firebasenotifications.messages.list",
      "firebasenotifications.messages.update",
      "firebaseperformance.config.create",
      "firebaseperformance.config.delete",
      "firebaseperformance.config.update",
      "firebaseperformance.data.get",
      "firebasepredictions.predictions.create",
      "firebasepredictions.predictions.delete",
      "firebasepredictions.predictions.list",
      "firebasepredictions.predictions.update",
      "firebaserules.releases.create",
      "firebaserules.releases.delete",
      "firebaserules.releases.get",
      "firebaserules.releases.getExecutable",
      "firebaserules.releases.list",
      "firebaserules.releases.update",
      "firebaserules.rulesets.create",
      "firebaserules.rulesets.delete",
      "firebaserules.rulesets.get",
      "firebaserules.rulesets.list",
      "firebaserules.rulesets.test",
      "logging.logEntries.list",
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "runtimeconfig.configs.create",
      "runtimeconfig.configs.delete",
      "runtimeconfig.configs.get",
      "runtimeconfig.configs.list",
      "runtimeconfig.configs.update",
      "runtimeconfig.operations.get",
      "runtimeconfig.operations.list",
      "runtimeconfig.variables.create",
      "runtimeconfig.variables.delete",
      "runtimeconfig.variables.get",
      "runtimeconfig.variables.list",
      "runtimeconfig.variables.update",
      "runtimeconfig.variables.watch",
      "runtimeconfig.waiters.create",
      "runtimeconfig.waiters.delete",
      "runtimeconfig.waiters.get",
      "runtimeconfig.waiters.list",
      "runtimeconfig.waiters.update",
      "serviceusage.apiKeys.get",
      "serviceusage.apiKeys.getProjectForKey",
      "serviceusage.apiKeys.list",
      "serviceusage.operations.get",
      "serviceusage.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list",
      "storage.buckets.create",
      "storage.buckets.delete",
      "storage.buckets.get",
      "storage.buckets.getIamPolicy",
      "storage.buckets.list",
      "storage.buckets.setIamPolicy",
      "storage.buckets.update",
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.get",
      "storage.objects.getIamPolicy",
      "storage.objects.list",
      "storage.objects.setIamPolicy",
      "storage.objects.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebase.analyticsAdmin": {
    "name": "roles/firebase.analyticsAdmin",
    "title": "Firebase Analytics Admin",
    "description": "Full access to Google Analytics for Firebase.",
    "includedPermissions": [
      "cloudnotifications.activities.list",
      "firebase.billingPlans.get",
      "firebase.clients.get",
      "firebase.links.list",
      "firebase.projects.get",
      "firebaseanalytics.resources.googleAnalyticsEdit",
      "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
      "firebaseextensions.configs.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebase.analyticsViewer": {
    "name": "roles/firebase.analyticsViewer",
    "title": "Firebase Analytics Viewer",
    "description": "Read access to Google Analytics for Firebase.",
    "includedPermissions": [
      "cloudnotifications.activities.list",
      "firebase.billingPlans.get",
      "firebase.clients.get",
      "firebase.links.list",
      "firebase.projects.get",
      "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
      "firebaseextensions.configs.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebase.developAdmin": {
    "name": "roles/firebase.developAdmin",
    "title": "Firebase Develop Admin",
    "description": "Full access to Firebase Develop products and Analytics.",
    "includedPermissions": [
      "appengine.applications.get",
      "automl.annotationSpecs.create",
      "automl.annotationSpecs.delete",
      "automl.annotationSpecs.get",
      "automl.annotationSpecs.list",
      "automl.annotationSpecs.update",
      "automl.annotations.approve",
      "automl.annotations.create",
      "automl.annotations.list",
      "automl.annotations.manipulate",
      "automl.annotations.reject",
      "automl.columnSpecs.get",
      "automl.columnSpecs.list",
      "automl.columnSpecs.update",
      "automl.datasets.create",
      "automl.datasets.delete",
      "automl.datasets.export",
      "automl.datasets.get",
      "automl.datasets.getIamPolicy",
      "automl.datasets.import",
      "automl.datasets.list",
      "automl.datasets.setIamPolicy",
      "automl.datasets.update",
      "automl.examples.delete",
      "automl.examples.get",
      "automl.examples.list",
      "automl.humanAnnotationTasks.create",
      "automl.humanAnnotationTasks.delete",
      "automl.humanAnnotationTasks.get",
      "automl.humanAnnotationTasks.list",
      "automl.locations.get",
      "automl.locations.getIamPolicy",
      "automl.locations.list",
      "automl.locations.setIamPolicy",
      "automl.modelEvaluations.create",
      "automl.modelEvaluations.get",
      "automl.modelEvaluations.list",
      "automl.models.create",
      "automl.models.delete",
      "automl.models.deploy",
      "automl.models.export",
      "automl.models.get",
      "automl.models.getIamPolicy",
      "automl.models.list",
      "automl.models.predict",
      "automl.models.setIamPolicy",
      "automl.models.undeploy",
      "automl.operations.cancel",
      "automl.operations.delete",
      "automl.operations.get",
      "automl.operations.list",
      "automl.tableSpecs.get",
      "automl.tableSpecs.list",
      "automl.tableSpecs.update",
      "clientauthconfig.brands.get",
      "clientauthconfig.brands.list",
      "clientauthconfig.brands.update",
      "clientauthconfig.clients.get",
      "clientauthconfig.clients.list",
      "cloudfunctions.functions.call",
      "cloudfunctions.functions.create",
      "cloudfunctions.functions.delete",
      "cloudfunctions.functions.get",
      "cloudfunctions.functions.getIamPolicy",
      "cloudfunctions.functions.invoke",
      "cloudfunctions.functions.list",
      "cloudfunctions.functions.setIamPolicy",
      "cloudfunctions.functions.sourceCodeGet",
      "cloudfunctions.functions.sourceCodeSet",
      "cloudfunctions.functions.update",
      "cloudfunctions.locations.list",
      "cloudfunctions.operations.get",
      "cloudfunctions.operations.list",
      "cloudnotifications.activities.list",
      "datastore.databases.create",
      "datastore.databases.delete",
      "datastore.databases.export",
      "datastore.databases.get",
      "datastore.databases.getIamPolicy",
      "datastore.databases.import",
      "datastore.databases.list",
      "datastore.databases.setIamPolicy",
      "datastore.databases.update",
      "datastore.entities.allocateIds",
      "datastore.entities.create",
      "datastore.entities.delete",
      "datastore.entities.get",
      "datastore.entities.list",
      "datastore.entities.update",
      "datastore.indexes.create",
      "datastore.indexes.delete",
      "datastore.indexes.get",
      "datastore.indexes.list",
      "datastore.indexes.update",
      "datastore.locations.get",
      "datastore.locations.list",
      "datastore.namespaces.get",
      "datastore.namespaces.getIamPolicy",
      "datastore.namespaces.list",
      "datastore.namespaces.setIamPolicy",
      "datastore.operations.cancel",
      "datastore.operations.delete",
      "datastore.operations.get",
      "datastore.operations.list",
      "datastore.statistics.get",
      "datastore.statistics.list",
      "errorreporting.groups.list",
      "firebase.billingPlans.get",
      "firebase.clients.get",
      "firebase.links.list",
      "firebase.projects.get",
      "firebaseanalytics.resources.googleAnalyticsEdit",
      "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
      "firebaseauth.configs.create",
      "firebaseauth.configs.get",
      "firebaseauth.configs.getHashConfig",
      "firebaseauth.configs.update",
      "firebaseauth.users.create",
      "firebaseauth.users.createSession",
      "firebaseauth.users.delete",
      "firebaseauth.users.get",
      "firebaseauth.users.sendEmail",
      "firebaseauth.users.update",
      "firebasedatabase.instances.create",
      "firebasedatabase.instances.get",
      "firebasedatabase.instances.list",
      "firebasedatabase.instances.update",
      "firebaseextensions.configs.list",
      "firebasehosting.sites.create",
      "firebasehosting.sites.delete",
      "firebasehosting.sites.get",
      "firebasehosting.sites.list",
      "firebasehosting.sites.update",
      "firebaseml.compressionjobs.create",
      "firebaseml.compressionjobs.delete",
      "firebaseml.compressionjobs.get",
      "firebaseml.compressionjobs.list",
      "firebaseml.compressionjobs.start",
      "firebaseml.compressionjobs.update",
      "firebaseml.models.create",
      "firebaseml.models.delete",
      "firebaseml.models.get",
      "firebaseml.models.list",
      "firebaseml.modelversions.create",
      "firebaseml.modelversions.get",
      "firebaseml.modelversions.list",
      "firebaseml.modelversions.update",
      "firebaserules.releases.create",
      "firebaserules.releases.delete",
      "firebaserules.releases.get",
      "firebaserules.releases.getExecutable",
      "firebaserules.releases.list",
      "firebaserules.releases.update",
      "firebaserules.rulesets.create",
      "firebaserules.rulesets.delete",
      "firebaserules.rulesets.get",
      "firebaserules.rulesets.list",
      "firebaserules.rulesets.test",
      "logging.logEntries.list",
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "runtimeconfig.configs.create",
      "runtimeconfig.configs.delete",
      "runtimeconfig.configs.get",
      "runtimeconfig.configs.list",
      "runtimeconfig.configs.update",
      "runtimeconfig.operations.get",
      "runtimeconfig.operations.list",
      "runtimeconfig.variables.create",
      "runtimeconfig.variables.delete",
      "runtimeconfig.variables.get",
      "runtimeconfig.variables.list",
      "runtimeconfig.variables.update",
      "runtimeconfig.variables.watch",
      "runtimeconfig.waiters.create",
      "runtimeconfig.waiters.delete",
      "runtimeconfig.waiters.get",
      "runtimeconfig.waiters.list",
      "runtimeconfig.waiters.update",
      "serviceusage.apiKeys.get",
      "serviceusage.apiKeys.getProjectForKey",
      "serviceusage.apiKeys.list",
      "serviceusage.operations.get",
      "serviceusage.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list",
      "storage.buckets.create",
      "storage.buckets.delete",
      "storage.buckets.get",
      "storage.buckets.getIamPolicy",
      "storage.buckets.list",
      "storage.buckets.setIamPolicy",
      "storage.buckets.update",
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.get",
      "storage.objects.getIamPolicy",
      "storage.objects.list",
      "storage.objects.setIamPolicy",
      "storage.objects.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebase.developViewer": {
    "name": "roles/firebase.developViewer",
    "title": "Firebase Develop Viewer",
    "description": "Read access to Firebase Develop products and Analytics.",
    "includedPermissions": [
      "automl.annotationSpecs.get",
      "automl.annotationSpecs.list",
      "automl.annotations.list",
      "automl.columnSpecs.get",
      "automl.columnSpecs.list",
      "automl.datasets.get",
      "automl.datasets.list",
      "automl.examples.get",
      "automl.examples.list",
      "automl.humanAnnotationTasks.get",
      "automl.humanAnnotationTasks.list",
      "automl.locations.get",
      "automl.locations.list",
      "automl.modelEvaluations.get",
      "automl.modelEvaluations.list",
      "automl.models.get",
      "automl.models.list",
      "automl.operations.get",
      "automl.operations.list",
      "automl.tableSpecs.get",
      "automl.tableSpecs.list",
      "clientauthconfig.brands.get",
      "clientauthconfig.brands.list",
      "cloudfunctions.functions.get",
      "cloudfunctions.functions.list",
      "cloudfunctions.locations.list",
      "cloudfunctions.operations.get",
      "cloudfunctions.operations.list",
      "cloudnotifications.activities.list",
      "datastore.databases.get",
      "datastore.databases.getIamPolicy",
      "datastore.databases.list",
      "datastore.entities.get",
      "datastore.entities.list",
      "datastore.indexes.get",
      "datastore.indexes.list",
      "datastore.namespaces.get",
      "datastore.namespaces.getIamPolicy",
      "datastore.namespaces.list",
      "datastore.statistics.get",
      "datastore.statistics.list",
      "errorreporting.groups.list",
      "firebase.billingPlans.get",
      "firebase.clients.get",
      "firebase.links.list",
      "firebase.projects.get",
      "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
      "firebaseauth.configs.get",
      "firebaseauth.users.get",
      "firebasedatabase.instances.get",
      "firebasedatabase.instances.list",
      "firebaseextensions.configs.list",
      "firebasehosting.sites.get",
      "firebasehosting.sites.list",
      "firebaseml.compressionjobs.get",
      "firebaseml.compressionjobs.list",
      "firebaseml.models.get",
      "firebaseml.models.list",
      "firebaseml.modelversions.get",
      "firebaseml.modelversions.list",
      "firebaserules.releases.get",
      "firebaserules.releases.list",
      "firebaserules.rulesets.get",
      "firebaserules.rulesets.list",
      "logging.logEntries.list",
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "serviceusage.operations.get",
      "serviceusage.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list",
      "storage.buckets.get",
      "storage.buckets.getIamPolicy",
      "storage.buckets.list",
      "storage.objects.get",
      "storage.objects.getIamPolicy",
      "storage.objects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebase.growthAdmin": {
    "name": "roles/firebase.growthAdmin",
    "title": "Firebase Grow Admin",
    "description": "Full access to Firebase Grow products and Analytics.",
    "includedPermissions": [
      "clientauthconfig.clients.get",
      "clientauthconfig.clients.list",
      "cloudconfig.configs.get",
      "cloudconfig.configs.update",
      "cloudmessaging.messages.create",
      "cloudnotifications.activities.list",
      "firebase.billingPlans.get",
      "firebase.clients.get",
      "firebase.links.list",
      "firebase.projects.get",
      "firebaseabt.experimentresults.get",
      "firebaseabt.experiments.create",
      "firebaseabt.experiments.delete",
      "firebaseabt.experiments.get",
      "firebaseabt.experiments.list",
      "firebaseabt.experiments.update",
      "firebaseabt.projectmetadata.get",
      "firebaseanalytics.resources.googleAnalyticsEdit",
      "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
      "firebasedynamiclinks.destinations.list",
      "firebasedynamiclinks.destinations.update",
      "firebasedynamiclinks.domains.create",
      "firebasedynamiclinks.domains.delete",
      "firebasedynamiclinks.domains.get",
      "firebasedynamiclinks.domains.list",
      "firebasedynamiclinks.domains.update",
      "firebasedynamiclinks.links.create",
      "firebasedynamiclinks.links.get",
      "firebasedynamiclinks.links.list",
      "firebasedynamiclinks.links.update",
      "firebasedynamiclinks.stats.get",
      "firebaseextensions.configs.list",
      "firebaseinappmessaging.campaigns.create",
      "firebaseinappmessaging.campaigns.delete",
      "firebaseinappmessaging.campaigns.get",
      "firebaseinappmessaging.campaigns.list",
      "firebaseinappmessaging.campaigns.update",
      "firebasenotifications.messages.create",
      "firebasenotifications.messages.delete",
      "firebasenotifications.messages.get",
      "firebasenotifications.messages.list",
      "firebasenotifications.messages.update",
      "firebasepredictions.predictions.create",
      "firebasepredictions.predictions.delete",
      "firebasepredictions.predictions.list",
      "firebasepredictions.predictions.update",
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "serviceusage.operations.get",
      "serviceusage.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebase.growthViewer": {
    "name": "roles/firebase.growthViewer",
    "title": "Firebase Grow Viewer",
    "description": "Read access to Firebase Grow products and Analytics.",
    "includedPermissions": [
      "cloudconfig.configs.get",
      "cloudnotifications.activities.list",
      "firebase.billingPlans.get",
      "firebase.clients.get",
      "firebase.links.list",
      "firebase.projects.get",
      "firebaseabt.experimentresults.get",
      "firebaseabt.experiments.get",
      "firebaseabt.experiments.list",
      "firebaseabt.projectmetadata.get",
      "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
      "firebasedynamiclinks.destinations.list",
      "firebasedynamiclinks.domains.get",
      "firebasedynamiclinks.domains.list",
      "firebasedynamiclinks.links.get",
      "firebasedynamiclinks.links.list",
      "firebasedynamiclinks.stats.get",
      "firebaseextensions.configs.list",
      "firebaseinappmessaging.campaigns.get",
      "firebaseinappmessaging.campaigns.list",
      "firebasenotifications.messages.get",
      "firebasenotifications.messages.list",
      "firebasepredictions.predictions.list",
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "serviceusage.operations.get",
      "serviceusage.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebase.qualityAdmin": {
    "name": "roles/firebase.qualityAdmin",
    "title": "Firebase Quality Admin",
    "description": "Full access to Firebase Quality products and Analytics.",
    "includedPermissions": [
      "cloudnotifications.activities.list",
      "firebase.billingPlans.get",
      "firebase.clients.get",
      "firebase.links.list",
      "firebase.projects.get",
      "firebaseanalytics.resources.googleAnalyticsEdit",
      "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
      "firebaseappdistro.groups.list",
      "firebaseappdistro.groups.update",
      "firebaseappdistro.releases.list",
      "firebaseappdistro.releases.update",
      "firebaseappdistro.testers.list",
      "firebaseappdistro.testers.update",
      "firebasecrash.issues.update",
      "firebasecrash.reports.get",
      "firebasecrashlytics.config.get",
      "firebasecrashlytics.config.update",
      "firebasecrashlytics.data.get",
      "firebasecrashlytics.issues.get",
      "firebasecrashlytics.issues.list",
      "firebasecrashlytics.issues.update",
      "firebasecrashlytics.sessions.get",
      "firebaseextensions.configs.list",
      "firebaseperformance.config.create",
      "firebaseperformance.config.delete",
      "firebaseperformance.config.update",
      "firebaseperformance.data.get",
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "serviceusage.operations.get",
      "serviceusage.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebase.qualityViewer": {
    "name": "roles/firebase.qualityViewer",
    "title": "Firebase Quality Viewer",
    "description": "Read access to Firebase Quality products and Analytics.",
    "includedPermissions": [
      "cloudnotifications.activities.list",
      "firebase.billingPlans.get",
      "firebase.clients.get",
      "firebase.links.list",
      "firebase.projects.get",
      "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
      "firebaseappdistro.groups.list",
      "firebaseappdistro.releases.list",
      "firebaseappdistro.testers.list",
      "firebasecrash.reports.get",
      "firebasecrashlytics.config.get",
      "firebasecrashlytics.data.get",
      "firebasecrashlytics.issues.get",
      "firebasecrashlytics.issues.list",
      "firebasecrashlytics.sessions.get",
      "firebaseextensions.configs.list",
      "firebaseperformance.data.get",
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "serviceusage.operations.get",
      "serviceusage.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebase.viewer": {
    "name": "roles/firebase.viewer",
    "title": "Firebase Viewer",
    "description": "Read-only access to Firebase products.",
    "includedPermissions": [
      "automl.annotationSpecs.get",
      "automl.annotationSpecs.list",
      "automl.annotations.list",
      "automl.columnSpecs.get",
      "automl.columnSpecs.list",
      "automl.datasets.get",
      "automl.datasets.list",
      "automl.examples.get",
      "automl.examples.list",
      "automl.humanAnnotationTasks.get",
      "automl.humanAnnotationTasks.list",
      "automl.locations.get",
      "automl.locations.list",
      "automl.modelEvaluations.get",
      "automl.modelEvaluations.list",
      "automl.models.get",
      "automl.models.list",
      "automl.operations.get",
      "automl.operations.list",
      "automl.tableSpecs.get",
      "automl.tableSpecs.list",
      "clientauthconfig.brands.get",
      "clientauthconfig.brands.list",
      "cloudconfig.configs.get",
      "cloudfunctions.functions.get",
      "cloudfunctions.functions.list",
      "cloudfunctions.locations.list",
      "cloudfunctions.operations.get",
      "cloudfunctions.operations.list",
      "cloudnotifications.activities.list",
      "cloudtestservice.environmentcatalog.get",
      "cloudtestservice.matrices.get",
      "cloudtoolresults.executions.get",
      "cloudtoolresults.executions.list",
      "cloudtoolresults.histories.get",
      "cloudtoolresults.histories.list",
      "cloudtoolresults.settings.get",
      "cloudtoolresults.steps.get",
      "cloudtoolresults.steps.list",
      "datastore.databases.get",
      "datastore.databases.getIamPolicy",
      "datastore.databases.list",
      "datastore.entities.get",
      "datastore.entities.list",
      "datastore.indexes.get",
      "datastore.indexes.list",
      "datastore.namespaces.get",
      "datastore.namespaces.getIamPolicy",
      "datastore.namespaces.list",
      "datastore.statistics.get",
      "datastore.statistics.list",
      "errorreporting.groups.list",
      "firebase.billingPlans.get",
      "firebase.clients.get",
      "firebase.links.list",
      "firebase.projects.get",
      "firebaseabt.experimentresults.get",
      "firebaseabt.experiments.get",
      "firebaseabt.experiments.list",
      "firebaseabt.projectmetadata.get",
      "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
      "firebaseappdistro.groups.list",
      "firebaseappdistro.releases.list",
      "firebaseappdistro.testers.list",
      "firebaseauth.configs.get",
      "firebaseauth.users.get",
      "firebasecrash.reports.get",
      "firebasecrashlytics.config.get",
      "firebasecrashlytics.data.get",
      "firebasecrashlytics.issues.get",
      "firebasecrashlytics.issues.list",
      "firebasecrashlytics.sessions.get",
      "firebasedatabase.instances.get",
      "firebasedatabase.instances.list",
      "firebasedynamiclinks.destinations.list",
      "firebasedynamiclinks.domains.get",
      "firebasedynamiclinks.domains.list",
      "firebasedynamiclinks.links.get",
      "firebasedynamiclinks.links.list",
      "firebasedynamiclinks.stats.get",
      "firebaseextensions.configs.list",
      "firebasehosting.sites.get",
      "firebasehosting.sites.list",
      "firebaseinappmessaging.campaigns.get",
      "firebaseinappmessaging.campaigns.list",
      "firebaseml.compressionjobs.get",
      "firebaseml.compressionjobs.list",
      "firebaseml.models.get",
      "firebaseml.models.list",
      "firebaseml.modelversions.get",
      "firebaseml.modelversions.list",
      "firebasenotifications.messages.get",
      "firebasenotifications.messages.list",
      "firebaseperformance.data.get",
      "firebasepredictions.predictions.list",
      "firebaserules.releases.get",
      "firebaserules.releases.list",
      "firebaserules.rulesets.get",
      "firebaserules.rulesets.list",
      "logging.logEntries.list",
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "serviceusage.operations.get",
      "serviceusage.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list",
      "storage.buckets.get",
      "storage.buckets.getIamPolicy",
      "storage.buckets.list",
      "storage.objects.get",
      "storage.objects.getIamPolicy",
      "storage.objects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebaseabt.admin": {
    "name": "roles/firebaseabt.admin",
    "title": "Firebase A/B Testing Admin",
    "description": "Full read/write access to Firebase A/B Testing resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebaseabt.experimentresults.get",
      "firebaseabt.experiments.create",
      "firebaseabt.experiments.delete",
      "firebaseabt.experiments.get",
      "firebaseabt.experiments.list",
      "firebaseabt.experiments.update",
      "firebaseabt.projectmetadata.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/firebaseabt.viewer": {
    "name": "roles/firebaseabt.viewer",
    "title": "Firebase A/B Testing Viewer",
    "description": "Read-only access to Firebase A/B Testing resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebaseabt.experimentresults.get",
      "firebaseabt.experiments.get",
      "firebaseabt.experiments.list",
      "firebaseabt.projectmetadata.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/firebaseappdistro.admin": {
    "name": "roles/firebaseappdistro.admin",
    "title": "Firebase App Distribution Admin",
    "description": "Full read/write access to Firebase App Distribution resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebaseappdistro.groups.list",
      "firebaseappdistro.groups.update",
      "firebaseappdistro.releases.list",
      "firebaseappdistro.releases.update",
      "firebaseappdistro.testers.list",
      "firebaseappdistro.testers.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/firebaseappdistro.viewer": {
    "name": "roles/firebaseappdistro.viewer",
    "title": "Firebase App Distribution Viewer",
    "description": "Read-only access to Firebase App Distribution resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebaseappdistro.groups.list",
      "firebaseappdistro.releases.list",
      "firebaseappdistro.testers.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/firebaseauth.admin": {
    "name": "roles/firebaseauth.admin",
    "title": "Firebase Authentication Admin",
    "description": "Full read/write access to Firebase Authentication resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebaseauth.configs.create",
      "firebaseauth.configs.get",
      "firebaseauth.configs.getHashConfig",
      "firebaseauth.configs.update",
      "firebaseauth.users.create",
      "firebaseauth.users.createSession",
      "firebaseauth.users.delete",
      "firebaseauth.users.get",
      "firebaseauth.users.sendEmail",
      "firebaseauth.users.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebaseauth.viewer": {
    "name": "roles/firebaseauth.viewer",
    "title": "Firebase Authentication Viewer",
    "description": "Read-only access to Firebase Authentication resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebaseauth.configs.get",
      "firebaseauth.users.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebasecrash.symbolMappingsAdmin": {
    "name": "roles/firebasecrash.symbolMappingsAdmin",
    "title": "Firebase Crash Symbol Uploader",
    "description": "Full read/write access to symbol mapping file resources for Firebase Crash Reporting.",
    "includedPermissions": [
      "firebase.clients.get",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebasecrashlytics.admin": {
    "name": "roles/firebasecrashlytics.admin",
    "title": "Firebase Crashlytics Admin",
    "description": "Full read/write access to Firebase Crashlytics resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebasecrashlytics.config.get",
      "firebasecrashlytics.config.update",
      "firebasecrashlytics.data.get",
      "firebasecrashlytics.issues.get",
      "firebasecrashlytics.issues.list",
      "firebasecrashlytics.issues.update",
      "firebasecrashlytics.sessions.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebasecrashlytics.viewer": {
    "name": "roles/firebasecrashlytics.viewer",
    "title": "Firebase Crashlytics Viewer",
    "description": "Read-only access to Firebase Crashlytics resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebasecrashlytics.config.get",
      "firebasecrashlytics.data.get",
      "firebasecrashlytics.issues.get",
      "firebasecrashlytics.issues.list",
      "firebasecrashlytics.sessions.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebasedatabase.admin": {
    "name": "roles/firebasedatabase.admin",
    "title": "Firebase Realtime Database Admin",
    "description": "Full read/write access to Firebase Realtime Database resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebasedatabase.instances.create",
      "firebasedatabase.instances.get",
      "firebasedatabase.instances.list",
      "firebasedatabase.instances.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebasedatabase.viewer": {
    "name": "roles/firebasedatabase.viewer",
    "title": "Firebase Realtime Database Viewer",
    "description": "Read-only access to Firebase Realtime Database resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebasedatabase.instances.get",
      "firebasedatabase.instances.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebasedynamiclinks.admin": {
    "name": "roles/firebasedynamiclinks.admin",
    "title": "Firebase Dynamic Links Admin",
    "description": "Full read/write access to Firebase Dynamic Links resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebasedynamiclinks.destinations.list",
      "firebasedynamiclinks.destinations.update",
      "firebasedynamiclinks.domains.create",
      "firebasedynamiclinks.domains.delete",
      "firebasedynamiclinks.domains.get",
      "firebasedynamiclinks.domains.list",
      "firebasedynamiclinks.domains.update",
      "firebasedynamiclinks.links.create",
      "firebasedynamiclinks.links.get",
      "firebasedynamiclinks.links.list",
      "firebasedynamiclinks.links.update",
      "firebasedynamiclinks.stats.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebasedynamiclinks.viewer": {
    "name": "roles/firebasedynamiclinks.viewer",
    "title": "Firebase Dynamic Links Viewer",
    "description": "Read-only access to Firebase Dynamic Links resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebasedynamiclinks.destinations.list",
      "firebasedynamiclinks.domains.get",
      "firebasedynamiclinks.domains.list",
      "firebasedynamiclinks.links.get",
      "firebasedynamiclinks.links.list",
      "firebasedynamiclinks.stats.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebasehosting.admin": {
    "name": "roles/firebasehosting.admin",
    "title": "Firebase Hosting Admin",
    "description": "Full read/write access to Firebase Hosting resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebasehosting.sites.create",
      "firebasehosting.sites.delete",
      "firebasehosting.sites.get",
      "firebasehosting.sites.list",
      "firebasehosting.sites.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebasehosting.viewer": {
    "name": "roles/firebasehosting.viewer",
    "title": "Firebase Hosting Viewer",
    "description": "Read-only access to Firebase Hosting resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebasehosting.sites.get",
      "firebasehosting.sites.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebaseinappmessaging.admin": {
    "name": "roles/firebaseinappmessaging.admin",
    "title": "Firebase In-App Messaging Admin",
    "description": "Full read/write access to Firebase In-App Messaging resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebaseinappmessaging.campaigns.create",
      "firebaseinappmessaging.campaigns.delete",
      "firebaseinappmessaging.campaigns.get",
      "firebaseinappmessaging.campaigns.list",
      "firebaseinappmessaging.campaigns.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/firebaseinappmessaging.viewer": {
    "name": "roles/firebaseinappmessaging.viewer",
    "title": "Firebase In-App Messaging Viewer",
    "description": "Read-only access to Firebase In-App Messaging resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebaseinappmessaging.campaigns.get",
      "firebaseinappmessaging.campaigns.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/firebaseml.admin": {
    "name": "roles/firebaseml.admin",
    "title": "Firebase ML Kit Admin",
    "description": "Full read/write access to Firebase ML Kit resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebaseml.compressionjobs.create",
      "firebaseml.compressionjobs.delete",
      "firebaseml.compressionjobs.get",
      "firebaseml.compressionjobs.list",
      "firebaseml.compressionjobs.start",
      "firebaseml.compressionjobs.update",
      "firebaseml.models.create",
      "firebaseml.models.delete",
      "firebaseml.models.get",
      "firebaseml.models.list",
      "firebaseml.modelversions.create",
      "firebaseml.modelversions.get",
      "firebaseml.modelversions.list",
      "firebaseml.modelversions.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/firebaseml.viewer": {
    "name": "roles/firebaseml.viewer",
    "title": "Firebase ML Kit Viewer",
    "description": "Read-only access to Firebase ML Kit resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebaseml.compressionjobs.get",
      "firebaseml.compressionjobs.list",
      "firebaseml.models.get",
      "firebaseml.models.list",
      "firebaseml.modelversions.get",
      "firebaseml.modelversions.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/firebasenotifications.admin": {
    "name": "roles/firebasenotifications.admin",
    "title": "Firebase Cloud Messaging Admin",
    "description": "Full read/write access to Firebase Cloud Messaging resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebasenotifications.messages.create",
      "firebasenotifications.messages.delete",
      "firebasenotifications.messages.get",
      "firebasenotifications.messages.list",
      "firebasenotifications.messages.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebasenotifications.viewer": {
    "name": "roles/firebasenotifications.viewer",
    "title": "Firebase Cloud Messaging Viewer",
    "description": "Read-only access to Firebase Cloud Messaging resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebasenotifications.messages.get",
      "firebasenotifications.messages.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebaseperformance.admin": {
    "name": "roles/firebaseperformance.admin",
    "title": "Firebase Performance Reporting Admin",
    "description": "Full access to firebaseperformance resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebaseperformance.config.create",
      "firebaseperformance.config.delete",
      "firebaseperformance.config.update",
      "firebaseperformance.data.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebaseperformance.viewer": {
    "name": "roles/firebaseperformance.viewer",
    "title": "Firebase Performance Reporting Viewer",
    "description": "Read-only access to firebaseperformance resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebaseperformance.data.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebasepredictions.admin": {
    "name": "roles/firebasepredictions.admin",
    "title": "Firebase Predictions Admin",
    "description": "Full read/write access to Firebase Predictions resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebasepredictions.predictions.create",
      "firebasepredictions.predictions.delete",
      "firebasepredictions.predictions.list",
      "firebasepredictions.predictions.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebasepredictions.viewer": {
    "name": "roles/firebasepredictions.viewer",
    "title": "Firebase Predictions Viewer",
    "description": "Read-only access to Firebase Predictions resources.",
    "includedPermissions": [
      "firebase.clients.get",
      "firebase.projects.get",
      "firebasepredictions.predictions.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebaserules.admin": {
    "name": "roles/firebaserules.admin",
    "title": "Firebase Rules Admin",
    "description": "Full management of Firebase Rules.",
    "includedPermissions": [
      "firebaserules.releases.create",
      "firebaserules.releases.delete",
      "firebaserules.releases.get",
      "firebaserules.releases.getExecutable",
      "firebaserules.releases.list",
      "firebaserules.releases.update",
      "firebaserules.rulesets.create",
      "firebaserules.rulesets.delete",
      "firebaserules.rulesets.get",
      "firebaserules.rulesets.list",
      "firebaserules.rulesets.test",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/firebaserules.viewer": {
    "name": "roles/firebaserules.viewer",
    "title": "Firebase Rules Viewer",
    "description": "Read-only access on all resources with the ability to test Rulesets.",
    "includedPermissions": [
      "firebaserules.releases.get",
      "firebaserules.releases.list",
      "firebaserules.rulesets.get",
      "firebaserules.rulesets.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/gameservices.admin": {
    "name": "roles/gameservices.admin",
    "title": "Game Services API Admin",
    "description": "Full access to Game Services API and related resources.",
    "includedPermissions": [
      "gameservices.gameServerClusters.create",
      "gameservices.gameServerClusters.delete",
      "gameservices.gameServerClusters.get",
      "gameservices.gameServerClusters.list",
      "gameservices.gameServerClusters.update",
      "gameservices.gameServerConfigs.create",
      "gameservices.gameServerConfigs.delete",
      "gameservices.gameServerConfigs.get",
      "gameservices.gameServerConfigs.list",
      "gameservices.gameServerDeployments.create",
      "gameservices.gameServerDeployments.delete",
      "gameservices.gameServerDeployments.get",
      "gameservices.gameServerDeployments.list",
      "gameservices.gameServerDeployments.rollout",
      "gameservices.gameServerDeployments.update",
      "gameservices.locations.get",
      "gameservices.locations.list",
      "gameservices.operations.cancel",
      "gameservices.operations.delete",
      "gameservices.operations.get",
      "gameservices.operations.list",
      "gameservices.realms.create",
      "gameservices.realms.delete",
      "gameservices.realms.get",
      "gameservices.realms.list",
      "gameservices.realms.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/gameservices.viewer": {
    "name": "roles/gameservices.viewer",
    "title": "Game Services API Viewer",
    "description": "Read-only access to Game Services API and related resources.",
    "includedPermissions": [
      "gameservices.gameServerClusters.get",
      "gameservices.gameServerClusters.list",
      "gameservices.gameServerConfigs.get",
      "gameservices.gameServerConfigs.list",
      "gameservices.gameServerDeployments.get",
      "gameservices.gameServerDeployments.list",
      "gameservices.locations.get",
      "gameservices.locations.list",
      "gameservices.operations.get",
      "gameservices.operations.list",
      "gameservices.realms.get",
      "gameservices.realms.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/genomics.admin": {
    "name": "roles/genomics.admin",
    "title": "Genomics Admin",
    "description": "Full access to genomics datasets and operations.",
    "includedPermissions": [
      "genomics.datasets.create",
      "genomics.datasets.delete",
      "genomics.datasets.get",
      "genomics.datasets.getIamPolicy",
      "genomics.datasets.list",
      "genomics.datasets.setIamPolicy",
      "genomics.datasets.update",
      "genomics.operations.cancel",
      "genomics.operations.create",
      "genomics.operations.get",
      "genomics.operations.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/genomics.editor": {
    "name": "roles/genomics.editor",
    "title": "Genomics Editor",
    "description": "Access to read and edit genomics datasets and operations.",
    "includedPermissions": [
      "genomics.datasets.create",
      "genomics.datasets.delete",
      "genomics.datasets.get",
      "genomics.datasets.list",
      "genomics.datasets.update",
      "genomics.operations.cancel",
      "genomics.operations.create",
      "genomics.operations.get",
      "genomics.operations.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/genomics.pipelinesRunner": {
    "name": "roles/genomics.pipelinesRunner",
    "title": "Genomics Pipelines Runner",
    "description": "Full access to operate on genomics pipelines.",
    "includedPermissions": [
      "genomics.operations.cancel",
      "genomics.operations.create",
      "genomics.operations.get",
      "genomics.operations.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/genomics.viewer": {
    "name": "roles/genomics.viewer",
    "title": "Genomics Viewer",
    "description": "Access to view genomics datasets and operations.",
    "includedPermissions": [
      "genomics.datasets.get",
      "genomics.datasets.list",
      "genomics.operations.get",
      "genomics.operations.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/gkehub.admin": {
    "name": "roles/gkehub.admin",
    "title": "GKE Hub Admin",
    "description": "Full access to GKE Hubs and related resources.",
    "includedPermissions": [
      "gkehub.locations.get",
      "gkehub.locations.list",
      "gkehub.memberships.create",
      "gkehub.memberships.delete",
      "gkehub.memberships.generateConnectManifest",
      "gkehub.memberships.get",
      "gkehub.memberships.getIamPolicy",
      "gkehub.memberships.list",
      "gkehub.memberships.setIamPolicy",
      "gkehub.memberships.update",
      "gkehub.operations.cancel",
      "gkehub.operations.get",
      "gkehub.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/gkehub.connect": {
    "name": "roles/gkehub.connect",
    "title": "GKE Hub Connection Agent",
    "description": "Ability to set up GKE Connect between external clusters and Google.",
    "includedPermissions": [
      "gkehub.endpoints.connect"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/gkehub.viewer": {
    "name": "roles/gkehub.viewer",
    "title": "GKE Hub Viewer",
    "description": "Read-only access to GKE Hubs and related resources.",
    "includedPermissions": [
      "gkehub.locations.get",
      "gkehub.locations.list",
      "gkehub.memberships.generateConnectManifest",
      "gkehub.memberships.get",
      "gkehub.memberships.getIamPolicy",
      "gkehub.memberships.list",
      "gkehub.operations.get",
      "gkehub.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.annotationEditor": {
    "name": "roles/healthcare.annotationEditor",
    "title": "Healthcare Annotation Editor",
    "description": "Create, delete, update, read and list annotations.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.annotationReader": {
    "name": "roles/healthcare.annotationReader",
    "title": "Healthcare Annotation Reader",
    "description": "Read and list annotations in an Annotation store.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.annotationStoreAdmin": {
    "name": "roles/healthcare.annotationStoreAdmin",
    "title": "Healthcare Annotation Administrator",
    "description": "Administer Annotation stores.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.annotationStoreViewer": {
    "name": "roles/healthcare.annotationStoreViewer",
    "title": "Healthcare Annotation Store Viewer",
    "description": "List Annotation Stores in a dataset.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.datasetAdmin": {
    "name": "roles/healthcare.datasetAdmin",
    "title": "Healthcare Dataset Administrator",
    "description": "Administer Healthcare Datasets.",
    "includedPermissions": [
      "healthcare.datasets.create",
      "healthcare.datasets.deidentify",
      "healthcare.datasets.delete",
      "healthcare.datasets.get",
      "healthcare.datasets.getIamPolicy",
      "healthcare.datasets.list",
      "healthcare.datasets.setIamPolicy",
      "healthcare.datasets.update",
      "healthcare.operations.cancel",
      "healthcare.operations.get",
      "healthcare.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.datasetViewer": {
    "name": "roles/healthcare.datasetViewer",
    "title": "Healthcare Dataset Viewer",
    "description": "List the Healthcare Datasets in a project.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.dicomEditor": {
    "name": "roles/healthcare.dicomEditor",
    "title": "Healthcare DICOM Editor",
    "description": "Edit DICOM images individually and in bulk.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.dicomStores.dicomWebDelete",
      "healthcare.dicomStores.dicomWebRead",
      "healthcare.dicomStores.dicomWebWrite",
      "healthcare.dicomStores.export",
      "healthcare.dicomStores.get",
      "healthcare.dicomStores.import",
      "healthcare.dicomStores.list",
      "healthcare.operations.cancel",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.dicomStoreAdmin": {
    "name": "roles/healthcare.dicomStoreAdmin",
    "title": "Healthcare DICOM Store Administrator",
    "description": "Administer DICOM stores.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.dicomStores.create",
      "healthcare.dicomStores.delete",
      "healthcare.dicomStores.dicomWebDelete",
      "healthcare.dicomStores.get",
      "healthcare.dicomStores.getIamPolicy",
      "healthcare.dicomStores.list",
      "healthcare.dicomStores.setIamPolicy",
      "healthcare.dicomStores.update",
      "healthcare.operations.cancel",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.dicomStoreViewer": {
    "name": "roles/healthcare.dicomStoreViewer",
    "title": "Healthcare DICOM Store Viewer",
    "description": "List DICOM Stores in a dataset.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.dicomStores.get",
      "healthcare.dicomStores.list",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.dicomViewer": {
    "name": "roles/healthcare.dicomViewer",
    "title": "Healthcare DICOM Viewer",
    "description": "Retrieve DICOM images from a DICOM store.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.dicomStores.dicomWebRead",
      "healthcare.dicomStores.export",
      "healthcare.dicomStores.get",
      "healthcare.dicomStores.list",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.fhirResourceEditor": {
    "name": "roles/healthcare.fhirResourceEditor",
    "title": "Healthcare FHIR Resource Editor",
    "description": "Create, delete, update, read and search FHIR resources.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.fhirResources.create",
      "healthcare.fhirResources.delete",
      "healthcare.fhirResources.get",
      "healthcare.fhirResources.patch",
      "healthcare.fhirResources.update",
      "healthcare.fhirStores.get",
      "healthcare.fhirStores.list",
      "healthcare.fhirStores.searchResources",
      "healthcare.operations.cancel",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.fhirResourceReader": {
    "name": "roles/healthcare.fhirResourceReader",
    "title": "Healthcare FHIR Resource Reader",
    "description": "Read and search FHIR resources.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.fhirResources.get",
      "healthcare.fhirStores.get",
      "healthcare.fhirStores.list",
      "healthcare.fhirStores.searchResources",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.fhirStoreAdmin": {
    "name": "roles/healthcare.fhirStoreAdmin",
    "title": "Healthcare FHIR Store Administrator",
    "description": "Administer FHIR resource stores.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.fhirResources.purge",
      "healthcare.fhirStores.create",
      "healthcare.fhirStores.delete",
      "healthcare.fhirStores.export",
      "healthcare.fhirStores.get",
      "healthcare.fhirStores.getIamPolicy",
      "healthcare.fhirStores.import",
      "healthcare.fhirStores.list",
      "healthcare.fhirStores.setIamPolicy",
      "healthcare.fhirStores.update",
      "healthcare.operations.cancel",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.fhirStoreViewer": {
    "name": "roles/healthcare.fhirStoreViewer",
    "title": "Healthcare FHIR Store Viewer",
    "description": "List FHIR Stores in a dataset.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.fhirStores.get",
      "healthcare.fhirStores.list",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.hl7V2Consumer": {
    "name": "roles/healthcare.hl7V2Consumer",
    "title": "Healthcare HL7v2 Message Consumer",
    "description": "List and read HL7v2 messages, update message labels, and publish new messages.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.hl7V2Messages.create",
      "healthcare.hl7V2Messages.get",
      "healthcare.hl7V2Messages.list",
      "healthcare.hl7V2Messages.update",
      "healthcare.hl7V2Stores.get",
      "healthcare.hl7V2Stores.list",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.hl7V2Editor": {
    "name": "roles/healthcare.hl7V2Editor",
    "title": "Healthcare HL7v2 Message Editor",
    "description": "Read, write, and delete access to HL7v2 messages.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.hl7V2Messages.create",
      "healthcare.hl7V2Messages.delete",
      "healthcare.hl7V2Messages.get",
      "healthcare.hl7V2Messages.ingest",
      "healthcare.hl7V2Messages.list",
      "healthcare.hl7V2Messages.update",
      "healthcare.hl7V2Stores.get",
      "healthcare.hl7V2Stores.list",
      "healthcare.operations.cancel",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.hl7V2Ingest": {
    "name": "roles/healthcare.hl7V2Ingest",
    "title": "Healthcare HL7v2 Message Ingest",
    "description": "Ingest HL7v2 messages received from a source network.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.hl7V2Messages.ingest",
      "healthcare.hl7V2Stores.get",
      "healthcare.hl7V2Stores.list",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.hl7V2StoreAdmin": {
    "name": "roles/healthcare.hl7V2StoreAdmin",
    "title": "Healthcare HL7v2 Store Administrator",
    "description": "Administer HL7v2 Stores.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.hl7V2Stores.create",
      "healthcare.hl7V2Stores.delete",
      "healthcare.hl7V2Stores.get",
      "healthcare.hl7V2Stores.getIamPolicy",
      "healthcare.hl7V2Stores.list",
      "healthcare.hl7V2Stores.setIamPolicy",
      "healthcare.hl7V2Stores.update",
      "healthcare.operations.cancel",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/healthcare.hl7V2StoreViewer": {
    "name": "roles/healthcare.hl7V2StoreViewer",
    "title": "Healthcare HL7v2 Store Viewer",
    "description": "View HL7v2 Stores in a dataset.",
    "includedPermissions": [
      "healthcare.datasets.get",
      "healthcare.datasets.list",
      "healthcare.hl7V2Stores.get",
      "healthcare.hl7V2Stores.list",
      "healthcare.operations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/iam.organizationRoleAdmin": {
    "name": "roles/iam.organizationRoleAdmin",
    "title": "Organization Role Administrator",
    "description": "Access to administer all custom roles in the organization and the projects below it.",
    "includedPermissions": [
      "iam.roles.create",
      "iam.roles.delete",
      "iam.roles.get",
      "iam.roles.list",
      "iam.roles.undelete",
      "iam.roles.update",
      "resourcemanager.organizations.get",
      "resourcemanager.organizations.getIamPolicy",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iam.organizationRoleViewer": {
    "name": "roles/iam.organizationRoleViewer",
    "title": "Organization Role Viewer",
    "description": "Read access to all custom roles in the organization and the projects below it.",
    "includedPermissions": [
      "iam.roles.get",
      "iam.roles.list",
      "resourcemanager.organizations.get",
      "resourcemanager.organizations.getIamPolicy",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iam.roleAdmin": {
    "name": "roles/iam.roleAdmin",
    "title": "Role Administrator",
    "description": "Access to administer all custom roles in the project.",
    "includedPermissions": [
      "iam.roles.create",
      "iam.roles.delete",
      "iam.roles.get",
      "iam.roles.list",
      "iam.roles.undelete",
      "iam.roles.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iam.roleViewer": {
    "name": "roles/iam.roleViewer",
    "title": "Role Viewer",
    "description": "Read access to all custom roles in the project.",
    "includedPermissions": [
      "iam.roles.get",
      "iam.roles.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iam.securityAdmin": {
    "name": "roles/iam.securityAdmin",
    "title": "Security Admin",
    "description": "Security admin role, with permissions to get and set any IAM policy.",
    "includedPermissions": [
      "accessapproval.requests.list",
      "accesscontextmanager.accessLevels.list",
      "accesscontextmanager.accessPolicies.getIamPolicy",
      "accesscontextmanager.accessPolicies.list",
      "accesscontextmanager.accessPolicies.setIamPolicy",
      "accesscontextmanager.accessZones.list",
      "accesscontextmanager.policies.getIamPolicy",
      "accesscontextmanager.policies.list",
      "accesscontextmanager.policies.setIamPolicy",
      "accesscontextmanager.servicePerimeters.list",
      "actions.agentVersions.list",
      "apigee.apiproductattributes.list",
      "apigee.apiproducts.list",
      "apigee.apps.list",
      "apigee.deployments.list",
      "apigee.developerappattributes.list",
      "apigee.developerapps.list",
      "apigee.developerattributes.list",
      "apigee.developers.list",
      "apigee.environments.getIamPolicy",
      "apigee.environments.list",
      "apigee.environments.setIamPolicy",
      "apigee.flowhooks.list",
      "apigee.keystorealiases.list",
      "apigee.keystores.list",
      "apigee.keyvaluemaps.list",
      "apigee.organizations.list",
      "apigee.proxies.list",
      "apigee.proxyrevisions.list",
      "apigee.queries.list",
      "apigee.references.list",
      "apigee.reports.list",
      "apigee.resourcefiles.list",
      "apigee.sharedflowrevisions.list",
      "apigee.sharedflows.list",
      "apigee.targetservers.list",
      "apigee.tracesessions.list",
      "appengine.instances.list",
      "appengine.memcache.list",
      "appengine.operations.list",
      "appengine.services.list",
      "appengine.versions.list",
      "artifactregistry.files.list",
      "artifactregistry.packages.list",
      "artifactregistry.repositories.getIamPolicy",
      "artifactregistry.repositories.list",
      "artifactregistry.repositories.setIamPolicy",
      "artifactregistry.tags.list",
      "artifactregistry.versions.list",
      "automl.annotationSpecs.list",
      "automl.annotations.list",
      "automl.columnSpecs.list",
      "automl.datasets.getIamPolicy",
      "automl.datasets.list",
      "automl.datasets.setIamPolicy",
      "automl.examples.list",
      "automl.humanAnnotationTasks.list",
      "automl.locations.getIamPolicy",
      "automl.locations.list",
      "automl.locations.setIamPolicy",
      "automl.modelEvaluations.list",
      "automl.models.getIamPolicy",
      "automl.models.list",
      "automl.models.setIamPolicy",
      "automl.operations.list",
      "automl.tableSpecs.list",
      "automlrecommendations.apiKeys.list",
      "automlrecommendations.catalogItems.list",
      "automlrecommendations.catalogs.list",
      "automlrecommendations.events.list",
      "automlrecommendations.placements.list",
      "automlrecommendations.recommendations.list",
      "bigquery.connections.getIamPolicy",
      "bigquery.connections.list",
      "bigquery.connections.setIamPolicy",
      "bigquery.datasets.getIamPolicy",
      "bigquery.datasets.setIamPolicy",
      "bigquery.jobs.list",
      "bigquery.models.list",
      "bigquery.routines.list",
      "bigquery.savedqueries.list",
      "bigquery.tables.list",
      "bigtable.appProfiles.list",
      "bigtable.clusters.list",
      "bigtable.instances.getIamPolicy",
      "bigtable.instances.list",
      "bigtable.instances.setIamPolicy",
      "bigtable.locations.list",
      "bigtable.tables.getIamPolicy",
      "bigtable.tables.list",
      "bigtable.tables.setIamPolicy",
      "billing.accounts.getIamPolicy",
      "billing.accounts.list",
      "billing.accounts.setIamPolicy",
      "billing.budgets.list",
      "billing.credits.list",
      "billing.resourceAssociations.list",
      "billing.subscriptions.list",
      "binaryauthorization.attestors.getIamPolicy",
      "binaryauthorization.attestors.list",
      "binaryauthorization.attestors.setIamPolicy",
      "binaryauthorization.policy.getIamPolicy",
      "binaryauthorization.policy.setIamPolicy",
      "clientauthconfig.brands.list",
      "clientauthconfig.clients.list",
      "cloudasset.feeds.list",
      "cloudbuild.builds.list",
      "clouddebugger.breakpoints.list",
      "clouddebugger.debuggees.list",
      "cloudfunctions.functions.getIamPolicy",
      "cloudfunctions.functions.list",
      "cloudfunctions.functions.setIamPolicy",
      "cloudfunctions.locations.list",
      "cloudfunctions.operations.list",
      "cloudiot.devices.list",
      "cloudiot.registries.getIamPolicy",
      "cloudiot.registries.list",
      "cloudiot.registries.setIamPolicy",
      "cloudjobdiscovery.companies.list",
      "cloudkms.cryptoKeyVersions.list",
      "cloudkms.cryptoKeys.getIamPolicy",
      "cloudkms.cryptoKeys.list",
      "cloudkms.cryptoKeys.setIamPolicy",
      "cloudkms.importJobs.getIamPolicy",
      "cloudkms.importJobs.list",
      "cloudkms.importJobs.setIamPolicy",
      "cloudkms.keyRings.getIamPolicy",
      "cloudkms.keyRings.list",
      "cloudkms.keyRings.setIamPolicy",
      "cloudnotifications.activities.list",
      "cloudprivatecatalogproducer.associations.list",
      "cloudprivatecatalogproducer.catalogs.getIamPolicy",
      "cloudprivatecatalogproducer.catalogs.list",
      "cloudprivatecatalogproducer.catalogs.setIamPolicy",
      "cloudprofiler.profiles.list",
      "cloudscheduler.jobs.list",
      "cloudscheduler.locations.list",
      "cloudsecurityscanner.crawledurls.list",
      "cloudsecurityscanner.results.list",
      "cloudsecurityscanner.scanruns.list",
      "cloudsecurityscanner.scans.list",
      "cloudsql.backupRuns.list",
      "cloudsql.databases.list",
      "cloudsql.instances.list",
      "cloudsql.sslCerts.list",
      "cloudsql.users.list",
      "cloudsupport.accounts.getIamPolicy",
      "cloudsupport.accounts.list",
      "cloudsupport.accounts.setIamPolicy",
      "cloudtasks.locations.list",
      "cloudtasks.queues.getIamPolicy",
      "cloudtasks.queues.list",
      "cloudtasks.queues.setIamPolicy",
      "cloudtasks.tasks.list",
      "cloudtoolresults.executions.list",
      "cloudtoolresults.histories.list",
      "cloudtoolresults.steps.list",
      "cloudtrace.insights.list",
      "cloudtrace.tasks.list",
      "cloudtrace.traces.list",
      "cloudtranslate.glossaries.list",
      "cloudtranslate.locations.list",
      "cloudtranslate.operations.list",
      "composer.environments.list",
      "composer.imageversions.list",
      "composer.operations.list",
      "compute.acceleratorTypes.list",
      "compute.addresses.list",
      "compute.autoscalers.list",
      "compute.backendBuckets.list",
      "compute.backendServices.list",
      "compute.commitments.list",
      "compute.diskTypes.list",
      "compute.disks.getIamPolicy",
      "compute.disks.list",
      "compute.disks.setIamPolicy",
      "compute.externalVpnGateways.list",
      "compute.firewalls.list",
      "compute.forwardingRules.list",
      "compute.globalAddresses.list",
      "compute.globalForwardingRules.list",
      "compute.globalOperations.getIamPolicy",
      "compute.globalOperations.list",
      "compute.globalOperations.setIamPolicy",
      "compute.healthChecks.list",
      "compute.httpHealthChecks.list",
      "compute.httpsHealthChecks.list",
      "compute.images.getIamPolicy",
      "compute.images.list",
      "compute.images.setIamPolicy",
      "compute.instanceGroupManagers.list",
      "compute.instanceGroups.list",
      "compute.instanceTemplates.getIamPolicy",
      "compute.instanceTemplates.list",
      "compute.instanceTemplates.setIamPolicy",
      "compute.instances.getIamPolicy",
      "compute.instances.list",
      "compute.instances.setIamPolicy",
      "compute.interconnectAttachments.list",
      "compute.interconnectLocations.list",
      "compute.interconnects.list",
      "compute.licenseCodes.getIamPolicy",
      "compute.licenseCodes.list",
      "compute.licenseCodes.setIamPolicy",
      "compute.licenses.getIamPolicy",
      "compute.licenses.list",
      "compute.licenses.setIamPolicy",
      "compute.machineTypes.list",
      "compute.maintenancePolicies.getIamPolicy",
      "compute.maintenancePolicies.list",
      "compute.maintenancePolicies.setIamPolicy",
      "compute.networkEndpointGroups.getIamPolicy",
      "compute.networkEndpointGroups.list",
      "compute.networkEndpointGroups.setIamPolicy",
      "compute.networks.list",
      "compute.nodeGroups.getIamPolicy",
      "compute.nodeGroups.list",
      "compute.nodeGroups.setIamPolicy",
      "compute.nodeTemplates.getIamPolicy",
      "compute.nodeTemplates.list",
      "compute.nodeTemplates.setIamPolicy",
      "compute.nodeTypes.list",
      "compute.regionBackendServices.list",
      "compute.regionOperations.getIamPolicy",
      "compute.regionOperations.list",
      "compute.regionOperations.setIamPolicy",
      "compute.regions.list",
      "compute.reservations.list",
      "compute.resourcePolicies.list",
      "compute.routers.list",
      "compute.routes.list",
      "compute.securityPolicies.getIamPolicy",
      "compute.securityPolicies.list",
      "compute.securityPolicies.setIamPolicy",
      "compute.snapshots.getIamPolicy",
      "compute.snapshots.list",
      "compute.snapshots.setIamPolicy",
      "compute.sslCertificates.list",
      "compute.sslPolicies.list",
      "compute.subnetworks.getIamPolicy",
      "compute.subnetworks.list",
      "compute.subnetworks.setIamPolicy",
      "compute.targetHttpProxies.list",
      "compute.targetHttpsProxies.list",
      "compute.targetInstances.list",
      "compute.targetPools.list",
      "compute.targetSslProxies.list",
      "compute.targetTcpProxies.list",
      "compute.targetVpnGateways.list",
      "compute.urlMaps.list",
      "compute.vpnGateways.list",
      "compute.vpnTunnels.list",
      "compute.zoneOperations.getIamPolicy",
      "compute.zoneOperations.list",
      "compute.zoneOperations.setIamPolicy",
      "compute.zones.list",
      "container.apiServices.list",
      "container.backendConfigs.list",
      "container.bindings.list",
      "container.certificateSigningRequests.list",
      "container.clusterRoleBindings.list",
      "container.clusterRoles.list",
      "container.clusters.list",
      "container.componentStatuses.list",
      "container.configMaps.list",
      "container.controllerRevisions.list",
      "container.cronJobs.list",
      "container.csiDrivers.list",
      "container.csiNodes.list",
      "container.customResourceDefinitions.list",
      "container.daemonSets.list",
      "container.deployments.list",
      "container.endpoints.list",
      "container.events.list",
      "container.horizontalPodAutoscalers.list",
      "container.ingresses.list",
      "container.initializerConfigurations.list",
      "container.jobs.list",
      "container.limitRanges.list",
      "container.localSubjectAccessReviews.list",
      "container.namespaces.list",
      "container.networkPolicies.list",
      "container.nodes.list",
      "container.operations.list",
      "container.persistentVolumeClaims.list",
      "container.persistentVolumes.list",
      "container.petSets.list",
      "container.podDisruptionBudgets.list",
      "container.podPresets.list",
      "container.podSecurityPolicies.list",
      "container.podTemplates.list",
      "container.pods.list",
      "container.replicaSets.list",
      "container.replicationControllers.list",
      "container.resourceQuotas.list",
      "container.roleBindings.list",
      "container.roles.list",
      "container.runtimeClasses.list",
      "container.scheduledJobs.list",
      "container.secrets.list",
      "container.selfSubjectAccessReviews.list",
      "container.serviceAccounts.list",
      "container.services.list",
      "container.statefulSets.list",
      "container.storageClasses.list",
      "container.subjectAccessReviews.list",
      "container.thirdPartyObjects.list",
      "container.thirdPartyResources.list",
      "datacatalog.categories.getIamPolicy",
      "datacatalog.categories.setIamPolicy",
      "datacatalog.entries.getIamPolicy",
      "datacatalog.entries.list",
      "datacatalog.entries.setIamPolicy",
      "datacatalog.entryGroups.getIamPolicy",
      "datacatalog.entryGroups.setIamPolicy",
      "datacatalog.tagTemplates.getIamPolicy",
      "datacatalog.tagTemplates.setIamPolicy",
      "datacatalog.taxonomies.getIamPolicy",
      "datacatalog.taxonomies.list",
      "datacatalog.taxonomies.setIamPolicy",
      "dataflow.jobs.list",
      "dataflow.messages.list",
      "datafusion.instances.getIamPolicy",
      "datafusion.instances.list",
      "datafusion.instances.setIamPolicy",
      "datafusion.locations.list",
      "datafusion.operations.list",
      "datalabeling.annotateddatasets.list",
      "datalabeling.annotationspecsets.list",
      "datalabeling.dataitems.list",
      "datalabeling.datasets.list",
      "datalabeling.examples.list",
      "datalabeling.instructions.list",
      "datalabeling.operations.list",
      "dataproc.agents.list",
      "dataproc.autoscalingPolicies.getIamPolicy",
      "dataproc.autoscalingPolicies.list",
      "dataproc.autoscalingPolicies.setIamPolicy",
      "dataproc.clusters.getIamPolicy",
      "dataproc.clusters.list",
      "dataproc.clusters.setIamPolicy",
      "dataproc.jobs.getIamPolicy",
      "dataproc.jobs.list",
      "dataproc.jobs.setIamPolicy",
      "dataproc.operations.getIamPolicy",
      "dataproc.operations.list",
      "dataproc.operations.setIamPolicy",
      "dataproc.workflowTemplates.getIamPolicy",
      "dataproc.workflowTemplates.list",
      "dataproc.workflowTemplates.setIamPolicy",
      "dataprocessing.featurecontrols.list",
      "datastore.databases.getIamPolicy",
      "datastore.databases.list",
      "datastore.databases.setIamPolicy",
      "datastore.entities.list",
      "datastore.indexes.list",
      "datastore.locations.list",
      "datastore.namespaces.getIamPolicy",
      "datastore.namespaces.list",
      "datastore.namespaces.setIamPolicy",
      "datastore.operations.list",
      "datastore.statistics.list",
      "deploymentmanager.compositeTypes.list",
      "deploymentmanager.deployments.getIamPolicy",
      "deploymentmanager.deployments.list",
      "deploymentmanager.deployments.setIamPolicy",
      "deploymentmanager.manifests.list",
      "deploymentmanager.operations.list",
      "deploymentmanager.resources.list",
      "deploymentmanager.typeProviders.list",
      "deploymentmanager.types.list",
      "dialogflow.contexts.list",
      "dialogflow.documents.list",
      "dialogflow.entityTypes.list",
      "dialogflow.intents.list",
      "dialogflow.knowledgeBases.list",
      "dialogflow.sessionEntityTypes.list",
      "dlp.analyzeRiskTemplates.list",
      "dlp.deidentifyTemplates.list",
      "dlp.inspectTemplates.list",
      "dlp.jobTriggers.list",
      "dlp.jobs.list",
      "dlp.storedInfoTypes.list",
      "dns.changes.list",
      "dns.dnsKeys.list",
      "dns.managedZoneOperations.list",
      "dns.managedZones.list",
      "dns.policies.getIamPolicy",
      "dns.policies.list",
      "dns.policies.setIamPolicy",
      "dns.resourceRecordSets.list",
      "errorreporting.applications.list",
      "errorreporting.errorEvents.list",
      "errorreporting.groups.list",
      "file.instances.list",
      "file.locations.list",
      "file.operations.list",
      "file.snapshots.list",
      "firebase.links.list",
      "firebaseabt.experiments.list",
      "firebaseappdistro.groups.list",
      "firebaseappdistro.releases.list",
      "firebaseappdistro.testers.list",
      "firebasecrashlytics.issues.list",
      "firebasedatabase.instances.list",
      "firebasedynamiclinks.destinations.list",
      "firebasedynamiclinks.domains.list",
      "firebasedynamiclinks.links.list",
      "firebaseextensions.configs.list",
      "firebasehosting.sites.list",
      "firebaseinappmessaging.campaigns.list",
      "firebaseml.compressionjobs.list",
      "firebaseml.models.list",
      "firebaseml.modelversions.list",
      "firebasenotifications.messages.list",
      "firebasepredictions.predictions.list",
      "firebaserules.releases.list",
      "firebaserules.rulesets.list",
      "gameservices.gameServerClusters.list",
      "gameservices.gameServerConfigs.list",
      "gameservices.gameServerDeployments.list",
      "gameservices.locations.list",
      "gameservices.operations.list",
      "gameservices.realms.list",
      "genomics.datasets.getIamPolicy",
      "genomics.datasets.list",
      "genomics.datasets.setIamPolicy",
      "genomics.operations.list",
      "gkehub.locations.list",
      "gkehub.memberships.getIamPolicy",
      "gkehub.memberships.list",
      "gkehub.memberships.setIamPolicy",
      "gkehub.operations.list",
      "healthcare.datasets.getIamPolicy",
      "healthcare.datasets.list",
      "healthcare.datasets.setIamPolicy",
      "healthcare.dicomStores.getIamPolicy",
      "healthcare.dicomStores.list",
      "healthcare.dicomStores.setIamPolicy",
      "healthcare.fhirStores.getIamPolicy",
      "healthcare.fhirStores.list",
      "healthcare.fhirStores.setIamPolicy",
      "healthcare.hl7V2Messages.list",
      "healthcare.hl7V2Stores.getIamPolicy",
      "healthcare.hl7V2Stores.list",
      "healthcare.hl7V2Stores.setIamPolicy",
      "healthcare.operations.list",
      "iam.roles.get",
      "iam.roles.list",
      "iam.serviceAccountKeys.list",
      "iam.serviceAccounts.get",
      "iam.serviceAccounts.getIamPolicy",
      "iam.serviceAccounts.list",
      "iam.serviceAccounts.setIamPolicy",
      "iap.tunnel.getIamPolicy",
      "iap.tunnel.setIamPolicy",
      "iap.tunnelInstances.getIamPolicy",
      "iap.tunnelInstances.setIamPolicy",
      "iap.tunnelZones.getIamPolicy",
      "iap.tunnelZones.setIamPolicy",
      "iap.web.getIamPolicy",
      "iap.web.setIamPolicy",
      "iap.webServiceVersions.getIamPolicy",
      "iap.webServiceVersions.setIamPolicy",
      "iap.webServices.getIamPolicy",
      "iap.webServices.setIamPolicy",
      "iap.webTypes.getIamPolicy",
      "iap.webTypes.setIamPolicy",
      "lifesciences.operations.list",
      "logging.exclusions.list",
      "logging.logEntries.list",
      "logging.logMetrics.list",
      "logging.logServiceIndexes.list",
      "logging.logServices.list",
      "logging.logs.list",
      "logging.privateLogEntries.list",
      "logging.sinks.list",
      "managedidentities.domains.getIamPolicy",
      "managedidentities.domains.list",
      "managedidentities.domains.setIamPolicy",
      "managedidentities.locations.list",
      "managedidentities.operations.list",
      "ml.jobs.getIamPolicy",
      "ml.jobs.list",
      "ml.jobs.setIamPolicy",
      "ml.locations.list",
      "ml.models.getIamPolicy",
      "ml.models.list",
      "ml.models.setIamPolicy",
      "ml.operations.list",
      "ml.versions.list",
      "monitoring.alertPolicies.list",
      "monitoring.dashboards.list",
      "monitoring.groups.list",
      "monitoring.metricDescriptors.list",
      "monitoring.monitoredResourceDescriptors.list",
      "monitoring.notificationChannelDescriptors.list",
      "monitoring.notificationChannels.list",
      "monitoring.publicWidgets.list",
      "monitoring.timeSeries.list",
      "monitoring.uptimeCheckConfigs.list",
      "netappcloudvolumes.activeDirectories.list",
      "netappcloudvolumes.ipRanges.list",
      "netappcloudvolumes.jobs.list",
      "netappcloudvolumes.regions.list",
      "netappcloudvolumes.serviceLevels.list",
      "netappcloudvolumes.snapshots.list",
      "netappcloudvolumes.volumes.list",
      "networkmanagement.connectivitytests.getIamPolicy",
      "networkmanagement.connectivitytests.list",
      "networkmanagement.connectivitytests.setIamPolicy",
      "networkmanagement.locations.list",
      "networkmanagement.operations.list",
      "notebooks.environments.getIamPolicy",
      "notebooks.environments.list",
      "notebooks.environments.setIamPolicy",
      "notebooks.instances.getIamPolicy",
      "notebooks.instances.list",
      "notebooks.instances.setIamPolicy",
      "notebooks.locations.list",
      "notebooks.operations.list",
      "proximitybeacon.attachments.list",
      "proximitybeacon.beacons.getIamPolicy",
      "proximitybeacon.beacons.list",
      "proximitybeacon.beacons.setIamPolicy",
      "proximitybeacon.namespaces.getIamPolicy",
      "proximitybeacon.namespaces.list",
      "proximitybeacon.namespaces.setIamPolicy",
      "pubsub.snapshots.getIamPolicy",
      "pubsub.snapshots.list",
      "pubsub.snapshots.setIamPolicy",
      "pubsub.subscriptions.getIamPolicy",
      "pubsub.subscriptions.list",
      "pubsub.subscriptions.setIamPolicy",
      "pubsub.topics.getIamPolicy",
      "pubsub.topics.list",
      "pubsub.topics.setIamPolicy",
      "recommender.computeInstanceGroupManagerMachineTypeRecommendations.list",
      "recommender.computeInstanceMachineTypeRecommendations.list",
      "recommender.iamPolicyRecommendations.list",
      "recommender.locations.list",
      "redis.instances.list",
      "redis.locations.list",
      "redis.operations.list",
      "redisenterprisecloud.databases.list",
      "redisenterprisecloud.subscriptions.list",
      "remotebuildexecution.instances.list",
      "remotebuildexecution.workerpools.list",
      "resourcemanager.folders.getIamPolicy",
      "resourcemanager.folders.list",
      "resourcemanager.folders.setIamPolicy",
      "resourcemanager.organizations.getIamPolicy",
      "resourcemanager.organizations.setIamPolicy",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "resourcemanager.projects.setIamPolicy",
      "run.configurations.list",
      "run.locations.list",
      "run.revisions.list",
      "run.routes.list",
      "run.services.getIamPolicy",
      "run.services.list",
      "run.services.setIamPolicy",
      "runtimeconfig.configs.getIamPolicy",
      "runtimeconfig.configs.list",
      "runtimeconfig.configs.setIamPolicy",
      "runtimeconfig.operations.list",
      "runtimeconfig.variables.getIamPolicy",
      "runtimeconfig.variables.list",
      "runtimeconfig.variables.setIamPolicy",
      "runtimeconfig.waiters.getIamPolicy",
      "runtimeconfig.waiters.list",
      "runtimeconfig.waiters.setIamPolicy",
      "secretmanager.locations.list",
      "secretmanager.secrets.getIamPolicy",
      "secretmanager.secrets.list",
      "secretmanager.secrets.setIamPolicy",
      "secretmanager.versions.list",
      "securitycenter.assets.list",
      "securitycenter.findings.list",
      "securitycenter.notificationconfig.list",
      "securitycenter.sources.getIamPolicy",
      "securitycenter.sources.list",
      "securitycenter.sources.setIamPolicy",
      "servicebroker.bindingoperations.list",
      "servicebroker.bindings.getIamPolicy",
      "servicebroker.bindings.list",
      "servicebroker.bindings.setIamPolicy",
      "servicebroker.catalogs.getIamPolicy",
      "servicebroker.catalogs.list",
      "servicebroker.catalogs.setIamPolicy",
      "servicebroker.instanceoperations.list",
      "servicebroker.instances.getIamPolicy",
      "servicebroker.instances.list",
      "servicebroker.instances.setIamPolicy",
      "serviceconsumermanagement.tenancyu.list",
      "servicemanagement.consumerSettings.getIamPolicy",
      "servicemanagement.consumerSettings.list",
      "servicemanagement.consumerSettings.setIamPolicy",
      "servicemanagement.services.getIamPolicy",
      "servicemanagement.services.list",
      "servicemanagement.services.setIamPolicy",
      "servicenetworking.operations.list",
      "serviceusage.apiKeys.list",
      "serviceusage.operations.list",
      "serviceusage.services.list",
      "source.repos.getIamPolicy",
      "source.repos.list",
      "source.repos.setIamPolicy",
      "spanner.databaseOperations.list",
      "spanner.databases.getIamPolicy",
      "spanner.databases.list",
      "spanner.databases.setIamPolicy",
      "spanner.instanceConfigs.list",
      "spanner.instanceOperations.list",
      "spanner.instances.getIamPolicy",
      "spanner.instances.list",
      "spanner.instances.setIamPolicy",
      "spanner.sessions.list",
      "storage.buckets.getIamPolicy",
      "storage.buckets.list",
      "storage.buckets.setIamPolicy",
      "storage.hmacKeys.list",
      "storage.objects.getIamPolicy",
      "storage.objects.list",
      "storage.objects.setIamPolicy",
      "storagetransfer.jobs.list",
      "storagetransfer.operations.list",
      "tpu.acceleratortypes.list",
      "tpu.locations.list",
      "tpu.nodes.list",
      "tpu.operations.list",
      "tpu.tensorflowversions.list",
      "vmmigration.deployments.list",
      "vpcaccess.connectors.list",
      "vpcaccess.locations.list",
      "vpcaccess.operations.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iam.securityReviewer": {
    "name": "roles/iam.securityReviewer",
    "title": "Security Reviewer",
    "description": "Security reviewer role, with permissions to get any IAM policy.",
    "includedPermissions": [
      "accessapproval.requests.list",
      "accesscontextmanager.accessLevels.list",
      "accesscontextmanager.accessPolicies.getIamPolicy",
      "accesscontextmanager.accessPolicies.list",
      "accesscontextmanager.accessZones.list",
      "accesscontextmanager.policies.getIamPolicy",
      "accesscontextmanager.policies.list",
      "accesscontextmanager.servicePerimeters.list",
      "actions.agentVersions.list",
      "apigee.apiproductattributes.list",
      "apigee.apiproducts.list",
      "apigee.apps.list",
      "apigee.deployments.list",
      "apigee.developerappattributes.list",
      "apigee.developerapps.list",
      "apigee.developerattributes.list",
      "apigee.developers.list",
      "apigee.environments.getIamPolicy",
      "apigee.environments.list",
      "apigee.flowhooks.list",
      "apigee.keystorealiases.list",
      "apigee.keystores.list",
      "apigee.keyvaluemaps.list",
      "apigee.organizations.list",
      "apigee.proxies.list",
      "apigee.proxyrevisions.list",
      "apigee.queries.list",
      "apigee.references.list",
      "apigee.reports.list",
      "apigee.resourcefiles.list",
      "apigee.sharedflowrevisions.list",
      "apigee.sharedflows.list",
      "apigee.targetservers.list",
      "apigee.tracesessions.list",
      "appengine.instances.list",
      "appengine.memcache.list",
      "appengine.operations.list",
      "appengine.services.list",
      "appengine.versions.list",
      "artifactregistry.files.list",
      "artifactregistry.packages.list",
      "artifactregistry.repositories.getIamPolicy",
      "artifactregistry.repositories.list",
      "artifactregistry.tags.list",
      "artifactregistry.versions.list",
      "automl.annotationSpecs.list",
      "automl.annotations.list",
      "automl.columnSpecs.list",
      "automl.datasets.getIamPolicy",
      "automl.datasets.list",
      "automl.examples.list",
      "automl.humanAnnotationTasks.list",
      "automl.locations.getIamPolicy",
      "automl.locations.list",
      "automl.modelEvaluations.list",
      "automl.models.getIamPolicy",
      "automl.models.list",
      "automl.operations.list",
      "automl.tableSpecs.list",
      "automlrecommendations.apiKeys.list",
      "automlrecommendations.catalogItems.list",
      "automlrecommendations.catalogs.list",
      "automlrecommendations.events.list",
      "automlrecommendations.placements.list",
      "automlrecommendations.recommendations.list",
      "bigquery.connections.getIamPolicy",
      "bigquery.connections.list",
      "bigquery.datasets.getIamPolicy",
      "bigquery.jobs.list",
      "bigquery.models.list",
      "bigquery.routines.list",
      "bigquery.savedqueries.list",
      "bigquery.tables.list",
      "bigtable.appProfiles.list",
      "bigtable.clusters.list",
      "bigtable.instances.getIamPolicy",
      "bigtable.instances.list",
      "bigtable.locations.list",
      "bigtable.tables.getIamPolicy",
      "bigtable.tables.list",
      "billing.accounts.getIamPolicy",
      "billing.accounts.list",
      "billing.budgets.list",
      "billing.credits.list",
      "billing.resourceAssociations.list",
      "billing.subscriptions.list",
      "binaryauthorization.attestors.getIamPolicy",
      "binaryauthorization.attestors.list",
      "binaryauthorization.policy.getIamPolicy",
      "clientauthconfig.brands.list",
      "clientauthconfig.clients.list",
      "cloudasset.feeds.list",
      "cloudbuild.builds.list",
      "clouddebugger.breakpoints.list",
      "clouddebugger.debuggees.list",
      "cloudfunctions.functions.getIamPolicy",
      "cloudfunctions.functions.list",
      "cloudfunctions.locations.list",
      "cloudfunctions.operations.list",
      "cloudiot.devices.list",
      "cloudiot.registries.getIamPolicy",
      "cloudiot.registries.list",
      "cloudjobdiscovery.companies.list",
      "cloudkms.cryptoKeyVersions.list",
      "cloudkms.cryptoKeys.getIamPolicy",
      "cloudkms.cryptoKeys.list",
      "cloudkms.importJobs.getIamPolicy",
      "cloudkms.importJobs.list",
      "cloudkms.keyRings.getIamPolicy",
      "cloudkms.keyRings.list",
      "cloudnotifications.activities.list",
      "cloudprivatecatalogproducer.associations.list",
      "cloudprivatecatalogproducer.catalogs.getIamPolicy",
      "cloudprivatecatalogproducer.catalogs.list",
      "cloudprofiler.profiles.list",
      "cloudscheduler.jobs.list",
      "cloudscheduler.locations.list",
      "cloudsecurityscanner.crawledurls.list",
      "cloudsecurityscanner.results.list",
      "cloudsecurityscanner.scanruns.list",
      "cloudsecurityscanner.scans.list",
      "cloudsql.backupRuns.list",
      "cloudsql.databases.list",
      "cloudsql.instances.list",
      "cloudsql.sslCerts.list",
      "cloudsql.users.list",
      "cloudsupport.accounts.getIamPolicy",
      "cloudsupport.accounts.list",
      "cloudtasks.locations.list",
      "cloudtasks.queues.getIamPolicy",
      "cloudtasks.queues.list",
      "cloudtasks.tasks.list",
      "cloudtoolresults.executions.list",
      "cloudtoolresults.histories.list",
      "cloudtoolresults.steps.list",
      "cloudtrace.insights.list",
      "cloudtrace.tasks.list",
      "cloudtrace.traces.list",
      "cloudtranslate.glossaries.list",
      "cloudtranslate.locations.list",
      "cloudtranslate.operations.list",
      "composer.environments.list",
      "composer.imageversions.list",
      "composer.operations.list",
      "compute.acceleratorTypes.list",
      "compute.addresses.list",
      "compute.autoscalers.list",
      "compute.backendBuckets.list",
      "compute.backendServices.list",
      "compute.commitments.list",
      "compute.diskTypes.list",
      "compute.disks.getIamPolicy",
      "compute.disks.list",
      "compute.externalVpnGateways.list",
      "compute.firewalls.list",
      "compute.forwardingRules.list",
      "compute.globalAddresses.list",
      "compute.globalForwardingRules.list",
      "compute.globalOperations.getIamPolicy",
      "compute.globalOperations.list",
      "compute.healthChecks.list",
      "compute.httpHealthChecks.list",
      "compute.httpsHealthChecks.list",
      "compute.images.getIamPolicy",
      "compute.images.list",
      "compute.instanceGroupManagers.list",
      "compute.instanceGroups.list",
      "compute.instanceTemplates.getIamPolicy",
      "compute.instanceTemplates.list",
      "compute.instances.getIamPolicy",
      "compute.instances.list",
      "compute.interconnectAttachments.list",
      "compute.interconnectLocations.list",
      "compute.interconnects.list",
      "compute.licenseCodes.getIamPolicy",
      "compute.licenseCodes.list",
      "compute.licenses.getIamPolicy",
      "compute.licenses.list",
      "compute.machineTypes.list",
      "compute.maintenancePolicies.getIamPolicy",
      "compute.maintenancePolicies.list",
      "compute.networkEndpointGroups.getIamPolicy",
      "compute.networkEndpointGroups.list",
      "compute.networks.list",
      "compute.nodeGroups.getIamPolicy",
      "compute.nodeGroups.list",
      "compute.nodeTemplates.getIamPolicy",
      "compute.nodeTemplates.list",
      "compute.nodeTypes.list",
      "compute.regionBackendServices.list",
      "compute.regionOperations.getIamPolicy",
      "compute.regionOperations.list",
      "compute.regions.list",
      "compute.reservations.list",
      "compute.resourcePolicies.list",
      "compute.routers.list",
      "compute.routes.list",
      "compute.securityPolicies.getIamPolicy",
      "compute.securityPolicies.list",
      "compute.snapshots.getIamPolicy",
      "compute.snapshots.list",
      "compute.sslCertificates.list",
      "compute.sslPolicies.list",
      "compute.subnetworks.getIamPolicy",
      "compute.subnetworks.list",
      "compute.targetHttpProxies.list",
      "compute.targetHttpsProxies.list",
      "compute.targetInstances.list",
      "compute.targetPools.list",
      "compute.targetSslProxies.list",
      "compute.targetTcpProxies.list",
      "compute.targetVpnGateways.list",
      "compute.urlMaps.list",
      "compute.vpnGateways.list",
      "compute.vpnTunnels.list",
      "compute.zoneOperations.getIamPolicy",
      "compute.zoneOperations.list",
      "compute.zones.list",
      "container.apiServices.list",
      "container.backendConfigs.list",
      "container.bindings.list",
      "container.certificateSigningRequests.list",
      "container.clusterRoleBindings.list",
      "container.clusterRoles.list",
      "container.clusters.list",
      "container.componentStatuses.list",
      "container.configMaps.list",
      "container.controllerRevisions.list",
      "container.cronJobs.list",
      "container.csiDrivers.list",
      "container.csiNodes.list",
      "container.customResourceDefinitions.list",
      "container.daemonSets.list",
      "container.deployments.list",
      "container.endpoints.list",
      "container.events.list",
      "container.horizontalPodAutoscalers.list",
      "container.ingresses.list",
      "container.initializerConfigurations.list",
      "container.jobs.list",
      "container.limitRanges.list",
      "container.localSubjectAccessReviews.list",
      "container.namespaces.list",
      "container.networkPolicies.list",
      "container.nodes.list",
      "container.operations.list",
      "container.persistentVolumeClaims.list",
      "container.persistentVolumes.list",
      "container.petSets.list",
      "container.podDisruptionBudgets.list",
      "container.podPresets.list",
      "container.podSecurityPolicies.list",
      "container.podTemplates.list",
      "container.pods.list",
      "container.replicaSets.list",
      "container.replicationControllers.list",
      "container.resourceQuotas.list",
      "container.roleBindings.list",
      "container.roles.list",
      "container.runtimeClasses.list",
      "container.scheduledJobs.list",
      "container.secrets.list",
      "container.selfSubjectAccessReviews.list",
      "container.serviceAccounts.list",
      "container.services.list",
      "container.statefulSets.list",
      "container.storageClasses.list",
      "container.subjectAccessReviews.list",
      "container.thirdPartyObjects.list",
      "container.thirdPartyResources.list",
      "datacatalog.categories.getIamPolicy",
      "datacatalog.entries.getIamPolicy",
      "datacatalog.entries.list",
      "datacatalog.entryGroups.getIamPolicy",
      "datacatalog.tagTemplates.getIamPolicy",
      "datacatalog.taxonomies.getIamPolicy",
      "datacatalog.taxonomies.list",
      "dataflow.jobs.list",
      "dataflow.messages.list",
      "datafusion.instances.getIamPolicy",
      "datafusion.instances.list",
      "datafusion.locations.list",
      "datafusion.operations.list",
      "datalabeling.annotateddatasets.list",
      "datalabeling.annotationspecsets.list",
      "datalabeling.dataitems.list",
      "datalabeling.datasets.list",
      "datalabeling.examples.list",
      "datalabeling.instructions.list",
      "datalabeling.operations.list",
      "dataproc.agents.list",
      "dataproc.autoscalingPolicies.getIamPolicy",
      "dataproc.autoscalingPolicies.list",
      "dataproc.clusters.getIamPolicy",
      "dataproc.clusters.list",
      "dataproc.jobs.getIamPolicy",
      "dataproc.jobs.list",
      "dataproc.operations.getIamPolicy",
      "dataproc.operations.list",
      "dataproc.workflowTemplates.getIamPolicy",
      "dataproc.workflowTemplates.list",
      "dataprocessing.featurecontrols.list",
      "datastore.databases.getIamPolicy",
      "datastore.databases.list",
      "datastore.entities.list",
      "datastore.indexes.list",
      "datastore.locations.list",
      "datastore.namespaces.getIamPolicy",
      "datastore.namespaces.list",
      "datastore.operations.list",
      "datastore.statistics.list",
      "deploymentmanager.compositeTypes.list",
      "deploymentmanager.deployments.getIamPolicy",
      "deploymentmanager.deployments.list",
      "deploymentmanager.manifests.list",
      "deploymentmanager.operations.list",
      "deploymentmanager.resources.list",
      "deploymentmanager.typeProviders.list",
      "deploymentmanager.types.list",
      "dialogflow.contexts.list",
      "dialogflow.documents.list",
      "dialogflow.entityTypes.list",
      "dialogflow.intents.list",
      "dialogflow.knowledgeBases.list",
      "dialogflow.sessionEntityTypes.list",
      "dlp.analyzeRiskTemplates.list",
      "dlp.deidentifyTemplates.list",
      "dlp.inspectTemplates.list",
      "dlp.jobTriggers.list",
      "dlp.jobs.list",
      "dlp.storedInfoTypes.list",
      "dns.changes.list",
      "dns.dnsKeys.list",
      "dns.managedZoneOperations.list",
      "dns.managedZones.list",
      "dns.policies.getIamPolicy",
      "dns.policies.list",
      "dns.resourceRecordSets.list",
      "errorreporting.applications.list",
      "errorreporting.errorEvents.list",
      "errorreporting.groups.list",
      "file.instances.list",
      "file.locations.list",
      "file.operations.list",
      "file.snapshots.list",
      "firebase.links.list",
      "firebaseabt.experiments.list",
      "firebaseappdistro.groups.list",
      "firebaseappdistro.releases.list",
      "firebaseappdistro.testers.list",
      "firebasecrashlytics.issues.list",
      "firebasedatabase.instances.list",
      "firebasedynamiclinks.destinations.list",
      "firebasedynamiclinks.domains.list",
      "firebasedynamiclinks.links.list",
      "firebaseextensions.configs.list",
      "firebasehosting.sites.list",
      "firebaseinappmessaging.campaigns.list",
      "firebaseml.compressionjobs.list",
      "firebaseml.models.list",
      "firebaseml.modelversions.list",
      "firebasenotifications.messages.list",
      "firebasepredictions.predictions.list",
      "firebaserules.releases.list",
      "firebaserules.rulesets.list",
      "gameservices.gameServerClusters.list",
      "gameservices.gameServerConfigs.list",
      "gameservices.gameServerDeployments.list",
      "gameservices.locations.list",
      "gameservices.operations.list",
      "gameservices.realms.list",
      "genomics.datasets.getIamPolicy",
      "genomics.datasets.list",
      "genomics.operations.list",
      "gkehub.locations.list",
      "gkehub.memberships.getIamPolicy",
      "gkehub.memberships.list",
      "gkehub.operations.list",
      "healthcare.datasets.getIamPolicy",
      "healthcare.datasets.list",
      "healthcare.dicomStores.getIamPolicy",
      "healthcare.dicomStores.list",
      "healthcare.fhirStores.getIamPolicy",
      "healthcare.fhirStores.list",
      "healthcare.hl7V2Messages.list",
      "healthcare.hl7V2Stores.getIamPolicy",
      "healthcare.hl7V2Stores.list",
      "healthcare.operations.list",
      "iam.roles.get",
      "iam.roles.list",
      "iam.serviceAccountKeys.list",
      "iam.serviceAccounts.get",
      "iam.serviceAccounts.getIamPolicy",
      "iam.serviceAccounts.list",
      "iap.tunnel.getIamPolicy",
      "iap.tunnelInstances.getIamPolicy",
      "iap.tunnelZones.getIamPolicy",
      "iap.web.getIamPolicy",
      "iap.webServiceVersions.getIamPolicy",
      "iap.webServices.getIamPolicy",
      "iap.webTypes.getIamPolicy",
      "lifesciences.operations.list",
      "logging.exclusions.list",
      "logging.logEntries.list",
      "logging.logMetrics.list",
      "logging.logServiceIndexes.list",
      "logging.logServices.list",
      "logging.logs.list",
      "logging.privateLogEntries.list",
      "logging.sinks.list",
      "managedidentities.domains.getIamPolicy",
      "managedidentities.domains.list",
      "managedidentities.locations.list",
      "managedidentities.operations.list",
      "ml.jobs.getIamPolicy",
      "ml.jobs.list",
      "ml.locations.list",
      "ml.models.getIamPolicy",
      "ml.models.list",
      "ml.operations.list",
      "ml.versions.list",
      "monitoring.alertPolicies.list",
      "monitoring.dashboards.list",
      "monitoring.groups.list",
      "monitoring.metricDescriptors.list",
      "monitoring.monitoredResourceDescriptors.list",
      "monitoring.notificationChannelDescriptors.list",
      "monitoring.notificationChannels.list",
      "monitoring.publicWidgets.list",
      "monitoring.timeSeries.list",
      "monitoring.uptimeCheckConfigs.list",
      "netappcloudvolumes.activeDirectories.list",
      "netappcloudvolumes.ipRanges.list",
      "netappcloudvolumes.jobs.list",
      "netappcloudvolumes.regions.list",
      "netappcloudvolumes.serviceLevels.list",
      "netappcloudvolumes.snapshots.list",
      "netappcloudvolumes.volumes.list",
      "networkmanagement.connectivitytests.getIamPolicy",
      "networkmanagement.connectivitytests.list",
      "networkmanagement.locations.list",
      "networkmanagement.operations.list",
      "notebooks.environments.getIamPolicy",
      "notebooks.environments.list",
      "notebooks.instances.getIamPolicy",
      "notebooks.instances.list",
      "notebooks.locations.list",
      "notebooks.operations.list",
      "proximitybeacon.attachments.list",
      "proximitybeacon.beacons.getIamPolicy",
      "proximitybeacon.beacons.list",
      "proximitybeacon.namespaces.getIamPolicy",
      "proximitybeacon.namespaces.list",
      "pubsub.snapshots.getIamPolicy",
      "pubsub.snapshots.list",
      "pubsub.subscriptions.getIamPolicy",
      "pubsub.subscriptions.list",
      "pubsub.topics.getIamPolicy",
      "pubsub.topics.list",
      "recommender.computeInstanceGroupManagerMachineTypeRecommendations.list",
      "recommender.computeInstanceMachineTypeRecommendations.list",
      "recommender.iamPolicyRecommendations.list",
      "recommender.locations.list",
      "redis.instances.list",
      "redis.locations.list",
      "redis.operations.list",
      "redisenterprisecloud.databases.list",
      "redisenterprisecloud.subscriptions.list",
      "remotebuildexecution.instances.list",
      "remotebuildexecution.workerpools.list",
      "resourcemanager.folders.getIamPolicy",
      "resourcemanager.folders.list",
      "resourcemanager.organizations.getIamPolicy",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "run.configurations.list",
      "run.locations.list",
      "run.revisions.list",
      "run.routes.list",
      "run.services.getIamPolicy",
      "run.services.list",
      "runtimeconfig.configs.getIamPolicy",
      "runtimeconfig.configs.list",
      "runtimeconfig.operations.list",
      "runtimeconfig.variables.getIamPolicy",
      "runtimeconfig.variables.list",
      "runtimeconfig.waiters.getIamPolicy",
      "runtimeconfig.waiters.list",
      "secretmanager.locations.list",
      "secretmanager.secrets.getIamPolicy",
      "secretmanager.secrets.list",
      "secretmanager.versions.list",
      "securitycenter.assets.list",
      "securitycenter.findings.list",
      "securitycenter.notificationconfig.list",
      "securitycenter.sources.getIamPolicy",
      "securitycenter.sources.list",
      "servicebroker.bindingoperations.list",
      "servicebroker.bindings.getIamPolicy",
      "servicebroker.bindings.list",
      "servicebroker.catalogs.getIamPolicy",
      "servicebroker.catalogs.list",
      "servicebroker.instanceoperations.list",
      "servicebroker.instances.getIamPolicy",
      "servicebroker.instances.list",
      "serviceconsumermanagement.tenancyu.list",
      "servicemanagement.consumerSettings.getIamPolicy",
      "servicemanagement.consumerSettings.list",
      "servicemanagement.services.getIamPolicy",
      "servicemanagement.services.list",
      "servicenetworking.operations.list",
      "serviceusage.apiKeys.list",
      "serviceusage.operations.list",
      "serviceusage.services.list",
      "source.repos.getIamPolicy",
      "source.repos.list",
      "spanner.databaseOperations.list",
      "spanner.databases.getIamPolicy",
      "spanner.databases.list",
      "spanner.instanceConfigs.list",
      "spanner.instanceOperations.list",
      "spanner.instances.getIamPolicy",
      "spanner.instances.list",
      "spanner.sessions.list",
      "storage.buckets.getIamPolicy",
      "storage.buckets.list",
      "storage.hmacKeys.list",
      "storage.objects.getIamPolicy",
      "storage.objects.list",
      "storagetransfer.jobs.list",
      "storagetransfer.operations.list",
      "tpu.acceleratortypes.list",
      "tpu.locations.list",
      "tpu.nodes.list",
      "tpu.operations.list",
      "tpu.tensorflowversions.list",
      "vmmigration.deployments.list",
      "vpcaccess.connectors.list",
      "vpcaccess.locations.list",
      "vpcaccess.operations.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iam.serviceAccountAdmin": {
    "name": "roles/iam.serviceAccountAdmin",
    "title": "Service Account Admin",
    "description": "Create and manage service accounts.",
    "includedPermissions": [
      "iam.serviceAccounts.create",
      "iam.serviceAccounts.delete",
      "iam.serviceAccounts.get",
      "iam.serviceAccounts.getIamPolicy",
      "iam.serviceAccounts.list",
      "iam.serviceAccounts.setIamPolicy",
      "iam.serviceAccounts.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iam.serviceAccountCreator": {
    "name": "roles/iam.serviceAccountCreator",
    "title": "Create Service Accounts",
    "description": "Access to create service accounts.",
    "includedPermissions": [
      "iam.serviceAccounts.create",
      "iam.serviceAccounts.get",
      "iam.serviceAccounts.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iam.serviceAccountDeleter": {
    "name": "roles/iam.serviceAccountDeleter",
    "title": "Delete Service Accounts",
    "description": "Access to delete service accounts.",
    "includedPermissions": [
      "iam.serviceAccounts.delete",
      "iam.serviceAccounts.get",
      "iam.serviceAccounts.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iam.serviceAccountKeyAdmin": {
    "name": "roles/iam.serviceAccountKeyAdmin",
    "title": "Service Account Key Admin",
    "description": "Create and manage (and rotate) service account keys.",
    "includedPermissions": [
      "iam.serviceAccountKeys.create",
      "iam.serviceAccountKeys.delete",
      "iam.serviceAccountKeys.get",
      "iam.serviceAccountKeys.list",
      "iam.serviceAccounts.get",
      "iam.serviceAccounts.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iam.serviceAccountTokenCreator": {
    "name": "roles/iam.serviceAccountTokenCreator",
    "title": "Service Account Token Creator",
    "description": "Impersonate service accounts (create OAuth2 access tokens, sign blobs or JWTs, etc).",
    "includedPermissions": [
      "iam.serviceAccounts.get",
      "iam.serviceAccounts.getAccessToken",
      "iam.serviceAccounts.getOpenIdToken",
      "iam.serviceAccounts.implicitDelegation",
      "iam.serviceAccounts.list",
      "iam.serviceAccounts.signBlob",
      "iam.serviceAccounts.signJwt",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iam.serviceAccountUser": {
    "name": "roles/iam.serviceAccountUser",
    "title": "Service Account User",
    "description": "Run operations as the service account.",
    "includedPermissions": [
      "iam.serviceAccounts.actAs",
      "iam.serviceAccounts.get",
      "iam.serviceAccounts.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iam.workloadIdentityUser": {
    "name": "roles/iam.workloadIdentityUser",
    "title": "Workload Identity User",
    "description": "Impersonate service accounts from GKE Workloads",
    "includedPermissions": [
      "iam.serviceAccounts.get",
      "iam.serviceAccounts.getAccessToken",
      "iam.serviceAccounts.getOpenIdToken",
      "iam.serviceAccounts.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iap.admin": {
    "name": "roles/iap.admin",
    "title": "IAP Policy Admin",
    "description": "Administrator of IAP Permissions",
    "includedPermissions": [
      "iap.tunnel.getIamPolicy",
      "iap.tunnel.setIamPolicy",
      "iap.tunnelInstances.getIamPolicy",
      "iap.tunnelInstances.setIamPolicy",
      "iap.tunnelZones.getIamPolicy",
      "iap.tunnelZones.setIamPolicy",
      "iap.web.getIamPolicy",
      "iap.web.setIamPolicy",
      "iap.webServiceVersions.getIamPolicy",
      "iap.webServiceVersions.setIamPolicy",
      "iap.webServices.getIamPolicy",
      "iap.webServices.setIamPolicy",
      "iap.webTypes.getIamPolicy",
      "iap.webTypes.setIamPolicy"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iap.httpsResourceAccessor": {
    "name": "roles/iap.httpsResourceAccessor",
    "title": "IAP-secured Web App User",
    "description": "Access HTTPS resources which use Identity-Aware Proxy",
    "includedPermissions": [
      "iap.webServiceVersions.accessViaIAP"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iap.settingsAdmin": {
    "name": "roles/iap.settingsAdmin",
    "title": "IAP Settings Admin",
    "description": "Administrator of IAP Settings.",
    "includedPermissions": [
      "iap.projects.getSettings",
      "iap.projects.updateSettings",
      "iap.web.getSettings",
      "iap.web.updateSettings",
      "iap.webServiceVersions.getSettings",
      "iap.webServiceVersions.updateSettings",
      "iap.webServices.getSettings",
      "iap.webServices.updateSettings",
      "iap.webTypes.getSettings",
      "iap.webTypes.updateSettings"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/iap.tunnelResourceAccessor": {
    "name": "roles/iap.tunnelResourceAccessor",
    "title": "IAP-secured Tunnel User",
    "description": "Access Tunnel resources which use Identity-Aware Proxy",
    "includedPermissions": [
      "iap.tunnelInstances.accessViaIAP"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/identitytoolkit.admin": {
    "name": "roles/identitytoolkit.admin",
    "title": "Identity Toolkit Admin",
    "description": "Full access to Identity Toolkit resources.",
    "includedPermissions": [
      "firebaseauth.configs.create",
      "firebaseauth.configs.get",
      "firebaseauth.configs.getHashConfig",
      "firebaseauth.configs.update",
      "firebaseauth.users.create",
      "firebaseauth.users.createSession",
      "firebaseauth.users.delete",
      "firebaseauth.users.get",
      "firebaseauth.users.sendEmail",
      "firebaseauth.users.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/identitytoolkit.viewer": {
    "name": "roles/identitytoolkit.viewer",
    "title": "Identity Toolkit Viewer",
    "description": "Read access to Identity Toolkit resources.",
    "includedPermissions": [
      "firebaseauth.configs.get",
      "firebaseauth.users.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/lifesciences.admin": {
    "name": "roles/lifesciences.admin",
    "title": "Cloud Life Sciences Admin",
    "description": "Full control of Cloud Life Sciences resources.",
    "includedPermissions": [
      "lifesciences.operations.cancel",
      "lifesciences.operations.get",
      "lifesciences.operations.list",
      "lifesciences.workflows.run"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/lifesciences.editor": {
    "name": "roles/lifesciences.editor",
    "title": "Cloud Life Sciences Editor",
    "description": "Access to read and edit Cloud Life Sciences resources.",
    "includedPermissions": [
      "lifesciences.operations.cancel",
      "lifesciences.operations.get",
      "lifesciences.operations.list",
      "lifesciences.workflows.run"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/lifesciences.viewer": {
    "name": "roles/lifesciences.viewer",
    "title": "Cloud Life Sciences Viewer",
    "description": "Access to read Cloud Life Sciences resources.",
    "includedPermissions": [
      "lifesciences.operations.get",
      "lifesciences.operations.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/lifesciences.workflowsRunner": {
    "name": "roles/lifesciences.workflowsRunner",
    "title": "Cloud Life Sciences Workflows Runner",
    "description": "Full access to operate on Cloud Life Sciences workflows.",
    "includedPermissions": [
      "lifesciences.operations.cancel",
      "lifesciences.operations.get",
      "lifesciences.operations.list",
      "lifesciences.workflows.run"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/logging.admin": {
    "name": "roles/logging.admin",
    "title": "Logging Admin",
    "description": "Access to all logging permissions, and dependent permissions.",
    "includedPermissions": [
      "logging.cmekSettings.get",
      "logging.cmekSettings.update",
      "logging.exclusions.create",
      "logging.exclusions.delete",
      "logging.exclusions.get",
      "logging.exclusions.list",
      "logging.exclusions.update",
      "logging.logEntries.create",
      "logging.logEntries.list",
      "logging.logMetrics.create",
      "logging.logMetrics.delete",
      "logging.logMetrics.get",
      "logging.logMetrics.list",
      "logging.logMetrics.update",
      "logging.logServiceIndexes.list",
      "logging.logServices.list",
      "logging.logs.delete",
      "logging.logs.list",
      "logging.privateLogEntries.list",
      "logging.sinks.create",
      "logging.sinks.delete",
      "logging.sinks.get",
      "logging.sinks.list",
      "logging.sinks.update",
      "logging.usage.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/logging.configWriter": {
    "name": "roles/logging.configWriter",
    "title": "Logs Configuration Writer",
    "description": "Access to configure log exporting and metrics.",
    "includedPermissions": [
      "logging.cmekSettings.get",
      "logging.cmekSettings.update",
      "logging.exclusions.create",
      "logging.exclusions.delete",
      "logging.exclusions.get",
      "logging.exclusions.list",
      "logging.exclusions.update",
      "logging.logMetrics.create",
      "logging.logMetrics.delete",
      "logging.logMetrics.get",
      "logging.logMetrics.list",
      "logging.logMetrics.update",
      "logging.logServiceIndexes.list",
      "logging.logServices.list",
      "logging.logs.list",
      "logging.sinks.create",
      "logging.sinks.delete",
      "logging.sinks.get",
      "logging.sinks.list",
      "logging.sinks.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/logging.logWriter": {
    "name": "roles/logging.logWriter",
    "title": "Logs Writer",
    "description": "Access to write logs.",
    "includedPermissions": [
      "logging.logEntries.create"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/logging.privateLogViewer": {
    "name": "roles/logging.privateLogViewer",
    "title": "Private Logs Viewer",
    "description": "Access to view all logs, including logs with private contents.",
    "includedPermissions": [
      "logging.exclusions.get",
      "logging.exclusions.list",
      "logging.logEntries.list",
      "logging.logMetrics.get",
      "logging.logMetrics.list",
      "logging.logServiceIndexes.list",
      "logging.logServices.list",
      "logging.logs.list",
      "logging.privateLogEntries.list",
      "logging.sinks.get",
      "logging.sinks.list",
      "logging.usage.get",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/logging.viewer": {
    "name": "roles/logging.viewer",
    "title": "Logs Viewer",
    "description": "Access to view logs, except for logs with private contents.",
    "includedPermissions": [
      "logging.exclusions.get",
      "logging.exclusions.list",
      "logging.logEntries.list",
      "logging.logMetrics.get",
      "logging.logMetrics.list",
      "logging.logServiceIndexes.list",
      "logging.logServices.list",
      "logging.logs.list",
      "logging.sinks.get",
      "logging.sinks.list",
      "logging.usage.get",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/managedidentities.admin": {
    "name": "roles/managedidentities.admin",
    "title": "Google Cloud Managed Identities Admin",
    "description": "Full access to Google Cloud Managed Identities Domains and related resources. Intended to be granted on a project-level.",
    "includedPermissions": [
      "managedidentities.domains.attachTrust",
      "managedidentities.domains.create",
      "managedidentities.domains.delete",
      "managedidentities.domains.detachTrust",
      "managedidentities.domains.get",
      "managedidentities.domains.getIamPolicy",
      "managedidentities.domains.list",
      "managedidentities.domains.reconfigureTrust",
      "managedidentities.domains.resetpassword",
      "managedidentities.domains.setIamPolicy",
      "managedidentities.domains.update",
      "managedidentities.domains.validateTrust",
      "managedidentities.locations.get",
      "managedidentities.locations.list",
      "managedidentities.operations.cancel",
      "managedidentities.operations.delete",
      "managedidentities.operations.get",
      "managedidentities.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/managedidentities.domainAdmin": {
    "name": "roles/managedidentities.domainAdmin",
    "title": "Google Cloud Managed Identities Domain Admin",
    "description": "Read-Update-Delete to Google Cloud Managed Identities Domains and related resources. Intended to be granted on a resource (domain) level.",
    "includedPermissions": [
      "managedidentities.domains.attachTrust",
      "managedidentities.domains.delete",
      "managedidentities.domains.detachTrust",
      "managedidentities.domains.get",
      "managedidentities.domains.getIamPolicy",
      "managedidentities.domains.reconfigureTrust",
      "managedidentities.domains.resetpassword",
      "managedidentities.domains.update",
      "managedidentities.domains.validateTrust",
      "managedidentities.locations.get",
      "managedidentities.locations.list",
      "managedidentities.operations.get",
      "managedidentities.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/managedidentities.viewer": {
    "name": "roles/managedidentities.viewer",
    "title": "Google Cloud Managed Identities Viewer",
    "description": "Read-only access to Google Cloud Managed Identities Domains and related resources.",
    "includedPermissions": [
      "managedidentities.domains.get",
      "managedidentities.domains.getIamPolicy",
      "managedidentities.domains.list",
      "managedidentities.locations.get",
      "managedidentities.locations.list",
      "managedidentities.operations.get",
      "managedidentities.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/ml.admin": {
    "name": "roles/ml.admin",
    "title": "ML Engine Admin",
    "description": "Full access to Cloud ML Engine.",
    "includedPermissions": [
      "ml.jobs.cancel",
      "ml.jobs.create",
      "ml.jobs.get",
      "ml.jobs.getIamPolicy",
      "ml.jobs.list",
      "ml.jobs.setIamPolicy",
      "ml.jobs.update",
      "ml.locations.get",
      "ml.locations.list",
      "ml.models.create",
      "ml.models.delete",
      "ml.models.get",
      "ml.models.getIamPolicy",
      "ml.models.list",
      "ml.models.predict",
      "ml.models.setIamPolicy",
      "ml.models.update",
      "ml.operations.cancel",
      "ml.operations.get",
      "ml.operations.list",
      "ml.projects.getConfig",
      "ml.versions.create",
      "ml.versions.delete",
      "ml.versions.get",
      "ml.versions.list",
      "ml.versions.predict",
      "ml.versions.update",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/ml.developer": {
    "name": "roles/ml.developer",
    "title": "ML Engine Developer",
    "description": "Access to create training and prediction jobs, models and versions, send online prediction requests.",
    "includedPermissions": [
      "ml.jobs.create",
      "ml.jobs.get",
      "ml.jobs.getIamPolicy",
      "ml.jobs.list",
      "ml.locations.get",
      "ml.locations.list",
      "ml.models.create",
      "ml.models.get",
      "ml.models.getIamPolicy",
      "ml.models.list",
      "ml.models.predict",
      "ml.operations.get",
      "ml.operations.list",
      "ml.projects.getConfig",
      "ml.versions.get",
      "ml.versions.list",
      "ml.versions.predict",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/ml.jobOwner": {
    "name": "roles/ml.jobOwner",
    "title": "ML Engine Job Owner",
    "description": "Full access to the job.",
    "includedPermissions": [
      "ml.jobs.cancel",
      "ml.jobs.create",
      "ml.jobs.get",
      "ml.jobs.getIamPolicy",
      "ml.jobs.list",
      "ml.jobs.setIamPolicy",
      "ml.jobs.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/ml.modelOwner": {
    "name": "roles/ml.modelOwner",
    "title": "ML Engine Model Owner",
    "description": "Full access to the model and its versions.",
    "includedPermissions": [
      "ml.models.create",
      "ml.models.delete",
      "ml.models.get",
      "ml.models.getIamPolicy",
      "ml.models.list",
      "ml.models.predict",
      "ml.models.setIamPolicy",
      "ml.models.update",
      "ml.versions.create",
      "ml.versions.delete",
      "ml.versions.get",
      "ml.versions.list",
      "ml.versions.predict",
      "ml.versions.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/ml.modelUser": {
    "name": "roles/ml.modelUser",
    "title": "ML Engine Model User",
    "description": "Permissions to read the model and its versions, and use them for prediction.",
    "includedPermissions": [
      "ml.models.get",
      "ml.models.predict",
      "ml.versions.get",
      "ml.versions.list",
      "ml.versions.predict"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/ml.operationOwner": {
    "name": "roles/ml.operationOwner",
    "title": "ML Engine Operation Owner",
    "description": "Full access to the operation.",
    "includedPermissions": [
      "ml.operations.cancel",
      "ml.operations.get",
      "ml.operations.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/ml.viewer": {
    "name": "roles/ml.viewer",
    "title": "ML Engine Viewer",
    "description": "Read-only access to Cloud ML Engine resources.",
    "includedPermissions": [
      "ml.jobs.get",
      "ml.jobs.list",
      "ml.locations.get",
      "ml.locations.list",
      "ml.models.get",
      "ml.models.list",
      "ml.operations.get",
      "ml.operations.list",
      "ml.projects.getConfig",
      "ml.versions.get",
      "ml.versions.list",
      "resourcemanager.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/mobilecrashreporting.symbolMappingsAdmin": {
    "name": "roles/mobilecrashreporting.symbolMappingsAdmin",
    "title": "Firebase Crash Symbol Uploader (Deprecated)",
    "description": "Full read/write access to symbol mapping file resources for Firebase Crash Reporting.Deprecated in favor of firebasecrash.symbolMappingsAdmin",
    "includedPermissions": [
      "firebase.clients.get",
      "resourcemanager.projects.get"
    ],
    "stage": "DEPRECATED",
    "etag": "AA=="
  },
  "roles/monitoring.admin": {
    "name": "roles/monitoring.admin",
    "title": "Monitoring Admin",
    "description": "All current and future monitoring permissions.",
    "includedPermissions": [
      "cloudnotifications.activities.list",
      "monitoring.alertPolicies.create",
      "monitoring.alertPolicies.delete",
      "monitoring.alertPolicies.get",
      "monitoring.alertPolicies.list",
      "monitoring.alertPolicies.update",
      "monitoring.dashboards.create",
      "monitoring.dashboards.delete",
      "monitoring.dashboards.get",
      "monitoring.dashboards.list",
      "monitoring.dashboards.update",
      "monitoring.groups.create",
      "monitoring.groups.delete",
      "monitoring.groups.get",
      "monitoring.groups.list",
      "monitoring.groups.update",
      "monitoring.metricDescriptors.create",
      "monitoring.metricDescriptors.delete",
      "monitoring.metricDescriptors.get",
      "monitoring.metricDescriptors.list",
      "monitoring.monitoredResourceDescriptors.get",
      "monitoring.monitoredResourceDescriptors.list",
      "monitoring.notificationChannelDescriptors.get",
      "monitoring.notificationChannelDescriptors.list",
      "monitoring.notificationChannels.create",
      "monitoring.notificationChannels.delete",
      "monitoring.notificationChannels.get",
      "monitoring.notificationChannels.getVerificationCode",
      "monitoring.notificationChannels.list",
      "monitoring.notificationChannels.sendVerificationCode",
      "monitoring.notificationChannels.update",
      "monitoring.notificationChannels.verify",
      "monitoring.publicWidgets.create",
      "monitoring.publicWidgets.delete",
      "monitoring.publicWidgets.get",
      "monitoring.publicWidgets.list",
      "monitoring.publicWidgets.update",
      "monitoring.timeSeries.create",
      "monitoring.timeSeries.list",
      "monitoring.uptimeCheckConfigs.create",
      "monitoring.uptimeCheckConfigs.delete",
      "monitoring.uptimeCheckConfigs.get",
      "monitoring.uptimeCheckConfigs.list",
      "monitoring.uptimeCheckConfigs.update",
      "opsconfigmonitoring.resourceMetadata.write",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.enable",
      "stackdriver.projects.edit",
      "stackdriver.projects.get",
      "stackdriver.resourceMetadata.write"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/monitoring.alertPolicyEditor": {
    "name": "roles/monitoring.alertPolicyEditor",
    "title": "Monitoring AlertPolicy Editor",
    "description": "Read/write access to alerting policies.",
    "includedPermissions": [
      "monitoring.alertPolicies.create",
      "monitoring.alertPolicies.delete",
      "monitoring.alertPolicies.get",
      "monitoring.alertPolicies.list",
      "monitoring.alertPolicies.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/monitoring.alertPolicyViewer": {
    "name": "roles/monitoring.alertPolicyViewer",
    "title": "Monitoring AlertPolicy Viewer",
    "description": "Read-only access to alerting policies.",
    "includedPermissions": [
      "monitoring.alertPolicies.get",
      "monitoring.alertPolicies.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/monitoring.dashboardEditor": {
    "name": "roles/monitoring.dashboardEditor",
    "title": "Monitoring Dashboard Configuration Editor",
    "description": "Read/write access to dashboard configurations.",
    "includedPermissions": [
      "monitoring.dashboards.create",
      "monitoring.dashboards.delete",
      "monitoring.dashboards.get",
      "monitoring.dashboards.list",
      "monitoring.dashboards.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/monitoring.dashboardViewer": {
    "name": "roles/monitoring.dashboardViewer",
    "title": "Monitoring Dashboard Configuration Viewer",
    "description": "Read-only access to dashboard configurations.",
    "includedPermissions": [
      "monitoring.dashboards.get",
      "monitoring.dashboards.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/monitoring.editor": {
    "name": "roles/monitoring.editor",
    "title": "Monitoring Editor",
    "description": "Read/write access to all monitoring data and configuration.",
    "includedPermissions": [
      "cloudnotifications.activities.list",
      "monitoring.alertPolicies.create",
      "monitoring.alertPolicies.delete",
      "monitoring.alertPolicies.get",
      "monitoring.alertPolicies.list",
      "monitoring.alertPolicies.update",
      "monitoring.dashboards.create",
      "monitoring.dashboards.delete",
      "monitoring.dashboards.get",
      "monitoring.dashboards.list",
      "monitoring.dashboards.update",
      "monitoring.groups.create",
      "monitoring.groups.delete",
      "monitoring.groups.get",
      "monitoring.groups.list",
      "monitoring.groups.update",
      "monitoring.metricDescriptors.create",
      "monitoring.metricDescriptors.delete",
      "monitoring.metricDescriptors.get",
      "monitoring.metricDescriptors.list",
      "monitoring.monitoredResourceDescriptors.get",
      "monitoring.monitoredResourceDescriptors.list",
      "monitoring.notificationChannelDescriptors.get",
      "monitoring.notificationChannelDescriptors.list",
      "monitoring.notificationChannels.create",
      "monitoring.notificationChannels.delete",
      "monitoring.notificationChannels.get",
      "monitoring.notificationChannels.list",
      "monitoring.notificationChannels.sendVerificationCode",
      "monitoring.notificationChannels.update",
      "monitoring.notificationChannels.verify",
      "monitoring.publicWidgets.create",
      "monitoring.publicWidgets.delete",
      "monitoring.publicWidgets.get",
      "monitoring.publicWidgets.list",
      "monitoring.publicWidgets.update",
      "monitoring.timeSeries.create",
      "monitoring.timeSeries.list",
      "monitoring.uptimeCheckConfigs.create",
      "monitoring.uptimeCheckConfigs.delete",
      "monitoring.uptimeCheckConfigs.get",
      "monitoring.uptimeCheckConfigs.list",
      "monitoring.uptimeCheckConfigs.update",
      "opsconfigmonitoring.resourceMetadata.write",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.enable",
      "stackdriver.projects.edit",
      "stackdriver.projects.get",
      "stackdriver.resourceMetadata.write"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/monitoring.metricWriter": {
    "name": "roles/monitoring.metricWriter",
    "title": "Monitoring Metric Writer",
    "description": "Write-only access to metrics.  This provides exactly the permissions needed by the Stackdriver agent and other systems that send metrics.",
    "includedPermissions": [
      "monitoring.metricDescriptors.create",
      "monitoring.metricDescriptors.get",
      "monitoring.metricDescriptors.list",
      "monitoring.monitoredResourceDescriptors.get",
      "monitoring.monitoredResourceDescriptors.list",
      "monitoring.timeSeries.create"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/monitoring.notificationChannelEditor": {
    "name": "roles/monitoring.notificationChannelEditor",
    "title": "Monitoring NotificationChannel Editor",
    "description": "Read/write access to notification channels.",
    "includedPermissions": [
      "monitoring.notificationChannelDescriptors.get",
      "monitoring.notificationChannelDescriptors.list",
      "monitoring.notificationChannels.create",
      "monitoring.notificationChannels.delete",
      "monitoring.notificationChannels.get",
      "monitoring.notificationChannels.list",
      "monitoring.notificationChannels.sendVerificationCode",
      "monitoring.notificationChannels.update",
      "monitoring.notificationChannels.verify"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/monitoring.notificationChannelViewer": {
    "name": "roles/monitoring.notificationChannelViewer",
    "title": "Monitoring NotificationChannel Viewer",
    "description": "Read-only access to notification channels.",
    "includedPermissions": [
      "monitoring.notificationChannelDescriptors.get",
      "monitoring.notificationChannelDescriptors.list",
      "monitoring.notificationChannels.get",
      "monitoring.notificationChannels.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/monitoring.uptimeCheckConfigEditor": {
    "name": "roles/monitoring.uptimeCheckConfigEditor",
    "title": "Monitoring Uptime Check Configuration Editor",
    "description": "Read/write access to uptime check configurations.",
    "includedPermissions": [
      "monitoring.uptimeCheckConfigs.create",
      "monitoring.uptimeCheckConfigs.delete",
      "monitoring.uptimeCheckConfigs.get",
      "monitoring.uptimeCheckConfigs.list",
      "monitoring.uptimeCheckConfigs.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/monitoring.uptimeCheckConfigViewer": {
    "name": "roles/monitoring.uptimeCheckConfigViewer",
    "title": "Monitoring Uptime Check Configuration Viewer",
    "description": "Read-only access to uptime check configurations.",
    "includedPermissions": [
      "monitoring.uptimeCheckConfigs.get",
      "monitoring.uptimeCheckConfigs.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/monitoring.viewer": {
    "name": "roles/monitoring.viewer",
    "title": "Monitoring Viewer",
    "description": "Read-only access to get and list information about all monitoring data and configuration.",
    "includedPermissions": [
      "cloudnotifications.activities.list",
      "monitoring.alertPolicies.get",
      "monitoring.alertPolicies.list",
      "monitoring.dashboards.get",
      "monitoring.dashboards.list",
      "monitoring.groups.get",
      "monitoring.groups.list",
      "monitoring.metricDescriptors.get",
      "monitoring.metricDescriptors.list",
      "monitoring.monitoredResourceDescriptors.get",
      "monitoring.monitoredResourceDescriptors.list",
      "monitoring.notificationChannelDescriptors.get",
      "monitoring.notificationChannelDescriptors.list",
      "monitoring.notificationChannels.get",
      "monitoring.notificationChannels.list",
      "monitoring.publicWidgets.get",
      "monitoring.publicWidgets.list",
      "monitoring.timeSeries.list",
      "monitoring.uptimeCheckConfigs.get",
      "monitoring.uptimeCheckConfigs.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "stackdriver.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/netappcloudvolumes.admin": {
    "name": "roles/netappcloudvolumes.admin",
    "title": "NetApp Cloud Volumes Admin",
    "description": "This role is managed by NetApp, not Google.",
    "includedPermissions": [
      "netappcloudvolumes.activeDirectories.create",
      "netappcloudvolumes.activeDirectories.delete",
      "netappcloudvolumes.activeDirectories.get",
      "netappcloudvolumes.activeDirectories.list",
      "netappcloudvolumes.activeDirectories.update",
      "netappcloudvolumes.ipRanges.list",
      "netappcloudvolumes.jobs.get",
      "netappcloudvolumes.jobs.list",
      "netappcloudvolumes.regions.list",
      "netappcloudvolumes.serviceLevels.list",
      "netappcloudvolumes.snapshots.create",
      "netappcloudvolumes.snapshots.delete",
      "netappcloudvolumes.snapshots.get",
      "netappcloudvolumes.snapshots.list",
      "netappcloudvolumes.snapshots.update",
      "netappcloudvolumes.volumes.create",
      "netappcloudvolumes.volumes.delete",
      "netappcloudvolumes.volumes.get",
      "netappcloudvolumes.volumes.list",
      "netappcloudvolumes.volumes.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/netappcloudvolumes.viewer": {
    "name": "roles/netappcloudvolumes.viewer",
    "title": "NetApp Cloud Volumes Viewer",
    "description": "This role is managed by NetApp, not Google.",
    "includedPermissions": [
      "netappcloudvolumes.activeDirectories.get",
      "netappcloudvolumes.activeDirectories.list",
      "netappcloudvolumes.ipRanges.list",
      "netappcloudvolumes.jobs.get",
      "netappcloudvolumes.jobs.list",
      "netappcloudvolumes.regions.list",
      "netappcloudvolumes.serviceLevels.list",
      "netappcloudvolumes.snapshots.get",
      "netappcloudvolumes.snapshots.list",
      "netappcloudvolumes.volumes.get",
      "netappcloudvolumes.volumes.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/networkmanagement.admin": {
    "name": "roles/networkmanagement.admin",
    "title": "Network Management Admin",
    "description": "Full access to Network Management resources.",
    "includedPermissions": [
      "networkmanagement.connectivitytests.create",
      "networkmanagement.connectivitytests.delete",
      "networkmanagement.connectivitytests.get",
      "networkmanagement.connectivitytests.getIamPolicy",
      "networkmanagement.connectivitytests.list",
      "networkmanagement.connectivitytests.rerun",
      "networkmanagement.connectivitytests.setIamPolicy",
      "networkmanagement.connectivitytests.update",
      "networkmanagement.locations.get",
      "networkmanagement.locations.list",
      "networkmanagement.operations.get",
      "networkmanagement.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/networkmanagement.viewer": {
    "name": "roles/networkmanagement.viewer",
    "title": "Network Management Viewer",
    "description": "Read-only access to Network Management resources.",
    "includedPermissions": [
      "networkmanagement.connectivitytests.get",
      "networkmanagement.connectivitytests.getIamPolicy",
      "networkmanagement.connectivitytests.list",
      "networkmanagement.locations.get",
      "networkmanagement.locations.list",
      "networkmanagement.operations.get",
      "networkmanagement.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/notebooks.admin": {
    "name": "roles/notebooks.admin",
    "title": "Notebooks Admin",
    "description": "Full access to Notebooks all resources.",
    "includedPermissions": [
      "notebooks.environments.create",
      "notebooks.environments.delete",
      "notebooks.environments.get",
      "notebooks.environments.getIamPolicy",
      "notebooks.environments.list",
      "notebooks.environments.setIamPolicy",
      "notebooks.instances.create",
      "notebooks.instances.delete",
      "notebooks.instances.get",
      "notebooks.instances.getIamPolicy",
      "notebooks.instances.list",
      "notebooks.instances.setIamPolicy",
      "notebooks.instances.update",
      "notebooks.locations.get",
      "notebooks.locations.list",
      "notebooks.operations.cancel",
      "notebooks.operations.delete",
      "notebooks.operations.get",
      "notebooks.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/notebooks.viewer": {
    "name": "roles/notebooks.viewer",
    "title": "Notebooks Viewer",
    "description": "Read-only access to Notebooks all resources.",
    "includedPermissions": [
      "notebooks.environments.get",
      "notebooks.environments.getIamPolicy",
      "notebooks.environments.list",
      "notebooks.instances.get",
      "notebooks.instances.getIamPolicy",
      "notebooks.instances.list",
      "notebooks.locations.get",
      "notebooks.locations.list",
      "notebooks.operations.get",
      "notebooks.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/opsconfigmonitoring.resourceMetadata.writer": {
    "name": "roles/opsconfigmonitoring.resourceMetadata.writer",
    "title": "Ops Config Monitoring Resource Metadata Writer",
    "description": "Write-only access to resource metadata. This provides exactly the permissions needed by the Ops Config Monitoring metadata agent and other systems that send metadata.",
    "includedPermissions": [
      "opsconfigmonitoring.resourceMetadata.write"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/orgpolicy.policyAdmin": {
    "name": "roles/orgpolicy.policyAdmin",
    "title": "Organization Policy Administrator",
    "description": "The permission to set Organization Policies on resources.",
    "includedPermissions": [
      "orgpolicy.policy.get",
      "orgpolicy.policy.set"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/orgpolicy.policyViewer": {
    "name": "roles/orgpolicy.policyViewer",
    "title": "Organization Policy Viewer",
    "description": "Access to view Organization Policies on resources.",
    "includedPermissions": [
      "orgpolicy.policy.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/owner": {
    "name": "roles/owner",
    "title": "Owner",
    "description": "Full access to all resources.",
    "includedPermissions": [
      "accessapproval.requests.approve",
      "accessapproval.requests.dismiss",
      "accessapproval.requests.get",
      "accessapproval.requests.list",
      "accessapproval.settings.delete",
      "accessapproval.settings.get",
      "accessapproval.settings.update",
      "accesscontextmanager.accessLevels.create",
      "accesscontextmanager.accessLevels.delete",
      "accesscontextmanager.accessLevels.get",
      "accesscontextmanager.accessLevels.list",
      "accesscontextmanager.accessLevels.update",
      "accesscontextmanager.accessPolicies.create",
      "accesscontextmanager.accessPolicies.delete",
      "accesscontextmanager.accessPolicies.get",
      "accesscontextmanager.accessPolicies.getIamPolicy",
      "accesscontextmanager.accessPolicies.list",
      "accesscontextmanager.accessPolicies.setIamPolicy",
      "accesscontextmanager.accessPolicies.update",
      "accesscontextmanager.accessZones.create",
      "accesscontextmanager.accessZones.delete",
      "accesscontextmanager.accessZones.get",
      "accesscontextmanager.accessZones.list",
      "accesscontextmanager.accessZones.update",
      "accesscontextmanager.policies.create",
      "accesscontextmanager.policies.delete",
      "accesscontextmanager.policies.get",
      "accesscontextmanager.policies.getIamPolicy",
      "accesscontextmanager.policies.list",
      "accesscontextmanager.policies.setIamPolicy",
      "accesscontextmanager.policies.update",
      "accesscontextmanager.servicePerimeters.create",
      "accesscontextmanager.servicePerimeters.delete",
      "accesscontextmanager.servicePerimeters.get",
      "accesscontextmanager.servicePerimeters.list",
      "accesscontextmanager.servicePerimeters.update",
      "actions.agent.claimContentProvider",
      "actions.agent.get",
      "actions.agent.update",
      "actions.agentVersions.create",
      "actions.agentVersions.delete",
      "actions.agentVersions.deploy",
      "actions.agentVersions.get",
      "actions.agentVersions.list",
      "androidmanagement.enterprises.manage",
      "apigee.apiproductattributes.createOrUpdateAll",
      "apigee.apiproductattributes.delete",
      "apigee.apiproductattributes.get",
      "apigee.apiproductattributes.list",
      "apigee.apiproductattributes.update",
      "apigee.apiproducts.create",
      "apigee.apiproducts.delete",
      "apigee.apiproducts.get",
      "apigee.apiproducts.list",
      "apigee.apiproducts.update",
      "apigee.appkeys.create",
      "apigee.appkeys.delete",
      "apigee.appkeys.get",
      "apigee.appkeys.manage",
      "apigee.apps.get",
      "apigee.apps.list",
      "apigee.deployments.create",
      "apigee.deployments.delete",
      "apigee.deployments.get",
      "apigee.deployments.list",
      "apigee.deployments.update",
      "apigee.developerappattributes.createOrUpdateAll",
      "apigee.developerappattributes.delete",
      "apigee.developerappattributes.get",
      "apigee.developerappattributes.list",
      "apigee.developerappattributes.update",
      "apigee.developerapps.create",
      "apigee.developerapps.delete",
      "apigee.developerapps.get",
      "apigee.developerapps.list",
      "apigee.developerapps.manage",
      "apigee.developerattributes.createOrUpdateAll",
      "apigee.developerattributes.delete",
      "apigee.developerattributes.get",
      "apigee.developerattributes.list",
      "apigee.developerattributes.update",
      "apigee.developers.create",
      "apigee.developers.delete",
      "apigee.developers.get",
      "apigee.developers.list",
      "apigee.developers.update",
      "apigee.environments.create",
      "apigee.environments.delete",
      "apigee.environments.get",
      "apigee.environments.getDataLocation",
      "apigee.environments.getIamPolicy",
      "apigee.environments.getStats",
      "apigee.environments.list",
      "apigee.environments.manageRuntime",
      "apigee.environments.setIamPolicy",
      "apigee.environments.update",
      "apigee.flowhooks.attachSharedFlow",
      "apigee.flowhooks.detachSharedFlow",
      "apigee.flowhooks.getSharedFlow",
      "apigee.flowhooks.list",
      "apigee.keystorealiases.create",
      "apigee.keystorealiases.delete",
      "apigee.keystorealiases.exportCertificate",
      "apigee.keystorealiases.generateCSR",
      "apigee.keystorealiases.get",
      "apigee.keystorealiases.list",
      "apigee.keystorealiases.update",
      "apigee.keystores.create",
      "apigee.keystores.delete",
      "apigee.keystores.export",
      "apigee.keystores.get",
      "apigee.keystores.list",
      "apigee.keyvaluemaps.create",
      "apigee.keyvaluemaps.delete",
      "apigee.keyvaluemaps.list",
      "apigee.maskconfigs.get",
      "apigee.maskconfigs.update",
      "apigee.organizations.create",
      "apigee.organizations.get",
      "apigee.organizations.list",
      "apigee.organizations.update",
      "apigee.proxies.create",
      "apigee.proxies.delete",
      "apigee.proxies.get",
      "apigee.proxies.list",
      "apigee.proxyrevisions.delete",
      "apigee.proxyrevisions.deploy",
      "apigee.proxyrevisions.get",
      "apigee.proxyrevisions.list",
      "apigee.proxyrevisions.undeploy",
      "apigee.proxyrevisions.update",
      "apigee.queries.create",
      "apigee.queries.get",
      "apigee.queries.list",
      "apigee.references.create",
      "apigee.references.delete",
      "apigee.references.get",
      "apigee.references.list",
      "apigee.references.update",
      "apigee.reports.create",
      "apigee.reports.delete",
      "apigee.reports.get",
      "apigee.reports.list",
      "apigee.reports.update",
      "apigee.resourcefiles.create",
      "apigee.resourcefiles.delete",
      "apigee.resourcefiles.get",
      "apigee.resourcefiles.list",
      "apigee.resourcefiles.update",
      "apigee.sharedflowrevisions.delete",
      "apigee.sharedflowrevisions.deploy",
      "apigee.sharedflowrevisions.get",
      "apigee.sharedflowrevisions.list",
      "apigee.sharedflowrevisions.undeploy",
      "apigee.sharedflowrevisions.update",
      "apigee.sharedflows.create",
      "apigee.sharedflows.delete",
      "apigee.sharedflows.get",
      "apigee.sharedflows.list",
      "apigee.targetservers.create",
      "apigee.targetservers.delete",
      "apigee.targetservers.get",
      "apigee.targetservers.list",
      "apigee.targetservers.update",
      "apigee.tracesessions.create",
      "apigee.tracesessions.delete",
      "apigee.tracesessions.get",
      "apigee.tracesessions.list",
      "appengine.applications.create",
      "appengine.applications.get",
      "appengine.applications.update",
      "appengine.instances.delete",
      "appengine.instances.get",
      "appengine.instances.list",
      "appengine.memcache.addKey",
      "appengine.memcache.flush",
      "appengine.memcache.get",
      "appengine.memcache.getKey",
      "appengine.memcache.list",
      "appengine.memcache.update",
      "appengine.operations.get",
      "appengine.operations.list",
      "appengine.runtimes.actAsAdmin",
      "appengine.services.delete",
      "appengine.services.get",
      "appengine.services.list",
      "appengine.services.update",
      "appengine.versions.create",
      "appengine.versions.delete",
      "appengine.versions.get",
      "appengine.versions.getFileContents",
      "appengine.versions.list",
      "appengine.versions.update",
      "artifactregistry.files.get",
      "artifactregistry.files.list",
      "artifactregistry.packages.delete",
      "artifactregistry.packages.get",
      "artifactregistry.packages.list",
      "artifactregistry.repositories.create",
      "artifactregistry.repositories.delete",
      "artifactregistry.repositories.deleteArtifacts",
      "artifactregistry.repositories.downloadArtifacts",
      "artifactregistry.repositories.get",
      "artifactregistry.repositories.getIamPolicy",
      "artifactregistry.repositories.list",
      "artifactregistry.repositories.setIamPolicy",
      "artifactregistry.repositories.update",
      "artifactregistry.repositories.uploadArtifacts",
      "artifactregistry.tags.create",
      "artifactregistry.tags.delete",
      "artifactregistry.tags.get",
      "artifactregistry.tags.list",
      "artifactregistry.tags.update",
      "artifactregistry.versions.delete",
      "artifactregistry.versions.get",
      "artifactregistry.versions.list",
      "automl.annotationSpecs.create",
      "automl.annotationSpecs.delete",
      "automl.annotationSpecs.get",
      "automl.annotationSpecs.list",
      "automl.annotationSpecs.update",
      "automl.annotations.approve",
      "automl.annotations.create",
      "automl.annotations.list",
      "automl.annotations.manipulate",
      "automl.annotations.reject",
      "automl.columnSpecs.get",
      "automl.columnSpecs.list",
      "automl.columnSpecs.update",
      "automl.datasets.create",
      "automl.datasets.delete",
      "automl.datasets.export",
      "automl.datasets.get",
      "automl.datasets.getIamPolicy",
      "automl.datasets.import",
      "automl.datasets.list",
      "automl.datasets.setIamPolicy",
      "automl.datasets.update",
      "automl.examples.delete",
      "automl.examples.get",
      "automl.examples.list",
      "automl.humanAnnotationTasks.create",
      "automl.humanAnnotationTasks.delete",
      "automl.humanAnnotationTasks.get",
      "automl.humanAnnotationTasks.list",
      "automl.locations.get",
      "automl.locations.getIamPolicy",
      "automl.locations.list",
      "automl.locations.setIamPolicy",
      "automl.modelEvaluations.create",
      "automl.modelEvaluations.get",
      "automl.modelEvaluations.list",
      "automl.models.create",
      "automl.models.delete",
      "automl.models.deploy",
      "automl.models.export",
      "automl.models.get",
      "automl.models.getIamPolicy",
      "automl.models.list",
      "automl.models.predict",
      "automl.models.setIamPolicy",
      "automl.models.undeploy",
      "automl.operations.cancel",
      "automl.operations.delete",
      "automl.operations.get",
      "automl.operations.list",
      "automl.tableSpecs.get",
      "automl.tableSpecs.list",
      "automl.tableSpecs.update",
      "automlrecommendations.apiKeys.create",
      "automlrecommendations.apiKeys.delete",
      "automlrecommendations.apiKeys.list",
      "automlrecommendations.catalogItems.create",
      "automlrecommendations.catalogItems.delete",
      "automlrecommendations.catalogItems.get",
      "automlrecommendations.catalogItems.list",
      "automlrecommendations.catalogItems.update",
      "automlrecommendations.catalogs.getStats",
      "automlrecommendations.catalogs.list",
      "automlrecommendations.eventStores.getStats",
      "automlrecommendations.events.create",
      "automlrecommendations.events.list",
      "automlrecommendations.events.purge",
      "automlrecommendations.placements.getStats",
      "automlrecommendations.placements.list",
      "automlrecommendations.recommendations.list",
      "bigquery.config.get",
      "bigquery.config.update",
      "bigquery.connections.create",
      "bigquery.connections.delete",
      "bigquery.connections.get",
      "bigquery.connections.getIamPolicy",
      "bigquery.connections.list",
      "bigquery.connections.setIamPolicy",
      "bigquery.connections.update",
      "bigquery.connections.use",
      "bigquery.datasets.create",
      "bigquery.datasets.delete",
      "bigquery.datasets.get",
      "bigquery.datasets.getIamPolicy",
      "bigquery.datasets.setIamPolicy",
      "bigquery.datasets.update",
      "bigquery.datasets.updateTag",
      "bigquery.jobs.create",
      "bigquery.jobs.get",
      "bigquery.jobs.list",
      "bigquery.jobs.listAll",
      "bigquery.jobs.update",
      "bigquery.models.create",
      "bigquery.models.delete",
      "bigquery.models.getData",
      "bigquery.models.getMetadata",
      "bigquery.models.list",
      "bigquery.models.updateData",
      "bigquery.models.updateMetadata",
      "bigquery.models.updateTag",
      "bigquery.readsessions.create",
      "bigquery.routines.create",
      "bigquery.routines.delete",
      "bigquery.routines.get",
      "bigquery.routines.list",
      "bigquery.routines.update",
      "bigquery.savedqueries.create",
      "bigquery.savedqueries.delete",
      "bigquery.savedqueries.get",
      "bigquery.savedqueries.list",
      "bigquery.savedqueries.update",
      "bigquery.transfers.get",
      "bigquery.transfers.update",
      "bigtable.appProfiles.create",
      "bigtable.appProfiles.delete",
      "bigtable.appProfiles.get",
      "bigtable.appProfiles.list",
      "bigtable.appProfiles.update",
      "bigtable.clusters.create",
      "bigtable.clusters.delete",
      "bigtable.clusters.get",
      "bigtable.clusters.list",
      "bigtable.clusters.update",
      "bigtable.instances.create",
      "bigtable.instances.delete",
      "bigtable.instances.get",
      "bigtable.instances.getIamPolicy",
      "bigtable.instances.list",
      "bigtable.instances.setIamPolicy",
      "bigtable.instances.update",
      "bigtable.locations.list",
      "bigtable.tables.checkConsistency",
      "bigtable.tables.create",
      "bigtable.tables.delete",
      "bigtable.tables.generateConsistencyToken",
      "bigtable.tables.get",
      "bigtable.tables.getIamPolicy",
      "bigtable.tables.list",
      "bigtable.tables.mutateRows",
      "bigtable.tables.readRows",
      "bigtable.tables.sampleRowKeys",
      "bigtable.tables.setIamPolicy",
      "bigtable.tables.update",
      "billing.resourceCosts.get",
      "binaryauthorization.attestors.create",
      "binaryauthorization.attestors.delete",
      "binaryauthorization.attestors.get",
      "binaryauthorization.attestors.getIamPolicy",
      "binaryauthorization.attestors.list",
      "binaryauthorization.attestors.setIamPolicy",
      "binaryauthorization.attestors.update",
      "binaryauthorization.attestors.verifyImageAttested",
      "binaryauthorization.policy.get",
      "binaryauthorization.policy.getIamPolicy",
      "binaryauthorization.policy.setIamPolicy",
      "binaryauthorization.policy.update",
      "chat.bots.get",
      "chat.bots.update",
      "clientauthconfig.brands.create",
      "clientauthconfig.brands.delete",
      "clientauthconfig.brands.get",
      "clientauthconfig.brands.list",
      "clientauthconfig.brands.update",
      "clientauthconfig.clients.create",
      "clientauthconfig.clients.createSecret",
      "clientauthconfig.clients.delete",
      "clientauthconfig.clients.get",
      "clientauthconfig.clients.getWithSecret",
      "clientauthconfig.clients.list",
      "clientauthconfig.clients.listWithSecrets",
      "clientauthconfig.clients.undelete",
      "clientauthconfig.clients.update",
      "cloudasset.assets.exportAccessLevel",
      "cloudasset.assets.exportAccessPolicy",
      "cloudasset.assets.exportAllAccessPolicy",
      "cloudasset.assets.exportAppengineApplications",
      "cloudasset.assets.exportAppengineServices",
      "cloudasset.assets.exportAppengineVersions",
      "cloudasset.assets.exportBigqueryDatasets",
      "cloudasset.assets.exportBigqueryTables",
      "cloudasset.assets.exportBigtableCluster",
      "cloudasset.assets.exportBigtableInstance",
      "cloudasset.assets.exportBigtableTable",
      "cloudasset.assets.exportCloudbillingBillingAccounts",
      "cloudasset.assets.exportCloudkmsCryptoKeyVersions",
      "cloudasset.assets.exportCloudkmsCryptoKeys",
      "cloudasset.assets.exportCloudkmsKeyRings",
      "cloudasset.assets.exportCloudresourcemanagerFolders",
      "cloudasset.assets.exportCloudresourcemanagerOrganizations",
      "cloudasset.assets.exportCloudresourcemanagerProjects",
      "cloudasset.assets.exportComputeAddress",
      "cloudasset.assets.exportComputeAutoscalers",
      "cloudasset.assets.exportComputeBackendBuckets",
      "cloudasset.assets.exportComputeBackendServices",
      "cloudasset.assets.exportComputeDisks",
      "cloudasset.assets.exportComputeFirewalls",
      "cloudasset.assets.exportComputeForwardingRules",
      "cloudasset.assets.exportComputeGlobalAddress",
      "cloudasset.assets.exportComputeGlobalForwardingRules",
      "cloudasset.assets.exportComputeHealthChecks",
      "cloudasset.assets.exportComputeHttpHealthChecks",
      "cloudasset.assets.exportComputeHttpsHealthChecks",
      "cloudasset.assets.exportComputeImages",
      "cloudasset.assets.exportComputeInstanceGroupManagers",
      "cloudasset.assets.exportComputeInstanceGroups",
      "cloudasset.assets.exportComputeInstanceTemplates",
      "cloudasset.assets.exportComputeInstances",
      "cloudasset.assets.exportComputeInterconnect",
      "cloudasset.assets.exportComputeInterconnectAttachment",
      "cloudasset.assets.exportComputeLicenses",
      "cloudasset.assets.exportComputeNetworks",
      "cloudasset.assets.exportComputeProjects",
      "cloudasset.assets.exportComputeRegionAutoscaler",
      "cloudasset.assets.exportComputeRegionBackendServices",
      "cloudasset.assets.exportComputeRegionDisk",
      "cloudasset.assets.exportComputeRegionInstanceGroup",
      "cloudasset.assets.exportComputeRegionInstanceGroupManager",
      "cloudasset.assets.exportComputeRouters",
      "cloudasset.assets.exportComputeRoutes",
      "cloudasset.assets.exportComputeSecurityPolicy",
      "cloudasset.assets.exportComputeSnapshots",
      "cloudasset.assets.exportComputeSslCertificates",
      "cloudasset.assets.exportComputeSubnetworks",
      "cloudasset.assets.exportComputeTargetHttpProxies",
      "cloudasset.assets.exportComputeTargetHttpsProxies",
      "cloudasset.assets.exportComputeTargetInstances",
      "cloudasset.assets.exportComputeTargetPools",
      "cloudasset.assets.exportComputeTargetSslProxies",
      "cloudasset.assets.exportComputeTargetTcpProxies",
      "cloudasset.assets.exportComputeTargetVpnGateways",
      "cloudasset.assets.exportComputeUrlMaps",
      "cloudasset.assets.exportComputeVpnTunnels",
      "cloudasset.assets.exportContainerClusterrole",
      "cloudasset.assets.exportContainerClusterrolebinding",
      "cloudasset.assets.exportContainerClusters",
      "cloudasset.assets.exportContainerNamespace",
      "cloudasset.assets.exportContainerNode",
      "cloudasset.assets.exportContainerNodepool",
      "cloudasset.assets.exportContainerPod",
      "cloudasset.assets.exportContainerRole",
      "cloudasset.assets.exportContainerRolebinding",
      "cloudasset.assets.exportContainerregistryImage",
      "cloudasset.assets.exportDatafusionInstance",
      "cloudasset.assets.exportDataprocClusters",
      "cloudasset.assets.exportDataprocJobs",
      "cloudasset.assets.exportDnsManagedZones",
      "cloudasset.assets.exportDnsPolicies",
      "cloudasset.assets.exportIamPolicy",
      "cloudasset.assets.exportIamRoles",
      "cloudasset.assets.exportIamServiceAccountKeys",
      "cloudasset.assets.exportIamServiceAccounts",
      "cloudasset.assets.exportManagedidentitiesDomain",
      "cloudasset.assets.exportOrgPolicy",
      "cloudasset.assets.exportPubsubSubscriptions",
      "cloudasset.assets.exportPubsubTopics",
      "cloudasset.assets.exportResource",
      "cloudasset.assets.exportServicePerimeter",
      "cloudasset.assets.exportServicemanagementServices",
      "cloudasset.assets.exportSpannerDatabases",
      "cloudasset.assets.exportSpannerInstances",
      "cloudasset.assets.exportSqladminInstances",
      "cloudasset.assets.exportStorageBuckets",
      "cloudasset.feeds.create",
      "cloudasset.feeds.delete",
      "cloudasset.feeds.get",
      "cloudasset.feeds.list",
      "cloudasset.feeds.update",
      "cloudbuild.builds.create",
      "cloudbuild.builds.get",
      "cloudbuild.builds.list",
      "cloudbuild.builds.update",
      "cloudconfig.configs.get",
      "cloudconfig.configs.update",
      "clouddebugger.breakpoints.create",
      "clouddebugger.breakpoints.delete",
      "clouddebugger.breakpoints.get",
      "clouddebugger.breakpoints.list",
      "clouddebugger.breakpoints.listActive",
      "clouddebugger.breakpoints.update",
      "clouddebugger.debuggees.create",
      "clouddebugger.debuggees.list",
      "cloudfunctions.functions.call",
      "cloudfunctions.functions.create",
      "cloudfunctions.functions.delete",
      "cloudfunctions.functions.get",
      "cloudfunctions.functions.getIamPolicy",
      "cloudfunctions.functions.invoke",
      "cloudfunctions.functions.list",
      "cloudfunctions.functions.setIamPolicy",
      "cloudfunctions.functions.sourceCodeGet",
      "cloudfunctions.functions.sourceCodeSet",
      "cloudfunctions.functions.update",
      "cloudfunctions.locations.list",
      "cloudfunctions.operations.get",
      "cloudfunctions.operations.list",
      "cloudiot.devices.bindGateway",
      "cloudiot.devices.create",
      "cloudiot.devices.delete",
      "cloudiot.devices.get",
      "cloudiot.devices.list",
      "cloudiot.devices.sendCommand",
      "cloudiot.devices.unbindGateway",
      "cloudiot.devices.update",
      "cloudiot.devices.updateConfig",
      "cloudiot.registries.create",
      "cloudiot.registries.delete",
      "cloudiot.registries.get",
      "cloudiot.registries.getIamPolicy",
      "cloudiot.registries.list",
      "cloudiot.registries.setIamPolicy",
      "cloudiot.registries.update",
      "cloudiottoken.tokensettings.get",
      "cloudiottoken.tokensettings.update",
      "cloudjobdiscovery.companies.create",
      "cloudjobdiscovery.companies.delete",
      "cloudjobdiscovery.companies.get",
      "cloudjobdiscovery.companies.list",
      "cloudjobdiscovery.companies.update",
      "cloudjobdiscovery.events.create",
      "cloudjobdiscovery.jobs.create",
      "cloudjobdiscovery.jobs.delete",
      "cloudjobdiscovery.jobs.get",
      "cloudjobdiscovery.jobs.search",
      "cloudjobdiscovery.jobs.update",
      "cloudjobdiscovery.profiles.create",
      "cloudjobdiscovery.profiles.delete",
      "cloudjobdiscovery.profiles.get",
      "cloudjobdiscovery.profiles.search",
      "cloudjobdiscovery.profiles.update",
      "cloudjobdiscovery.tenants.create",
      "cloudjobdiscovery.tenants.delete",
      "cloudjobdiscovery.tenants.get",
      "cloudjobdiscovery.tenants.update",
      "cloudjobdiscovery.tools.access",
      "cloudkms.cryptoKeyVersions.create",
      "cloudkms.cryptoKeyVersions.destroy",
      "cloudkms.cryptoKeyVersions.get",
      "cloudkms.cryptoKeyVersions.list",
      "cloudkms.cryptoKeyVersions.restore",
      "cloudkms.cryptoKeyVersions.update",
      "cloudkms.cryptoKeyVersions.useToDecrypt",
      "cloudkms.cryptoKeyVersions.useToEncrypt",
      "cloudkms.cryptoKeyVersions.useToSign",
      "cloudkms.cryptoKeyVersions.viewPublicKey",
      "cloudkms.cryptoKeys.create",
      "cloudkms.cryptoKeys.get",
      "cloudkms.cryptoKeys.getIamPolicy",
      "cloudkms.cryptoKeys.list",
      "cloudkms.cryptoKeys.setIamPolicy",
      "cloudkms.cryptoKeys.update",
      "cloudkms.importJobs.create",
      "cloudkms.importJobs.get",
      "cloudkms.importJobs.getIamPolicy",
      "cloudkms.importJobs.list",
      "cloudkms.importJobs.setIamPolicy",
      "cloudkms.importJobs.useToImport",
      "cloudkms.keyRings.create",
      "cloudkms.keyRings.get",
      "cloudkms.keyRings.getIamPolicy",
      "cloudkms.keyRings.list",
      "cloudkms.keyRings.setIamPolicy",
      "cloudmessaging.messages.create",
      "cloudmigration.velostrataendpoints.connect",
      "cloudnotifications.activities.list",
      "cloudprivatecatalog.targets.get",
      "cloudprivatecatalogproducer.associations.create",
      "cloudprivatecatalogproducer.associations.delete",
      "cloudprivatecatalogproducer.associations.get",
      "cloudprivatecatalogproducer.associations.list",
      "cloudprivatecatalogproducer.catalogs.create",
      "cloudprivatecatalogproducer.catalogs.delete",
      "cloudprivatecatalogproducer.catalogs.get",
      "cloudprivatecatalogproducer.catalogs.getIamPolicy",
      "cloudprivatecatalogproducer.catalogs.list",
      "cloudprivatecatalogproducer.catalogs.setIamPolicy",
      "cloudprivatecatalogproducer.catalogs.undelete",
      "cloudprivatecatalogproducer.catalogs.update",
      "cloudprivatecatalogproducer.targets.associate",
      "cloudprivatecatalogproducer.targets.unassociate",
      "cloudprofiler.profiles.create",
      "cloudprofiler.profiles.list",
      "cloudprofiler.profiles.update",
      "cloudscheduler.jobs.create",
      "cloudscheduler.jobs.delete",
      "cloudscheduler.jobs.enable",
      "cloudscheduler.jobs.fullView",
      "cloudscheduler.jobs.get",
      "cloudscheduler.jobs.list",
      "cloudscheduler.jobs.pause",
      "cloudscheduler.jobs.run",
      "cloudscheduler.jobs.update",
      "cloudscheduler.locations.get",
      "cloudscheduler.locations.list",
      "cloudsecurityscanner.crawledurls.list",
      "cloudsecurityscanner.results.get",
      "cloudsecurityscanner.results.list",
      "cloudsecurityscanner.scanruns.get",
      "cloudsecurityscanner.scanruns.getSummary",
      "cloudsecurityscanner.scanruns.list",
      "cloudsecurityscanner.scanruns.stop",
      "cloudsecurityscanner.scans.create",
      "cloudsecurityscanner.scans.delete",
      "cloudsecurityscanner.scans.get",
      "cloudsecurityscanner.scans.list",
      "cloudsecurityscanner.scans.run",
      "cloudsecurityscanner.scans.update",
      "cloudsql.backupRuns.create",
      "cloudsql.backupRuns.delete",
      "cloudsql.backupRuns.get",
      "cloudsql.backupRuns.list",
      "cloudsql.databases.create",
      "cloudsql.databases.delete",
      "cloudsql.databases.get",
      "cloudsql.databases.list",
      "cloudsql.databases.update",
      "cloudsql.instances.addServerCa",
      "cloudsql.instances.clone",
      "cloudsql.instances.connect",
      "cloudsql.instances.create",
      "cloudsql.instances.delete",
      "cloudsql.instances.demoteMaster",
      "cloudsql.instances.export",
      "cloudsql.instances.failover",
      "cloudsql.instances.get",
      "cloudsql.instances.import",
      "cloudsql.instances.list",
      "cloudsql.instances.listServerCas",
      "cloudsql.instances.promoteReplica",
      "cloudsql.instances.resetSslConfig",
      "cloudsql.instances.restart",
      "cloudsql.instances.restoreBackup",
      "cloudsql.instances.rotateServerCa",
      "cloudsql.instances.startReplica",
      "cloudsql.instances.stopReplica",
      "cloudsql.instances.truncateLog",
      "cloudsql.instances.update",
      "cloudsql.sslCerts.create",
      "cloudsql.sslCerts.createEphemeral",
      "cloudsql.sslCerts.delete",
      "cloudsql.sslCerts.get",
      "cloudsql.sslCerts.list",
      "cloudsql.users.create",
      "cloudsql.users.delete",
      "cloudsql.users.list",
      "cloudsql.users.update",
      "cloudsupport.accounts.create",
      "cloudsupport.accounts.delete",
      "cloudsupport.accounts.get",
      "cloudsupport.accounts.getIamPolicy",
      "cloudsupport.accounts.getUserRoles",
      "cloudsupport.accounts.list",
      "cloudsupport.accounts.setIamPolicy",
      "cloudsupport.accounts.update",
      "cloudsupport.accounts.updateUserRoles",
      "cloudsupport.operations.get",
      "cloudtasks.locations.get",
      "cloudtasks.locations.list",
      "cloudtasks.queues.create",
      "cloudtasks.queues.delete",
      "cloudtasks.queues.get",
      "cloudtasks.queues.getIamPolicy",
      "cloudtasks.queues.list",
      "cloudtasks.queues.pause",
      "cloudtasks.queues.purge",
      "cloudtasks.queues.resume",
      "cloudtasks.queues.setIamPolicy",
      "cloudtasks.queues.update",
      "cloudtasks.tasks.create",
      "cloudtasks.tasks.delete",
      "cloudtasks.tasks.fullView",
      "cloudtasks.tasks.get",
      "cloudtasks.tasks.list",
      "cloudtasks.tasks.run",
      "cloudtestservice.environmentcatalog.get",
      "cloudtestservice.matrices.create",
      "cloudtestservice.matrices.get",
      "cloudtestservice.matrices.update",
      "cloudtoolresults.executions.create",
      "cloudtoolresults.executions.get",
      "cloudtoolresults.executions.list",
      "cloudtoolresults.executions.update",
      "cloudtoolresults.histories.create",
      "cloudtoolresults.histories.get",
      "cloudtoolresults.histories.list",
      "cloudtoolresults.settings.create",
      "cloudtoolresults.settings.get",
      "cloudtoolresults.settings.update",
      "cloudtoolresults.steps.create",
      "cloudtoolresults.steps.get",
      "cloudtoolresults.steps.list",
      "cloudtoolresults.steps.update",
      "cloudtrace.insights.get",
      "cloudtrace.insights.list",
      "cloudtrace.stats.get",
      "cloudtrace.tasks.create",
      "cloudtrace.tasks.delete",
      "cloudtrace.tasks.get",
      "cloudtrace.tasks.list",
      "cloudtrace.traces.get",
      "cloudtrace.traces.list",
      "cloudtrace.traces.patch",
      "cloudtranslate.generalModels.batchPredict",
      "cloudtranslate.generalModels.get",
      "cloudtranslate.generalModels.predict",
      "cloudtranslate.glossaries.batchPredict",
      "cloudtranslate.glossaries.create",
      "cloudtranslate.glossaries.delete",
      "cloudtranslate.glossaries.get",
      "cloudtranslate.glossaries.list",
      "cloudtranslate.glossaries.predict",
      "cloudtranslate.languageDetectionModels.predict",
      "cloudtranslate.locations.get",
      "cloudtranslate.locations.list",
      "cloudtranslate.operations.cancel",
      "cloudtranslate.operations.delete",
      "cloudtranslate.operations.get",
      "cloudtranslate.operations.list",
      "cloudtranslate.operations.wait",
      "composer.environments.create",
      "composer.environments.delete",
      "composer.environments.get",
      "composer.environments.list",
      "composer.environments.update",
      "composer.imageversions.list",
      "composer.operations.delete",
      "composer.operations.get",
      "composer.operations.list",
      "compute.acceleratorTypes.get",
      "compute.acceleratorTypes.list",
      "compute.addresses.create",
      "compute.addresses.createInternal",
      "compute.addresses.delete",
      "compute.addresses.deleteInternal",
      "compute.addresses.get",
      "compute.addresses.list",
      "compute.addresses.setLabels",
      "compute.addresses.use",
      "compute.addresses.useInternal",
      "compute.autoscalers.create",
      "compute.autoscalers.delete",
      "compute.autoscalers.get",
      "compute.autoscalers.list",
      "compute.autoscalers.update",
      "compute.backendBuckets.create",
      "compute.backendBuckets.delete",
      "compute.backendBuckets.get",
      "compute.backendBuckets.list",
      "compute.backendBuckets.update",
      "compute.backendBuckets.use",
      "compute.backendServices.create",
      "compute.backendServices.delete",
      "compute.backendServices.get",
      "compute.backendServices.list",
      "compute.backendServices.setSecurityPolicy",
      "compute.backendServices.update",
      "compute.backendServices.use",
      "compute.commitments.create",
      "compute.commitments.get",
      "compute.commitments.list",
      "compute.diskTypes.get",
      "compute.diskTypes.list",
      "compute.disks.addResourcePolicies",
      "compute.disks.create",
      "compute.disks.createSnapshot",
      "compute.disks.delete",
      "compute.disks.get",
      "compute.disks.getIamPolicy",
      "compute.disks.list",
      "compute.disks.removeResourcePolicies",
      "compute.disks.resize",
      "compute.disks.setIamPolicy",
      "compute.disks.setLabels",
      "compute.disks.update",
      "compute.disks.use",
      "compute.disks.useReadOnly",
      "compute.externalVpnGateways.create",
      "compute.externalVpnGateways.delete",
      "compute.externalVpnGateways.get",
      "compute.externalVpnGateways.list",
      "compute.externalVpnGateways.setLabels",
      "compute.externalVpnGateways.use",
      "compute.firewalls.create",
      "compute.firewalls.delete",
      "compute.firewalls.get",
      "compute.firewalls.list",
      "compute.firewalls.update",
      "compute.forwardingRules.create",
      "compute.forwardingRules.delete",
      "compute.forwardingRules.get",
      "compute.forwardingRules.list",
      "compute.forwardingRules.setLabels",
      "compute.forwardingRules.setTarget",
      "compute.globalAddresses.create",
      "compute.globalAddresses.createInternal",
      "compute.globalAddresses.delete",
      "compute.globalAddresses.deleteInternal",
      "compute.globalAddresses.get",
      "compute.globalAddresses.list",
      "compute.globalAddresses.setLabels",
      "compute.globalAddresses.use",
      "compute.globalForwardingRules.create",
      "compute.globalForwardingRules.delete",
      "compute.globalForwardingRules.get",
      "compute.globalForwardingRules.list",
      "compute.globalForwardingRules.setLabels",
      "compute.globalForwardingRules.setTarget",
      "compute.globalOperations.delete",
      "compute.globalOperations.get",
      "compute.globalOperations.getIamPolicy",
      "compute.globalOperations.list",
      "compute.globalOperations.setIamPolicy",
      "compute.healthChecks.create",
      "compute.healthChecks.delete",
      "compute.healthChecks.get",
      "compute.healthChecks.list",
      "compute.healthChecks.update",
      "compute.healthChecks.use",
      "compute.healthChecks.useReadOnly",
      "compute.httpHealthChecks.create",
      "compute.httpHealthChecks.delete",
      "compute.httpHealthChecks.get",
      "compute.httpHealthChecks.list",
      "compute.httpHealthChecks.update",
      "compute.httpHealthChecks.use",
      "compute.httpHealthChecks.useReadOnly",
      "compute.httpsHealthChecks.create",
      "compute.httpsHealthChecks.delete",
      "compute.httpsHealthChecks.get",
      "compute.httpsHealthChecks.list",
      "compute.httpsHealthChecks.update",
      "compute.httpsHealthChecks.use",
      "compute.httpsHealthChecks.useReadOnly",
      "compute.images.create",
      "compute.images.delete",
      "compute.images.deprecate",
      "compute.images.get",
      "compute.images.getFromFamily",
      "compute.images.getIamPolicy",
      "compute.images.list",
      "compute.images.setIamPolicy",
      "compute.images.setLabels",
      "compute.images.update",
      "compute.images.useReadOnly",
      "compute.instanceGroupManagers.create",
      "compute.instanceGroupManagers.delete",
      "compute.instanceGroupManagers.get",
      "compute.instanceGroupManagers.list",
      "compute.instanceGroupManagers.update",
      "compute.instanceGroupManagers.use",
      "compute.instanceGroups.create",
      "compute.instanceGroups.delete",
      "compute.instanceGroups.get",
      "compute.instanceGroups.list",
      "compute.instanceGroups.update",
      "compute.instanceGroups.use",
      "compute.instanceTemplates.create",
      "compute.instanceTemplates.delete",
      "compute.instanceTemplates.get",
      "compute.instanceTemplates.getIamPolicy",
      "compute.instanceTemplates.list",
      "compute.instanceTemplates.setIamPolicy",
      "compute.instanceTemplates.useReadOnly",
      "compute.instances.addAccessConfig",
      "compute.instances.addMaintenancePolicies",
      "compute.instances.attachDisk",
      "compute.instances.create",
      "compute.instances.delete",
      "compute.instances.deleteAccessConfig",
      "compute.instances.detachDisk",
      "compute.instances.get",
      "compute.instances.getGuestAttributes",
      "compute.instances.getIamPolicy",
      "compute.instances.getSerialPortOutput",
      "compute.instances.getShieldedInstanceIdentity",
      "compute.instances.getShieldedVmIdentity",
      "compute.instances.list",
      "compute.instances.listReferrers",
      "compute.instances.osAdminLogin",
      "compute.instances.osLogin",
      "compute.instances.removeMaintenancePolicies",
      "compute.instances.reset",
      "compute.instances.resume",
      "compute.instances.setDeletionProtection",
      "compute.instances.setDiskAutoDelete",
      "compute.instances.setIamPolicy",
      "compute.instances.setLabels",
      "compute.instances.setMachineResources",
      "compute.instances.setMachineType",
      "compute.instances.setMetadata",
      "compute.instances.setMinCpuPlatform",
      "compute.instances.setScheduling",
      "compute.instances.setServiceAccount",
      "compute.instances.setShieldedInstanceIntegrityPolicy",
      "compute.instances.setShieldedVmIntegrityPolicy",
      "compute.instances.setTags",
      "compute.instances.start",
      "compute.instances.startWithEncryptionKey",
      "compute.instances.stop",
      "compute.instances.suspend",
      "compute.instances.updateAccessConfig",
      "compute.instances.updateDisplayDevice",
      "compute.instances.updateNetworkInterface",
      "compute.instances.updateShieldedInstanceConfig",
      "compute.instances.updateShieldedVmConfig",
      "compute.instances.use",
      "compute.interconnectAttachments.create",
      "compute.interconnectAttachments.delete",
      "compute.interconnectAttachments.get",
      "compute.interconnectAttachments.list",
      "compute.interconnectAttachments.setLabels",
      "compute.interconnectAttachments.update",
      "compute.interconnectAttachments.use",
      "compute.interconnectLocations.get",
      "compute.interconnectLocations.list",
      "compute.interconnects.create",
      "compute.interconnects.delete",
      "compute.interconnects.get",
      "compute.interconnects.list",
      "compute.interconnects.setLabels",
      "compute.interconnects.update",
      "compute.interconnects.use",
      "compute.licenseCodes.get",
      "compute.licenseCodes.getIamPolicy",
      "compute.licenseCodes.list",
      "compute.licenseCodes.setIamPolicy",
      "compute.licenseCodes.update",
      "compute.licenseCodes.use",
      "compute.licenses.create",
      "compute.licenses.delete",
      "compute.licenses.get",
      "compute.licenses.getIamPolicy",
      "compute.licenses.list",
      "compute.licenses.setIamPolicy",
      "compute.machineTypes.get",
      "compute.machineTypes.list",
      "compute.maintenancePolicies.create",
      "compute.maintenancePolicies.delete",
      "compute.maintenancePolicies.get",
      "compute.maintenancePolicies.getIamPolicy",
      "compute.maintenancePolicies.list",
      "compute.maintenancePolicies.setIamPolicy",
      "compute.maintenancePolicies.use",
      "compute.networkEndpointGroups.attachNetworkEndpoints",
      "compute.networkEndpointGroups.create",
      "compute.networkEndpointGroups.delete",
      "compute.networkEndpointGroups.detachNetworkEndpoints",
      "compute.networkEndpointGroups.get",
      "compute.networkEndpointGroups.getIamPolicy",
      "compute.networkEndpointGroups.list",
      "compute.networkEndpointGroups.setIamPolicy",
      "compute.networkEndpointGroups.use",
      "compute.networks.addPeering",
      "compute.networks.create",
      "compute.networks.delete",
      "compute.networks.get",
      "compute.networks.list",
      "compute.networks.listPeeringRoutes",
      "compute.networks.mirror",
      "compute.networks.removePeering",
      "compute.networks.switchToCustomMode",
      "compute.networks.update",
      "compute.networks.updatePeering",
      "compute.networks.updatePolicy",
      "compute.networks.use",
      "compute.networks.useExternalIp",
      "compute.nodeGroups.addNodes",
      "compute.nodeGroups.create",
      "compute.nodeGroups.delete",
      "compute.nodeGroups.deleteNodes",
      "compute.nodeGroups.get",
      "compute.nodeGroups.getIamPolicy",
      "compute.nodeGroups.list",
      "compute.nodeGroups.setIamPolicy",
      "compute.nodeGroups.setNodeTemplate",
      "compute.nodeGroups.update",
      "compute.nodeTemplates.create",
      "compute.nodeTemplates.delete",
      "compute.nodeTemplates.get",
      "compute.nodeTemplates.getIamPolicy",
      "compute.nodeTemplates.list",
      "compute.nodeTemplates.setIamPolicy",
      "compute.nodeTypes.get",
      "compute.nodeTypes.list",
      "compute.oslogin.updateExternalUser",
      "compute.packetMirrorings.update",
      "compute.projects.get",
      "compute.projects.setCommonInstanceMetadata",
      "compute.projects.setDefaultNetworkTier",
      "compute.projects.setDefaultServiceAccount",
      "compute.projects.setUsageExportBucket",
      "compute.regionBackendServices.create",
      "compute.regionBackendServices.delete",
      "compute.regionBackendServices.get",
      "compute.regionBackendServices.list",
      "compute.regionBackendServices.setSecurityPolicy",
      "compute.regionBackendServices.update",
      "compute.regionBackendServices.use",
      "compute.regionOperations.delete",
      "compute.regionOperations.get",
      "compute.regionOperations.getIamPolicy",
      "compute.regionOperations.list",
      "compute.regionOperations.setIamPolicy",
      "compute.regions.get",
      "compute.regions.list",
      "compute.reservations.create",
      "compute.reservations.delete",
      "compute.reservations.get",
      "compute.reservations.list",
      "compute.reservations.resize",
      "compute.resourcePolicies.create",
      "compute.resourcePolicies.delete",
      "compute.resourcePolicies.get",
      "compute.resourcePolicies.list",
      "compute.resourcePolicies.use",
      "compute.routers.create",
      "compute.routers.delete",
      "compute.routers.get",
      "compute.routers.list",
      "compute.routers.update",
      "compute.routers.use",
      "compute.routes.create",
      "compute.routes.delete",
      "compute.routes.get",
      "compute.routes.list",
      "compute.securityPolicies.create",
      "compute.securityPolicies.delete",
      "compute.securityPolicies.get",
      "compute.securityPolicies.getIamPolicy",
      "compute.securityPolicies.list",
      "compute.securityPolicies.setIamPolicy",
      "compute.securityPolicies.update",
      "compute.securityPolicies.use",
      "compute.snapshots.create",
      "compute.snapshots.delete",
      "compute.snapshots.get",
      "compute.snapshots.getIamPolicy",
      "compute.snapshots.list",
      "compute.snapshots.setIamPolicy",
      "compute.snapshots.setLabels",
      "compute.snapshots.useReadOnly",
      "compute.sslCertificates.create",
      "compute.sslCertificates.delete",
      "compute.sslCertificates.get",
      "compute.sslCertificates.list",
      "compute.sslPolicies.create",
      "compute.sslPolicies.delete",
      "compute.sslPolicies.get",
      "compute.sslPolicies.list",
      "compute.sslPolicies.listAvailableFeatures",
      "compute.sslPolicies.update",
      "compute.sslPolicies.use",
      "compute.subnetworks.create",
      "compute.subnetworks.delete",
      "compute.subnetworks.expandIpCidrRange",
      "compute.subnetworks.get",
      "compute.subnetworks.getIamPolicy",
      "compute.subnetworks.list",
      "compute.subnetworks.mirror",
      "compute.subnetworks.setIamPolicy",
      "compute.subnetworks.setPrivateIpGoogleAccess",
      "compute.subnetworks.update",
      "compute.subnetworks.use",
      "compute.subnetworks.useExternalIp",
      "compute.targetHttpProxies.create",
      "compute.targetHttpProxies.delete",
      "compute.targetHttpProxies.get",
      "compute.targetHttpProxies.list",
      "compute.targetHttpProxies.setUrlMap",
      "compute.targetHttpProxies.use",
      "compute.targetHttpsProxies.create",
      "compute.targetHttpsProxies.delete",
      "compute.targetHttpsProxies.get",
      "compute.targetHttpsProxies.list",
      "compute.targetHttpsProxies.setSslCertificates",
      "compute.targetHttpsProxies.setSslPolicy",
      "compute.targetHttpsProxies.setUrlMap",
      "compute.targetHttpsProxies.use",
      "compute.targetInstances.create",
      "compute.targetInstances.delete",
      "compute.targetInstances.get",
      "compute.targetInstances.list",
      "compute.targetInstances.use",
      "compute.targetPools.addHealthCheck",
      "compute.targetPools.addInstance",
      "compute.targetPools.create",
      "compute.targetPools.delete",
      "compute.targetPools.get",
      "compute.targetPools.list",
      "compute.targetPools.removeHealthCheck",
      "compute.targetPools.removeInstance",
      "compute.targetPools.update",
      "compute.targetPools.use",
      "compute.targetSslProxies.create",
      "compute.targetSslProxies.delete",
      "compute.targetSslProxies.get",
      "compute.targetSslProxies.list",
      "compute.targetSslProxies.setBackendService",
      "compute.targetSslProxies.setProxyHeader",
      "compute.targetSslProxies.setSslCertificates",
      "compute.targetSslProxies.use",
      "compute.targetTcpProxies.create",
      "compute.targetTcpProxies.delete",
      "compute.targetTcpProxies.get",
      "compute.targetTcpProxies.list",
      "compute.targetTcpProxies.update",
      "compute.targetTcpProxies.use",
      "compute.targetVpnGateways.create",
      "compute.targetVpnGateways.delete",
      "compute.targetVpnGateways.get",
      "compute.targetVpnGateways.list",
      "compute.targetVpnGateways.setLabels",
      "compute.targetVpnGateways.use",
      "compute.urlMaps.create",
      "compute.urlMaps.delete",
      "compute.urlMaps.get",
      "compute.urlMaps.invalidateCache",
      "compute.urlMaps.list",
      "compute.urlMaps.update",
      "compute.urlMaps.use",
      "compute.urlMaps.validate",
      "compute.vpnGateways.create",
      "compute.vpnGateways.delete",
      "compute.vpnGateways.get",
      "compute.vpnGateways.list",
      "compute.vpnGateways.setLabels",
      "compute.vpnGateways.use",
      "compute.vpnTunnels.create",
      "compute.vpnTunnels.delete",
      "compute.vpnTunnels.get",
      "compute.vpnTunnels.list",
      "compute.vpnTunnels.setLabels",
      "compute.zoneOperations.delete",
      "compute.zoneOperations.get",
      "compute.zoneOperations.getIamPolicy",
      "compute.zoneOperations.list",
      "compute.zoneOperations.setIamPolicy",
      "compute.zones.get",
      "compute.zones.list",
      "container.apiServices.create",
      "container.apiServices.delete",
      "container.apiServices.get",
      "container.apiServices.list",
      "container.apiServices.update",
      "container.apiServices.updateStatus",
      "container.backendConfigs.create",
      "container.backendConfigs.delete",
      "container.backendConfigs.get",
      "container.backendConfigs.list",
      "container.backendConfigs.update",
      "container.bindings.create",
      "container.bindings.delete",
      "container.bindings.get",
      "container.bindings.list",
      "container.bindings.update",
      "container.certificateSigningRequests.approve",
      "container.certificateSigningRequests.create",
      "container.certificateSigningRequests.delete",
      "container.certificateSigningRequests.get",
      "container.certificateSigningRequests.list",
      "container.certificateSigningRequests.update",
      "container.certificateSigningRequests.updateStatus",
      "container.clusterRoleBindings.create",
      "container.clusterRoleBindings.delete",
      "container.clusterRoleBindings.get",
      "container.clusterRoleBindings.list",
      "container.clusterRoleBindings.update",
      "container.clusterRoles.bind",
      "container.clusterRoles.create",
      "container.clusterRoles.delete",
      "container.clusterRoles.get",
      "container.clusterRoles.list",
      "container.clusterRoles.update",
      "container.clusters.create",
      "container.clusters.delete",
      "container.clusters.get",
      "container.clusters.getCredentials",
      "container.clusters.list",
      "container.clusters.update",
      "container.componentStatuses.get",
      "container.componentStatuses.list",
      "container.configMaps.create",
      "container.configMaps.delete",
      "container.configMaps.get",
      "container.configMaps.list",
      "container.configMaps.update",
      "container.controllerRevisions.create",
      "container.controllerRevisions.delete",
      "container.controllerRevisions.get",
      "container.controllerRevisions.list",
      "container.controllerRevisions.update",
      "container.cronJobs.create",
      "container.cronJobs.delete",
      "container.cronJobs.get",
      "container.cronJobs.getStatus",
      "container.cronJobs.list",
      "container.cronJobs.update",
      "container.cronJobs.updateStatus",
      "container.csiDrivers.create",
      "container.csiDrivers.delete",
      "container.csiDrivers.get",
      "container.csiDrivers.list",
      "container.csiDrivers.update",
      "container.csiNodes.create",
      "container.csiNodes.delete",
      "container.csiNodes.get",
      "container.csiNodes.list",
      "container.csiNodes.update",
      "container.customResourceDefinitions.create",
      "container.customResourceDefinitions.delete",
      "container.customResourceDefinitions.get",
      "container.customResourceDefinitions.list",
      "container.customResourceDefinitions.update",
      "container.customResourceDefinitions.updateStatus",
      "container.daemonSets.create",
      "container.daemonSets.delete",
      "container.daemonSets.get",
      "container.daemonSets.getStatus",
      "container.daemonSets.list",
      "container.daemonSets.update",
      "container.daemonSets.updateStatus",
      "container.deployments.create",
      "container.deployments.delete",
      "container.deployments.get",
      "container.deployments.getScale",
      "container.deployments.getStatus",
      "container.deployments.list",
      "container.deployments.rollback",
      "container.deployments.update",
      "container.deployments.updateScale",
      "container.deployments.updateStatus",
      "container.endpoints.create",
      "container.endpoints.delete",
      "container.endpoints.get",
      "container.endpoints.list",
      "container.endpoints.update",
      "container.events.create",
      "container.events.delete",
      "container.events.get",
      "container.events.list",
      "container.events.update",
      "container.horizontalPodAutoscalers.create",
      "container.horizontalPodAutoscalers.delete",
      "container.horizontalPodAutoscalers.get",
      "container.horizontalPodAutoscalers.getStatus",
      "container.horizontalPodAutoscalers.list",
      "container.horizontalPodAutoscalers.update",
      "container.horizontalPodAutoscalers.updateStatus",
      "container.ingresses.create",
      "container.ingresses.delete",
      "container.ingresses.get",
      "container.ingresses.getStatus",
      "container.ingresses.list",
      "container.ingresses.update",
      "container.ingresses.updateStatus",
      "container.initializerConfigurations.create",
      "container.initializerConfigurations.delete",
      "container.initializerConfigurations.get",
      "container.initializerConfigurations.list",
      "container.initializerConfigurations.update",
      "container.jobs.create",
      "container.jobs.delete",
      "container.jobs.get",
      "container.jobs.getStatus",
      "container.jobs.list",
      "container.jobs.update",
      "container.jobs.updateStatus",
      "container.limitRanges.create",
      "container.limitRanges.delete",
      "container.limitRanges.get",
      "container.limitRanges.list",
      "container.limitRanges.update",
      "container.localSubjectAccessReviews.create",
      "container.localSubjectAccessReviews.list",
      "container.namespaces.create",
      "container.namespaces.delete",
      "container.namespaces.get",
      "container.namespaces.getStatus",
      "container.namespaces.list",
      "container.namespaces.update",
      "container.namespaces.updateStatus",
      "container.networkPolicies.create",
      "container.networkPolicies.delete",
      "container.networkPolicies.get",
      "container.networkPolicies.list",
      "container.networkPolicies.update",
      "container.nodes.create",
      "container.nodes.delete",
      "container.nodes.get",
      "container.nodes.getStatus",
      "container.nodes.list",
      "container.nodes.proxy",
      "container.nodes.update",
      "container.nodes.updateStatus",
      "container.operations.get",
      "container.operations.list",
      "container.persistentVolumeClaims.create",
      "container.persistentVolumeClaims.delete",
      "container.persistentVolumeClaims.get",
      "container.persistentVolumeClaims.getStatus",
      "container.persistentVolumeClaims.list",
      "container.persistentVolumeClaims.update",
      "container.persistentVolumeClaims.updateStatus",
      "container.persistentVolumes.create",
      "container.persistentVolumes.delete",
      "container.persistentVolumes.get",
      "container.persistentVolumes.getStatus",
      "container.persistentVolumes.list",
      "container.persistentVolumes.update",
      "container.persistentVolumes.updateStatus",
      "container.petSets.create",
      "container.petSets.delete",
      "container.petSets.get",
      "container.petSets.list",
      "container.petSets.update",
      "container.petSets.updateStatus",
      "container.podDisruptionBudgets.create",
      "container.podDisruptionBudgets.delete",
      "container.podDisruptionBudgets.get",
      "container.podDisruptionBudgets.getStatus",
      "container.podDisruptionBudgets.list",
      "container.podDisruptionBudgets.update",
      "container.podDisruptionBudgets.updateStatus",
      "container.podPresets.create",
      "container.podPresets.delete",
      "container.podPresets.get",
      "container.podPresets.list",
      "container.podPresets.update",
      "container.podSecurityPolicies.create",
      "container.podSecurityPolicies.delete",
      "container.podSecurityPolicies.get",
      "container.podSecurityPolicies.list",
      "container.podSecurityPolicies.update",
      "container.podSecurityPolicies.use",
      "container.podTemplates.create",
      "container.podTemplates.delete",
      "container.podTemplates.get",
      "container.podTemplates.list",
      "container.podTemplates.update",
      "container.pods.attach",
      "container.pods.create",
      "container.pods.delete",
      "container.pods.evict",
      "container.pods.exec",
      "container.pods.get",
      "container.pods.getLogs",
      "container.pods.getStatus",
      "container.pods.initialize",
      "container.pods.list",
      "container.pods.portForward",
      "container.pods.proxy",
      "container.pods.update",
      "container.pods.updateStatus",
      "container.replicaSets.create",
      "container.replicaSets.delete",
      "container.replicaSets.get",
      "container.replicaSets.getScale",
      "container.replicaSets.getStatus",
      "container.replicaSets.list",
      "container.replicaSets.update",
      "container.replicaSets.updateScale",
      "container.replicaSets.updateStatus",
      "container.replicationControllers.create",
      "container.replicationControllers.delete",
      "container.replicationControllers.get",
      "container.replicationControllers.getScale",
      "container.replicationControllers.getStatus",
      "container.replicationControllers.list",
      "container.replicationControllers.update",
      "container.replicationControllers.updateScale",
      "container.replicationControllers.updateStatus",
      "container.resourceQuotas.create",
      "container.resourceQuotas.delete",
      "container.resourceQuotas.get",
      "container.resourceQuotas.getStatus",
      "container.resourceQuotas.list",
      "container.resourceQuotas.update",
      "container.resourceQuotas.updateStatus",
      "container.roleBindings.create",
      "container.roleBindings.delete",
      "container.roleBindings.get",
      "container.roleBindings.list",
      "container.roleBindings.update",
      "container.roles.bind",
      "container.roles.create",
      "container.roles.delete",
      "container.roles.get",
      "container.roles.list",
      "container.roles.update",
      "container.runtimeClasses.create",
      "container.runtimeClasses.delete",
      "container.runtimeClasses.get",
      "container.runtimeClasses.list",
      "container.runtimeClasses.update",
      "container.scheduledJobs.create",
      "container.scheduledJobs.delete",
      "container.scheduledJobs.get",
      "container.scheduledJobs.list",
      "container.scheduledJobs.update",
      "container.scheduledJobs.updateStatus",
      "container.secrets.create",
      "container.secrets.delete",
      "container.secrets.get",
      "container.secrets.list",
      "container.secrets.update",
      "container.selfSubjectAccessReviews.create",
      "container.selfSubjectAccessReviews.list",
      "container.serviceAccounts.create",
      "container.serviceAccounts.delete",
      "container.serviceAccounts.get",
      "container.serviceAccounts.list",
      "container.serviceAccounts.update",
      "container.services.create",
      "container.services.delete",
      "container.services.get",
      "container.services.getStatus",
      "container.services.list",
      "container.services.proxy",
      "container.services.update",
      "container.services.updateStatus",
      "container.statefulSets.create",
      "container.statefulSets.delete",
      "container.statefulSets.get",
      "container.statefulSets.getScale",
      "container.statefulSets.getStatus",
      "container.statefulSets.list",
      "container.statefulSets.update",
      "container.statefulSets.updateScale",
      "container.statefulSets.updateStatus",
      "container.storageClasses.create",
      "container.storageClasses.delete",
      "container.storageClasses.get",
      "container.storageClasses.list",
      "container.storageClasses.update",
      "container.subjectAccessReviews.create",
      "container.subjectAccessReviews.list",
      "container.thirdPartyObjects.create",
      "container.thirdPartyObjects.delete",
      "container.thirdPartyObjects.get",
      "container.thirdPartyObjects.list",
      "container.thirdPartyObjects.update",
      "container.thirdPartyResources.create",
      "container.thirdPartyResources.delete",
      "container.thirdPartyResources.get",
      "container.thirdPartyResources.list",
      "container.thirdPartyResources.update",
      "container.tokenReviews.create",
      "datacatalog.categories.getIamPolicy",
      "datacatalog.categories.setIamPolicy",
      "datacatalog.entries.create",
      "datacatalog.entries.delete",
      "datacatalog.entries.get",
      "datacatalog.entries.getIamPolicy",
      "datacatalog.entries.list",
      "datacatalog.entries.setIamPolicy",
      "datacatalog.entries.update",
      "datacatalog.entries.updateTag",
      "datacatalog.entryGroups.create",
      "datacatalog.entryGroups.delete",
      "datacatalog.entryGroups.get",
      "datacatalog.entryGroups.getIamPolicy",
      "datacatalog.entryGroups.setIamPolicy",
      "datacatalog.entryGroups.update",
      "datacatalog.tagTemplates.create",
      "datacatalog.tagTemplates.delete",
      "datacatalog.tagTemplates.get",
      "datacatalog.tagTemplates.getIamPolicy",
      "datacatalog.tagTemplates.getTag",
      "datacatalog.tagTemplates.setIamPolicy",
      "datacatalog.tagTemplates.update",
      "datacatalog.tagTemplates.use",
      "datacatalog.taxonomies.create",
      "datacatalog.taxonomies.delete",
      "datacatalog.taxonomies.get",
      "datacatalog.taxonomies.getIamPolicy",
      "datacatalog.taxonomies.list",
      "datacatalog.taxonomies.setIamPolicy",
      "datacatalog.taxonomies.update",
      "dataflow.jobs.cancel",
      "dataflow.jobs.create",
      "dataflow.jobs.get",
      "dataflow.jobs.list",
      "dataflow.jobs.updateContents",
      "dataflow.messages.list",
      "dataflow.metrics.get",
      "datafusion.instances.create",
      "datafusion.instances.delete",
      "datafusion.instances.get",
      "datafusion.instances.getIamPolicy",
      "datafusion.instances.list",
      "datafusion.instances.restart",
      "datafusion.instances.setIamPolicy",
      "datafusion.instances.update",
      "datafusion.instances.upgrade",
      "datafusion.locations.get",
      "datafusion.locations.list",
      "datafusion.operations.cancel",
      "datafusion.operations.get",
      "datafusion.operations.list",
      "datalabeling.annotateddatasets.delete",
      "datalabeling.annotateddatasets.get",
      "datalabeling.annotateddatasets.label",
      "datalabeling.annotateddatasets.list",
      "datalabeling.annotationspecsets.create",
      "datalabeling.annotationspecsets.delete",
      "datalabeling.annotationspecsets.get",
      "datalabeling.annotationspecsets.list",
      "datalabeling.dataitems.get",
      "datalabeling.dataitems.list",
      "datalabeling.datasets.create",
      "datalabeling.datasets.delete",
      "datalabeling.datasets.export",
      "datalabeling.datasets.get",
      "datalabeling.datasets.import",
      "datalabeling.datasets.list",
      "datalabeling.examples.get",
      "datalabeling.examples.list",
      "datalabeling.instructions.create",
      "datalabeling.instructions.delete",
      "datalabeling.instructions.get",
      "datalabeling.instructions.list",
      "datalabeling.operations.cancel",
      "datalabeling.operations.get",
      "datalabeling.operations.list",
      "dataprep.projects.use",
      "dataproc.agents.create",
      "dataproc.agents.delete",
      "dataproc.agents.get",
      "dataproc.agents.list",
      "dataproc.agents.update",
      "dataproc.autoscalingPolicies.create",
      "dataproc.autoscalingPolicies.delete",
      "dataproc.autoscalingPolicies.get",
      "dataproc.autoscalingPolicies.getIamPolicy",
      "dataproc.autoscalingPolicies.list",
      "dataproc.autoscalingPolicies.setIamPolicy",
      "dataproc.autoscalingPolicies.update",
      "dataproc.autoscalingPolicies.use",
      "dataproc.clusters.create",
      "dataproc.clusters.delete",
      "dataproc.clusters.get",
      "dataproc.clusters.getIamPolicy",
      "dataproc.clusters.list",
      "dataproc.clusters.setIamPolicy",
      "dataproc.clusters.update",
      "dataproc.clusters.use",
      "dataproc.jobs.cancel",
      "dataproc.jobs.create",
      "dataproc.jobs.delete",
      "dataproc.jobs.get",
      "dataproc.jobs.getIamPolicy",
      "dataproc.jobs.list",
      "dataproc.jobs.setIamPolicy",
      "dataproc.jobs.update",
      "dataproc.operations.cancel",
      "dataproc.operations.delete",
      "dataproc.operations.get",
      "dataproc.operations.getIamPolicy",
      "dataproc.operations.list",
      "dataproc.operations.setIamPolicy",
      "dataproc.tasks.lease",
      "dataproc.tasks.listInvalidatedLeases",
      "dataproc.tasks.reportStatus",
      "dataproc.workflowTemplates.create",
      "dataproc.workflowTemplates.delete",
      "dataproc.workflowTemplates.get",
      "dataproc.workflowTemplates.getIamPolicy",
      "dataproc.workflowTemplates.instantiate",
      "dataproc.workflowTemplates.instantiateInline",
      "dataproc.workflowTemplates.list",
      "dataproc.workflowTemplates.setIamPolicy",
      "dataproc.workflowTemplates.update",
      "dataprocessing.featurecontrols.get",
      "dataprocessing.featurecontrols.list",
      "dataprocessing.featurecontrols.update",
      "dataprocessing.iamaccesshistory.exportData",
      "datastore.databases.create",
      "datastore.databases.delete",
      "datastore.databases.export",
      "datastore.databases.get",
      "datastore.databases.getIamPolicy",
      "datastore.databases.import",
      "datastore.databases.list",
      "datastore.databases.setIamPolicy",
      "datastore.databases.update",
      "datastore.entities.allocateIds",
      "datastore.entities.create",
      "datastore.entities.delete",
      "datastore.entities.get",
      "datastore.entities.list",
      "datastore.entities.update",
      "datastore.indexes.create",
      "datastore.indexes.delete",
      "datastore.indexes.get",
      "datastore.indexes.list",
      "datastore.indexes.update",
      "datastore.locations.get",
      "datastore.locations.list",
      "datastore.namespaces.get",
      "datastore.namespaces.getIamPolicy",
      "datastore.namespaces.list",
      "datastore.namespaces.setIamPolicy",
      "datastore.operations.cancel",
      "datastore.operations.delete",
      "datastore.operations.get",
      "datastore.operations.list",
      "datastore.statistics.get",
      "datastore.statistics.list",
      "deploymentmanager.compositeTypes.create",
      "deploymentmanager.compositeTypes.delete",
      "deploymentmanager.compositeTypes.get",
      "deploymentmanager.compositeTypes.list",
      "deploymentmanager.compositeTypes.update",
      "deploymentmanager.deployments.cancelPreview",
      "deploymentmanager.deployments.create",
      "deploymentmanager.deployments.delete",
      "deploymentmanager.deployments.get",
      "deploymentmanager.deployments.getIamPolicy",
      "deploymentmanager.deployments.list",
      "deploymentmanager.deployments.setIamPolicy",
      "deploymentmanager.deployments.stop",
      "deploymentmanager.deployments.update",
      "deploymentmanager.manifests.get",
      "deploymentmanager.manifests.list",
      "deploymentmanager.operations.get",
      "deploymentmanager.operations.list",
      "deploymentmanager.resources.get",
      "deploymentmanager.resources.list",
      "deploymentmanager.typeProviders.create",
      "deploymentmanager.typeProviders.delete",
      "deploymentmanager.typeProviders.get",
      "deploymentmanager.typeProviders.getType",
      "deploymentmanager.typeProviders.list",
      "deploymentmanager.typeProviders.listTypes",
      "deploymentmanager.typeProviders.update",
      "deploymentmanager.types.create",
      "deploymentmanager.types.delete",
      "deploymentmanager.types.get",
      "deploymentmanager.types.list",
      "deploymentmanager.types.update",
      "dialogflow.agents.create",
      "dialogflow.agents.delete",
      "dialogflow.agents.export",
      "dialogflow.agents.get",
      "dialogflow.agents.import",
      "dialogflow.agents.restore",
      "dialogflow.agents.search",
      "dialogflow.agents.train",
      "dialogflow.agents.update",
      "dialogflow.contexts.create",
      "dialogflow.contexts.delete",
      "dialogflow.contexts.get",
      "dialogflow.contexts.list",
      "dialogflow.contexts.update",
      "dialogflow.documents.create",
      "dialogflow.documents.delete",
      "dialogflow.documents.get",
      "dialogflow.documents.list",
      "dialogflow.entityTypes.create",
      "dialogflow.entityTypes.createEntity",
      "dialogflow.entityTypes.delete",
      "dialogflow.entityTypes.deleteEntity",
      "dialogflow.entityTypes.get",
      "dialogflow.entityTypes.list",
      "dialogflow.entityTypes.update",
      "dialogflow.entityTypes.updateEntity",
      "dialogflow.intents.create",
      "dialogflow.intents.delete",
      "dialogflow.intents.get",
      "dialogflow.intents.list",
      "dialogflow.intents.update",
      "dialogflow.knowledgeBases.create",
      "dialogflow.knowledgeBases.delete",
      "dialogflow.knowledgeBases.get",
      "dialogflow.knowledgeBases.list",
      "dialogflow.operations.get",
      "dialogflow.sessionEntityTypes.create",
      "dialogflow.sessionEntityTypes.delete",
      "dialogflow.sessionEntityTypes.get",
      "dialogflow.sessionEntityTypes.list",
      "dialogflow.sessionEntityTypes.update",
      "dialogflow.sessions.detectIntent",
      "dialogflow.sessions.streamingDetectIntent",
      "dlp.analyzeRiskTemplates.create",
      "dlp.analyzeRiskTemplates.delete",
      "dlp.analyzeRiskTemplates.get",
      "dlp.analyzeRiskTemplates.list",
      "dlp.analyzeRiskTemplates.update",
      "dlp.deidentifyTemplates.create",
      "dlp.deidentifyTemplates.delete",
      "dlp.deidentifyTemplates.get",
      "dlp.deidentifyTemplates.list",
      "dlp.deidentifyTemplates.update",
      "dlp.inspectTemplates.create",
      "dlp.inspectTemplates.delete",
      "dlp.inspectTemplates.get",
      "dlp.inspectTemplates.list",
      "dlp.inspectTemplates.update",
      "dlp.jobTriggers.create",
      "dlp.jobTriggers.delete",
      "dlp.jobTriggers.get",
      "dlp.jobTriggers.list",
      "dlp.jobTriggers.update",
      "dlp.jobs.cancel",
      "dlp.jobs.create",
      "dlp.jobs.delete",
      "dlp.jobs.get",
      "dlp.jobs.list",
      "dlp.kms.encrypt",
      "dlp.storedInfoTypes.create",
      "dlp.storedInfoTypes.delete",
      "dlp.storedInfoTypes.get",
      "dlp.storedInfoTypes.list",
      "dlp.storedInfoTypes.update",
      "dns.changes.create",
      "dns.changes.get",
      "dns.changes.list",
      "dns.dnsKeys.get",
      "dns.dnsKeys.list",
      "dns.managedZoneOperations.get",
      "dns.managedZoneOperations.list",
      "dns.managedZones.create",
      "dns.managedZones.delete",
      "dns.managedZones.get",
      "dns.managedZones.list",
      "dns.managedZones.update",
      "dns.networks.bindPrivateDNSPolicy",
      "dns.networks.bindPrivateDNSZone",
      "dns.networks.targetWithPeeringZone",
      "dns.policies.create",
      "dns.policies.delete",
      "dns.policies.get",
      "dns.policies.getIamPolicy",
      "dns.policies.list",
      "dns.policies.setIamPolicy",
      "dns.policies.update",
      "dns.projects.get",
      "dns.resourceRecordSets.create",
      "dns.resourceRecordSets.delete",
      "dns.resourceRecordSets.list",
      "dns.resourceRecordSets.update",
      "endpoints.portals.attachCustomDomain",
      "endpoints.portals.detachCustomDomain",
      "endpoints.portals.listCustomDomains",
      "endpoints.portals.update",
      "errorreporting.applications.list",
      "errorreporting.errorEvents.create",
      "errorreporting.errorEvents.delete",
      "errorreporting.errorEvents.list",
      "errorreporting.groupMetadata.get",
      "errorreporting.groupMetadata.update",
      "errorreporting.groups.list",
      "file.instances.create",
      "file.instances.delete",
      "file.instances.get",
      "file.instances.list",
      "file.instances.restore",
      "file.instances.update",
      "file.locations.get",
      "file.locations.list",
      "file.operations.cancel",
      "file.operations.delete",
      "file.operations.get",
      "file.operations.list",
      "file.snapshots.create",
      "file.snapshots.delete",
      "file.snapshots.get",
      "file.snapshots.list",
      "file.snapshots.update",
      "firebase.billingPlans.get",
      "firebase.billingPlans.update",
      "firebase.clients.create",
      "firebase.clients.delete",
      "firebase.clients.get",
      "firebase.links.create",
      "firebase.links.delete",
      "firebase.links.list",
      "firebase.links.update",
      "firebase.projects.delete",
      "firebase.projects.get",
      "firebase.projects.update",
      "firebaseabt.experimentresults.get",
      "firebaseabt.experiments.create",
      "firebaseabt.experiments.delete",
      "firebaseabt.experiments.get",
      "firebaseabt.experiments.list",
      "firebaseabt.experiments.update",
      "firebaseabt.projectmetadata.get",
      "firebaseanalytics.resources.googleAnalyticsEdit",
      "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
      "firebaseappdistro.groups.list",
      "firebaseappdistro.groups.update",
      "firebaseappdistro.releases.list",
      "firebaseappdistro.releases.update",
      "firebaseappdistro.testers.list",
      "firebaseappdistro.testers.update",
      "firebaseauth.configs.create",
      "firebaseauth.configs.get",
      "firebaseauth.configs.getHashConfig",
      "firebaseauth.configs.update",
      "firebaseauth.users.create",
      "firebaseauth.users.createSession",
      "firebaseauth.users.delete",
      "firebaseauth.users.get",
      "firebaseauth.users.sendEmail",
      "firebaseauth.users.update",
      "firebasecrash.issues.update",
      "firebasecrash.reports.get",
      "firebasecrashlytics.config.get",
      "firebasecrashlytics.config.update",
      "firebasecrashlytics.data.get",
      "firebasecrashlytics.issues.get",
      "firebasecrashlytics.issues.list",
      "firebasecrashlytics.issues.update",
      "firebasecrashlytics.sessions.get",
      "firebasedatabase.instances.create",
      "firebasedatabase.instances.get",
      "firebasedatabase.instances.list",
      "firebasedatabase.instances.update",
      "firebasedynamiclinks.destinations.list",
      "firebasedynamiclinks.destinations.update",
      "firebasedynamiclinks.domains.create",
      "firebasedynamiclinks.domains.delete",
      "firebasedynamiclinks.domains.get",
      "firebasedynamiclinks.domains.list",
      "firebasedynamiclinks.domains.update",
      "firebasedynamiclinks.links.create",
      "firebasedynamiclinks.links.get",
      "firebasedynamiclinks.links.list",
      "firebasedynamiclinks.links.update",
      "firebasedynamiclinks.stats.get",
      "firebaseextensions.configs.create",
      "firebaseextensions.configs.delete",
      "firebaseextensions.configs.list",
      "firebaseextensions.configs.update",
      "firebasehosting.sites.create",
      "firebasehosting.sites.delete",
      "firebasehosting.sites.get",
      "firebasehosting.sites.list",
      "firebasehosting.sites.update",
      "firebaseinappmessaging.campaigns.create",
      "firebaseinappmessaging.campaigns.delete",
      "firebaseinappmessaging.campaigns.get",
      "firebaseinappmessaging.campaigns.list",
      "firebaseinappmessaging.campaigns.update",
      "firebaseml.compressionjobs.create",
      "firebaseml.compressionjobs.delete",
      "firebaseml.compressionjobs.get",
      "firebaseml.compressionjobs.list",
      "firebaseml.compressionjobs.start",
      "firebaseml.compressionjobs.update",
      "firebaseml.models.create",
      "firebaseml.models.delete",
      "firebaseml.models.get",
      "firebaseml.models.list",
      "firebaseml.modelversions.create",
      "firebaseml.modelversions.get",
      "firebaseml.modelversions.list",
      "firebaseml.modelversions.update",
      "firebasenotifications.messages.create",
      "firebasenotifications.messages.delete",
      "firebasenotifications.messages.get",
      "firebasenotifications.messages.list",
      "firebasenotifications.messages.update",
      "firebaseperformance.config.create",
      "firebaseperformance.config.delete",
      "firebaseperformance.config.update",
      "firebaseperformance.data.get",
      "firebasepredictions.predictions.create",
      "firebasepredictions.predictions.delete",
      "firebasepredictions.predictions.list",
      "firebasepredictions.predictions.update",
      "firebaserules.releases.create",
      "firebaserules.releases.delete",
      "firebaserules.releases.get",
      "firebaserules.releases.getExecutable",
      "firebaserules.releases.list",
      "firebaserules.releases.update",
      "firebaserules.rulesets.create",
      "firebaserules.rulesets.delete",
      "firebaserules.rulesets.get",
      "firebaserules.rulesets.list",
      "firebaserules.rulesets.test",
      "gameservices.gameServerClusters.create",
      "gameservices.gameServerClusters.delete",
      "gameservices.gameServerClusters.get",
      "gameservices.gameServerClusters.list",
      "gameservices.gameServerClusters.update",
      "gameservices.gameServerConfigs.create",
      "gameservices.gameServerConfigs.delete",
      "gameservices.gameServerConfigs.get",
      "gameservices.gameServerConfigs.list",
      "gameservices.gameServerDeployments.create",
      "gameservices.gameServerDeployments.delete",
      "gameservices.gameServerDeployments.get",
      "gameservices.gameServerDeployments.list",
      "gameservices.gameServerDeployments.rollout",
      "gameservices.gameServerDeployments.update",
      "gameservices.locations.get",
      "gameservices.locations.list",
      "gameservices.operations.cancel",
      "gameservices.operations.delete",
      "gameservices.operations.get",
      "gameservices.operations.list",
      "gameservices.realms.create",
      "gameservices.realms.delete",
      "gameservices.realms.get",
      "gameservices.realms.list",
      "gameservices.realms.update",
      "genomics.datasets.create",
      "genomics.datasets.delete",
      "genomics.datasets.get",
      "genomics.datasets.getIamPolicy",
      "genomics.datasets.list",
      "genomics.datasets.setIamPolicy",
      "genomics.datasets.update",
      "genomics.operations.cancel",
      "genomics.operations.create",
      "genomics.operations.get",
      "genomics.operations.list",
      "gkehub.endpoints.connect",
      "gkehub.locations.get",
      "gkehub.locations.list",
      "gkehub.memberships.create",
      "gkehub.memberships.delete",
      "gkehub.memberships.generateConnectManifest",
      "gkehub.memberships.get",
      "gkehub.memberships.getIamPolicy",
      "gkehub.memberships.list",
      "gkehub.memberships.setIamPolicy",
      "gkehub.memberships.update",
      "gkehub.operations.cancel",
      "gkehub.operations.get",
      "gkehub.operations.list",
      "healthcare.datasets.create",
      "healthcare.datasets.deidentify",
      "healthcare.datasets.delete",
      "healthcare.datasets.get",
      "healthcare.datasets.getIamPolicy",
      "healthcare.datasets.list",
      "healthcare.datasets.setIamPolicy",
      "healthcare.datasets.update",
      "healthcare.dicomStores.create",
      "healthcare.dicomStores.delete",
      "healthcare.dicomStores.dicomWebDelete",
      "healthcare.dicomStores.dicomWebRead",
      "healthcare.dicomStores.dicomWebWrite",
      "healthcare.dicomStores.export",
      "healthcare.dicomStores.get",
      "healthcare.dicomStores.getIamPolicy",
      "healthcare.dicomStores.import",
      "healthcare.dicomStores.list",
      "healthcare.dicomStores.setIamPolicy",
      "healthcare.dicomStores.update",
      "healthcare.fhirResources.create",
      "healthcare.fhirResources.delete",
      "healthcare.fhirResources.get",
      "healthcare.fhirResources.patch",
      "healthcare.fhirResources.purge",
      "healthcare.fhirResources.update",
      "healthcare.fhirStores.create",
      "healthcare.fhirStores.delete",
      "healthcare.fhirStores.export",
      "healthcare.fhirStores.get",
      "healthcare.fhirStores.getIamPolicy",
      "healthcare.fhirStores.import",
      "healthcare.fhirStores.list",
      "healthcare.fhirStores.searchResources",
      "healthcare.fhirStores.setIamPolicy",
      "healthcare.fhirStores.update",
      "healthcare.hl7V2Messages.create",
      "healthcare.hl7V2Messages.delete",
      "healthcare.hl7V2Messages.get",
      "healthcare.hl7V2Messages.ingest",
      "healthcare.hl7V2Messages.list",
      "healthcare.hl7V2Messages.update",
      "healthcare.hl7V2Stores.create",
      "healthcare.hl7V2Stores.delete",
      "healthcare.hl7V2Stores.get",
      "healthcare.hl7V2Stores.getIamPolicy",
      "healthcare.hl7V2Stores.list",
      "healthcare.hl7V2Stores.setIamPolicy",
      "healthcare.hl7V2Stores.update",
      "healthcare.operations.cancel",
      "healthcare.operations.get",
      "healthcare.operations.list",
      "iam.roles.create",
      "iam.roles.delete",
      "iam.roles.get",
      "iam.roles.list",
      "iam.roles.undelete",
      "iam.roles.update",
      "iam.serviceAccountKeys.create",
      "iam.serviceAccountKeys.delete",
      "iam.serviceAccountKeys.get",
      "iam.serviceAccountKeys.list",
      "iam.serviceAccounts.actAs",
      "iam.serviceAccounts.create",
      "iam.serviceAccounts.delete",
      "iam.serviceAccounts.get",
      "iam.serviceAccounts.getIamPolicy",
      "iam.serviceAccounts.list",
      "iam.serviceAccounts.setIamPolicy",
      "iam.serviceAccounts.update",
      "iap.projects.getSettings",
      "iap.projects.updateSettings",
      "iap.tunnel.getIamPolicy",
      "iap.tunnel.setIamPolicy",
      "iap.tunnelInstances.accessViaIAP",
      "iap.tunnelInstances.getIamPolicy",
      "iap.tunnelInstances.setIamPolicy",
      "iap.tunnelZones.getIamPolicy",
      "iap.tunnelZones.setIamPolicy",
      "iap.web.getIamPolicy",
      "iap.web.getSettings",
      "iap.web.setIamPolicy",
      "iap.web.updateSettings",
      "iap.webServiceVersions.getIamPolicy",
      "iap.webServiceVersions.getSettings",
      "iap.webServiceVersions.setIamPolicy",
      "iap.webServiceVersions.updateSettings",
      "iap.webServices.getIamPolicy",
      "iap.webServices.getSettings",
      "iap.webServices.setIamPolicy",
      "iap.webServices.updateSettings",
      "iap.webTypes.getIamPolicy",
      "iap.webTypes.getSettings",
      "iap.webTypes.setIamPolicy",
      "iap.webTypes.updateSettings",
      "lifesciences.operations.cancel",
      "lifesciences.operations.get",
      "lifesciences.operations.list",
      "lifesciences.workflows.run",
      "logging.cmekSettings.get",
      "logging.cmekSettings.update",
      "logging.exclusions.create",
      "logging.exclusions.delete",
      "logging.exclusions.get",
      "logging.exclusions.list",
      "logging.exclusions.update",
      "logging.logEntries.create",
      "logging.logEntries.list",
      "logging.logMetrics.create",
      "logging.logMetrics.delete",
      "logging.logMetrics.get",
      "logging.logMetrics.list",
      "logging.logMetrics.update",
      "logging.logServiceIndexes.list",
      "logging.logServices.list",
      "logging.logs.delete",
      "logging.logs.list",
      "logging.privateLogEntries.list",
      "logging.sinks.create",
      "logging.sinks.delete",
      "logging.sinks.get",
      "logging.sinks.list",
      "logging.sinks.update",
      "logging.usage.get",
      "managedidentities.domains.attachTrust",
      "managedidentities.domains.create",
      "managedidentities.domains.delete",
      "managedidentities.domains.detachTrust",
      "managedidentities.domains.get",
      "managedidentities.domains.getIamPolicy",
      "managedidentities.domains.list",
      "managedidentities.domains.reconfigureTrust",
      "managedidentities.domains.resetpassword",
      "managedidentities.domains.setIamPolicy",
      "managedidentities.domains.update",
      "managedidentities.domains.validateTrust",
      "managedidentities.locations.get",
      "managedidentities.locations.list",
      "managedidentities.operations.cancel",
      "managedidentities.operations.delete",
      "managedidentities.operations.get",
      "managedidentities.operations.list",
      "ml.jobs.cancel",
      "ml.jobs.create",
      "ml.jobs.get",
      "ml.jobs.getIamPolicy",
      "ml.jobs.list",
      "ml.jobs.setIamPolicy",
      "ml.jobs.update",
      "ml.locations.get",
      "ml.locations.list",
      "ml.models.create",
      "ml.models.delete",
      "ml.models.get",
      "ml.models.getIamPolicy",
      "ml.models.list",
      "ml.models.predict",
      "ml.models.setIamPolicy",
      "ml.models.update",
      "ml.operations.cancel",
      "ml.operations.get",
      "ml.operations.list",
      "ml.projects.getConfig",
      "ml.versions.create",
      "ml.versions.delete",
      "ml.versions.get",
      "ml.versions.list",
      "ml.versions.predict",
      "ml.versions.update",
      "monitoring.alertPolicies.create",
      "monitoring.alertPolicies.delete",
      "monitoring.alertPolicies.get",
      "monitoring.alertPolicies.list",
      "monitoring.alertPolicies.update",
      "monitoring.dashboards.create",
      "monitoring.dashboards.delete",
      "monitoring.dashboards.get",
      "monitoring.dashboards.list",
      "monitoring.dashboards.update",
      "monitoring.groups.create",
      "monitoring.groups.delete",
      "monitoring.groups.get",
      "monitoring.groups.list",
      "monitoring.groups.update",
      "monitoring.metricDescriptors.create",
      "monitoring.metricDescriptors.delete",
      "monitoring.metricDescriptors.get",
      "monitoring.metricDescriptors.list",
      "monitoring.monitoredResourceDescriptors.get",
      "monitoring.monitoredResourceDescriptors.list",
      "monitoring.notificationChannelDescriptors.get",
      "monitoring.notificationChannelDescriptors.list",
      "monitoring.notificationChannels.create",
      "monitoring.notificationChannels.delete",
      "monitoring.notificationChannels.get",
      "monitoring.notificationChannels.getVerificationCode",
      "monitoring.notificationChannels.list",
      "monitoring.notificationChannels.sendVerificationCode",
      "monitoring.notificationChannels.update",
      "monitoring.notificationChannels.verify",
      "monitoring.publicWidgets.create",
      "monitoring.publicWidgets.delete",
      "monitoring.publicWidgets.get",
      "monitoring.publicWidgets.list",
      "monitoring.publicWidgets.update",
      "monitoring.timeSeries.create",
      "monitoring.timeSeries.list",
      "monitoring.uptimeCheckConfigs.create",
      "monitoring.uptimeCheckConfigs.delete",
      "monitoring.uptimeCheckConfigs.get",
      "monitoring.uptimeCheckConfigs.list",
      "monitoring.uptimeCheckConfigs.update",
      "netappcloudvolumes.activeDirectories.create",
      "netappcloudvolumes.activeDirectories.delete",
      "netappcloudvolumes.activeDirectories.get",
      "netappcloudvolumes.activeDirectories.list",
      "netappcloudvolumes.activeDirectories.update",
      "netappcloudvolumes.ipRanges.list",
      "netappcloudvolumes.jobs.get",
      "netappcloudvolumes.jobs.list",
      "netappcloudvolumes.regions.list",
      "netappcloudvolumes.serviceLevels.list",
      "netappcloudvolumes.snapshots.create",
      "netappcloudvolumes.snapshots.delete",
      "netappcloudvolumes.snapshots.get",
      "netappcloudvolumes.snapshots.list",
      "netappcloudvolumes.snapshots.update",
      "netappcloudvolumes.volumes.create",
      "netappcloudvolumes.volumes.delete",
      "netappcloudvolumes.volumes.get",
      "netappcloudvolumes.volumes.list",
      "netappcloudvolumes.volumes.update",
      "networkmanagement.connectivitytests.create",
      "networkmanagement.connectivitytests.delete",
      "networkmanagement.connectivitytests.get",
      "networkmanagement.connectivitytests.getIamPolicy",
      "networkmanagement.connectivitytests.list",
      "networkmanagement.connectivitytests.rerun",
      "networkmanagement.connectivitytests.setIamPolicy",
      "networkmanagement.connectivitytests.update",
      "networkmanagement.locations.get",
      "networkmanagement.locations.list",
      "networkmanagement.operations.get",
      "networkmanagement.operations.list",
      "notebooks.environments.create",
      "notebooks.environments.delete",
      "notebooks.environments.get",
      "notebooks.environments.getIamPolicy",
      "notebooks.environments.list",
      "notebooks.environments.setIamPolicy",
      "notebooks.instances.create",
      "notebooks.instances.delete",
      "notebooks.instances.get",
      "notebooks.instances.getIamPolicy",
      "notebooks.instances.list",
      "notebooks.instances.setIamPolicy",
      "notebooks.instances.update",
      "notebooks.locations.get",
      "notebooks.locations.list",
      "notebooks.operations.cancel",
      "notebooks.operations.delete",
      "notebooks.operations.get",
      "notebooks.operations.list",
      "opsconfigmonitoring.resourceMetadata.write",
      "orgpolicy.policy.get",
      "proximitybeacon.attachments.create",
      "proximitybeacon.attachments.delete",
      "proximitybeacon.attachments.get",
      "proximitybeacon.attachments.list",
      "proximitybeacon.beacons.attach",
      "proximitybeacon.beacons.create",
      "proximitybeacon.beacons.get",
      "proximitybeacon.beacons.getIamPolicy",
      "proximitybeacon.beacons.list",
      "proximitybeacon.beacons.setIamPolicy",
      "proximitybeacon.beacons.update",
      "proximitybeacon.namespaces.create",
      "proximitybeacon.namespaces.delete",
      "proximitybeacon.namespaces.get",
      "proximitybeacon.namespaces.getIamPolicy",
      "proximitybeacon.namespaces.list",
      "proximitybeacon.namespaces.setIamPolicy",
      "proximitybeacon.namespaces.update",
      "pubsub.snapshots.create",
      "pubsub.snapshots.delete",
      "pubsub.snapshots.get",
      "pubsub.snapshots.getIamPolicy",
      "pubsub.snapshots.list",
      "pubsub.snapshots.seek",
      "pubsub.snapshots.setIamPolicy",
      "pubsub.snapshots.update",
      "pubsub.subscriptions.consume",
      "pubsub.subscriptions.create",
      "pubsub.subscriptions.delete",
      "pubsub.subscriptions.get",
      "pubsub.subscriptions.getIamPolicy",
      "pubsub.subscriptions.list",
      "pubsub.subscriptions.setIamPolicy",
      "pubsub.subscriptions.update",
      "pubsub.topics.attachSubscription",
      "pubsub.topics.create",
      "pubsub.topics.delete",
      "pubsub.topics.get",
      "pubsub.topics.getIamPolicy",
      "pubsub.topics.list",
      "pubsub.topics.publish",
      "pubsub.topics.setIamPolicy",
      "pubsub.topics.update",
      "pubsub.topics.updateTag",
      "recommender.computeInstanceGroupManagerMachineTypeRecommendations.get",
      "recommender.computeInstanceGroupManagerMachineTypeRecommendations.list",
      "recommender.computeInstanceGroupManagerMachineTypeRecommendations.update",
      "recommender.computeInstanceMachineTypeRecommendations.get",
      "recommender.computeInstanceMachineTypeRecommendations.list",
      "recommender.computeInstanceMachineTypeRecommendations.update",
      "recommender.iamPolicyRecommendations.get",
      "recommender.iamPolicyRecommendations.list",
      "recommender.iamPolicyRecommendations.update",
      "recommender.locations.get",
      "recommender.locations.list",
      "redis.instances.create",
      "redis.instances.delete",
      "redis.instances.export",
      "redis.instances.get",
      "redis.instances.import",
      "redis.instances.list",
      "redis.instances.update",
      "redis.locations.get",
      "redis.locations.list",
      "redis.operations.cancel",
      "redis.operations.delete",
      "redis.operations.get",
      "redis.operations.list",
      "redisenterprisecloud.databases.create",
      "redisenterprisecloud.databases.delete",
      "redisenterprisecloud.databases.get",
      "redisenterprisecloud.databases.list",
      "redisenterprisecloud.databases.update",
      "redisenterprisecloud.subscriptions.create",
      "redisenterprisecloud.subscriptions.delete",
      "redisenterprisecloud.subscriptions.get",
      "redisenterprisecloud.subscriptions.list",
      "redisenterprisecloud.subscriptions.update",
      "remotebuildexecution.actions.create",
      "remotebuildexecution.actions.delete",
      "remotebuildexecution.actions.get",
      "remotebuildexecution.actions.update",
      "remotebuildexecution.blobs.create",
      "remotebuildexecution.blobs.get",
      "remotebuildexecution.botsessions.create",
      "remotebuildexecution.botsessions.update",
      "remotebuildexecution.instances.create",
      "remotebuildexecution.instances.delete",
      "remotebuildexecution.instances.get",
      "remotebuildexecution.instances.list",
      "remotebuildexecution.logstreams.create",
      "remotebuildexecution.logstreams.get",
      "remotebuildexecution.logstreams.update",
      "remotebuildexecution.workerpools.create",
      "remotebuildexecution.workerpools.delete",
      "remotebuildexecution.workerpools.get",
      "remotebuildexecution.workerpools.list",
      "remotebuildexecution.workerpools.update",
      "resourcemanager.projects.createBillingAssignment",
      "resourcemanager.projects.delete",
      "resourcemanager.projects.deleteBillingAssignment",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "resourcemanager.projects.move",
      "resourcemanager.projects.setIamPolicy",
      "resourcemanager.projects.undelete",
      "resourcemanager.projects.update",
      "resourcemanager.projects.updateLiens",
      "run.configurations.get",
      "run.configurations.list",
      "run.locations.list",
      "run.revisions.delete",
      "run.revisions.get",
      "run.revisions.list",
      "run.routes.get",
      "run.routes.invoke",
      "run.routes.list",
      "run.services.create",
      "run.services.delete",
      "run.services.get",
      "run.services.getIamPolicy",
      "run.services.list",
      "run.services.setIamPolicy",
      "run.services.update",
      "runtimeconfig.configs.create",
      "runtimeconfig.configs.delete",
      "runtimeconfig.configs.get",
      "runtimeconfig.configs.getIamPolicy",
      "runtimeconfig.configs.list",
      "runtimeconfig.configs.setIamPolicy",
      "runtimeconfig.configs.update",
      "runtimeconfig.operations.get",
      "runtimeconfig.operations.list",
      "runtimeconfig.variables.create",
      "runtimeconfig.variables.delete",
      "runtimeconfig.variables.get",
      "runtimeconfig.variables.getIamPolicy",
      "runtimeconfig.variables.list",
      "runtimeconfig.variables.setIamPolicy",
      "runtimeconfig.variables.update",
      "runtimeconfig.variables.watch",
      "runtimeconfig.waiters.create",
      "runtimeconfig.waiters.delete",
      "runtimeconfig.waiters.get",
      "runtimeconfig.waiters.getIamPolicy",
      "runtimeconfig.waiters.list",
      "runtimeconfig.waiters.setIamPolicy",
      "runtimeconfig.waiters.update",
      "secretmanager.locations.get",
      "secretmanager.locations.list",
      "secretmanager.secrets.create",
      "secretmanager.secrets.delete",
      "secretmanager.secrets.get",
      "secretmanager.secrets.getIamPolicy",
      "secretmanager.secrets.list",
      "secretmanager.secrets.setIamPolicy",
      "secretmanager.secrets.update",
      "secretmanager.versions.access",
      "secretmanager.versions.add",
      "secretmanager.versions.destroy",
      "secretmanager.versions.disable",
      "secretmanager.versions.enable",
      "secretmanager.versions.get",
      "secretmanager.versions.list",
      "securitycenter.assets.group",
      "securitycenter.assets.list",
      "securitycenter.assets.listAssetPropertyNames",
      "securitycenter.assets.runDiscovery",
      "securitycenter.assetsecuritymarks.update",
      "securitycenter.findings.group",
      "securitycenter.findings.list",
      "securitycenter.findings.listFindingPropertyNames",
      "securitycenter.findings.setState",
      "securitycenter.findings.update",
      "securitycenter.findingsecuritymarks.update",
      "securitycenter.notificationconfig.create",
      "securitycenter.notificationconfig.delete",
      "securitycenter.notificationconfig.get",
      "securitycenter.notificationconfig.list",
      "securitycenter.notificationconfig.update",
      "securitycenter.organizationsettings.get",
      "securitycenter.organizationsettings.update",
      "securitycenter.sources.get",
      "securitycenter.sources.getIamPolicy",
      "securitycenter.sources.list",
      "securitycenter.sources.setIamPolicy",
      "securitycenter.sources.update",
      "servicebroker.bindingoperations.get",
      "servicebroker.bindingoperations.list",
      "servicebroker.bindings.create",
      "servicebroker.bindings.delete",
      "servicebroker.bindings.get",
      "servicebroker.bindings.getIamPolicy",
      "servicebroker.bindings.list",
      "servicebroker.bindings.setIamPolicy",
      "servicebroker.catalogs.create",
      "servicebroker.catalogs.delete",
      "servicebroker.catalogs.get",
      "servicebroker.catalogs.getIamPolicy",
      "servicebroker.catalogs.list",
      "servicebroker.catalogs.setIamPolicy",
      "servicebroker.catalogs.validate",
      "servicebroker.instanceoperations.get",
      "servicebroker.instanceoperations.list",
      "servicebroker.instances.create",
      "servicebroker.instances.delete",
      "servicebroker.instances.get",
      "servicebroker.instances.getIamPolicy",
      "servicebroker.instances.list",
      "servicebroker.instances.setIamPolicy",
      "servicebroker.instances.update",
      "serviceconsumermanagement.consumers.get",
      "serviceconsumermanagement.quota.get",
      "serviceconsumermanagement.quota.update",
      "serviceconsumermanagement.tenancyu.addResource",
      "serviceconsumermanagement.tenancyu.create",
      "serviceconsumermanagement.tenancyu.delete",
      "serviceconsumermanagement.tenancyu.list",
      "serviceconsumermanagement.tenancyu.removeResource",
      "servicemanagement.consumerSettings.get",
      "servicemanagement.consumerSettings.getIamPolicy",
      "servicemanagement.consumerSettings.list",
      "servicemanagement.consumerSettings.setIamPolicy",
      "servicemanagement.consumerSettings.update",
      "servicemanagement.services.bind",
      "servicemanagement.services.check",
      "servicemanagement.services.create",
      "servicemanagement.services.delete",
      "servicemanagement.services.get",
      "servicemanagement.services.getIamPolicy",
      "servicemanagement.services.list",
      "servicemanagement.services.quota",
      "servicemanagement.services.report",
      "servicemanagement.services.setIamPolicy",
      "servicemanagement.services.update",
      "servicenetworking.operations.cancel",
      "servicenetworking.operations.delete",
      "servicenetworking.operations.get",
      "servicenetworking.operations.list",
      "servicenetworking.services.addPeering",
      "servicenetworking.services.addSubnetwork",
      "servicenetworking.services.get",
      "serviceusage.apiKeys.create",
      "serviceusage.apiKeys.delete",
      "serviceusage.apiKeys.get",
      "serviceusage.apiKeys.getProjectForKey",
      "serviceusage.apiKeys.list",
      "serviceusage.apiKeys.regenerate",
      "serviceusage.apiKeys.revert",
      "serviceusage.apiKeys.update",
      "serviceusage.operations.cancel",
      "serviceusage.operations.delete",
      "serviceusage.operations.get",
      "serviceusage.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.quotas.update",
      "serviceusage.services.disable",
      "serviceusage.services.enable",
      "serviceusage.services.get",
      "serviceusage.services.list",
      "serviceusage.services.use",
      "source.repos.create",
      "source.repos.delete",
      "source.repos.get",
      "source.repos.getIamPolicy",
      "source.repos.getProjectConfig",
      "source.repos.list",
      "source.repos.setIamPolicy",
      "source.repos.update",
      "source.repos.updateProjectConfig",
      "source.repos.updateRepoConfig",
      "spanner.databaseOperations.cancel",
      "spanner.databaseOperations.delete",
      "spanner.databaseOperations.get",
      "spanner.databaseOperations.list",
      "spanner.databases.beginOrRollbackReadWriteTransaction",
      "spanner.databases.beginReadOnlyTransaction",
      "spanner.databases.create",
      "spanner.databases.drop",
      "spanner.databases.get",
      "spanner.databases.getDdl",
      "spanner.databases.getIamPolicy",
      "spanner.databases.list",
      "spanner.databases.read",
      "spanner.databases.select",
      "spanner.databases.setIamPolicy",
      "spanner.databases.update",
      "spanner.databases.updateDdl",
      "spanner.databases.write",
      "spanner.instanceConfigs.get",
      "spanner.instanceConfigs.list",
      "spanner.instanceOperations.cancel",
      "spanner.instanceOperations.delete",
      "spanner.instanceOperations.get",
      "spanner.instanceOperations.list",
      "spanner.instances.create",
      "spanner.instances.delete",
      "spanner.instances.get",
      "spanner.instances.getIamPolicy",
      "spanner.instances.list",
      "spanner.instances.setIamPolicy",
      "spanner.instances.update",
      "spanner.sessions.create",
      "spanner.sessions.delete",
      "spanner.sessions.get",
      "spanner.sessions.list",
      "stackdriver.projects.edit",
      "stackdriver.projects.get",
      "stackdriver.resourceMetadata.write",
      "storage.buckets.create",
      "storage.buckets.delete",
      "storage.buckets.list",
      "storage.hmacKeys.create",
      "storage.hmacKeys.delete",
      "storage.hmacKeys.get",
      "storage.hmacKeys.list",
      "storage.hmacKeys.update",
      "storagetransfer.jobs.create",
      "storagetransfer.jobs.delete",
      "storagetransfer.jobs.get",
      "storagetransfer.jobs.list",
      "storagetransfer.jobs.update",
      "storagetransfer.operations.cancel",
      "storagetransfer.operations.get",
      "storagetransfer.operations.list",
      "storagetransfer.operations.pause",
      "storagetransfer.operations.resume",
      "storagetransfer.projects.getServiceAccount",
      "subscribewithgoogledeveloper.tools.get",
      "threatdetection.detectorSettings.clear",
      "threatdetection.detectorSettings.get",
      "threatdetection.detectorSettings.update",
      "threatdetection.sinkSettings.get",
      "threatdetection.sinkSettings.update",
      "threatdetection.sourceSettings.get",
      "threatdetection.sourceSettings.update",
      "tpu.acceleratortypes.get",
      "tpu.acceleratortypes.list",
      "tpu.locations.get",
      "tpu.locations.list",
      "tpu.nodes.create",
      "tpu.nodes.delete",
      "tpu.nodes.get",
      "tpu.nodes.list",
      "tpu.nodes.reimage",
      "tpu.nodes.reset",
      "tpu.nodes.start",
      "tpu.nodes.stop",
      "tpu.operations.get",
      "tpu.operations.list",
      "tpu.tensorflowversions.get",
      "tpu.tensorflowversions.list",
      "vmmigration.deployments.create",
      "vmmigration.deployments.get",
      "vmmigration.deployments.list",
      "vpcaccess.connectors.create",
      "vpcaccess.connectors.delete",
      "vpcaccess.connectors.get",
      "vpcaccess.connectors.list",
      "vpcaccess.connectors.use",
      "vpcaccess.locations.list",
      "vpcaccess.operations.get",
      "vpcaccess.operations.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/proximitybeacon.attachmentEditor": {
    "name": "roles/proximitybeacon.attachmentEditor",
    "title": "Beacon Attachment Editor",
    "description": "Can create and delete attachments; can list and get a project's beacons; can list a project's namespaces.",
    "includedPermissions": [
      "proximitybeacon.attachments.create",
      "proximitybeacon.attachments.delete",
      "proximitybeacon.attachments.get",
      "proximitybeacon.attachments.list",
      "proximitybeacon.beacons.get",
      "proximitybeacon.beacons.list",
      "proximitybeacon.namespaces.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/proximitybeacon.attachmentPublisher": {
    "name": "roles/proximitybeacon.attachmentPublisher",
    "title": "Beacon Attachment Publisher",
    "description": "Grants necessary permissions to use beacons to create attachments in namespaces not owned by this project.",
    "includedPermissions": [
      "proximitybeacon.beacons.attach",
      "proximitybeacon.beacons.get",
      "proximitybeacon.beacons.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/proximitybeacon.attachmentViewer": {
    "name": "roles/proximitybeacon.attachmentViewer",
    "title": "Beacon Attachment Viewer",
    "description": "Can view all attachments under a namespace; no beacon or namespace permissions.",
    "includedPermissions": [
      "proximitybeacon.attachments.get",
      "proximitybeacon.attachments.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/proximitybeacon.beaconEditor": {
    "name": "roles/proximitybeacon.beaconEditor",
    "title": "Beacon Editor",
    "description": "Necessary access to register, modify, and view beacons; no attachment or namespace permissions.",
    "includedPermissions": [
      "proximitybeacon.beacons.create",
      "proximitybeacon.beacons.get",
      "proximitybeacon.beacons.list",
      "proximitybeacon.beacons.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/pubsub.admin": {
    "name": "roles/pubsub.admin",
    "title": "Pub/Sub Admin",
    "description": "Full access to topics, subscriptions, and snapshots.",
    "includedPermissions": [
      "pubsub.snapshots.create",
      "pubsub.snapshots.delete",
      "pubsub.snapshots.get",
      "pubsub.snapshots.getIamPolicy",
      "pubsub.snapshots.list",
      "pubsub.snapshots.seek",
      "pubsub.snapshots.setIamPolicy",
      "pubsub.snapshots.update",
      "pubsub.subscriptions.consume",
      "pubsub.subscriptions.create",
      "pubsub.subscriptions.delete",
      "pubsub.subscriptions.get",
      "pubsub.subscriptions.getIamPolicy",
      "pubsub.subscriptions.list",
      "pubsub.subscriptions.setIamPolicy",
      "pubsub.subscriptions.update",
      "pubsub.topics.attachSubscription",
      "pubsub.topics.create",
      "pubsub.topics.delete",
      "pubsub.topics.get",
      "pubsub.topics.getIamPolicy",
      "pubsub.topics.list",
      "pubsub.topics.publish",
      "pubsub.topics.setIamPolicy",
      "pubsub.topics.update",
      "pubsub.topics.updateTag",
      "resourcemanager.projects.get",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/pubsub.editor": {
    "name": "roles/pubsub.editor",
    "title": "Pub/Sub Editor",
    "description": "Modify topics and subscriptions, publish and consume messages.",
    "includedPermissions": [
      "pubsub.snapshots.create",
      "pubsub.snapshots.delete",
      "pubsub.snapshots.get",
      "pubsub.snapshots.list",
      "pubsub.snapshots.seek",
      "pubsub.snapshots.update",
      "pubsub.subscriptions.consume",
      "pubsub.subscriptions.create",
      "pubsub.subscriptions.delete",
      "pubsub.subscriptions.get",
      "pubsub.subscriptions.list",
      "pubsub.subscriptions.update",
      "pubsub.topics.attachSubscription",
      "pubsub.topics.create",
      "pubsub.topics.delete",
      "pubsub.topics.get",
      "pubsub.topics.list",
      "pubsub.topics.publish",
      "pubsub.topics.update",
      "pubsub.topics.updateTag",
      "resourcemanager.projects.get",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/pubsub.publisher": {
    "name": "roles/pubsub.publisher",
    "title": "Pub/Sub Publisher",
    "description": "Publish messages to a topic.",
    "includedPermissions": [
      "pubsub.topics.publish"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/pubsub.subscriber": {
    "name": "roles/pubsub.subscriber",
    "title": "Pub/Sub Subscriber",
    "description": "Consume messages from a subscription, attach subscriptions to a topic, and seek to a snapshot.",
    "includedPermissions": [
      "pubsub.snapshots.seek",
      "pubsub.subscriptions.consume",
      "pubsub.topics.attachSubscription"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/pubsub.viewer": {
    "name": "roles/pubsub.viewer",
    "title": "Pub/Sub Viewer",
    "description": "View topics, subscriptions, and snapshots.",
    "includedPermissions": [
      "pubsub.snapshots.get",
      "pubsub.snapshots.list",
      "pubsub.subscriptions.get",
      "pubsub.subscriptions.list",
      "pubsub.topics.get",
      "pubsub.topics.list",
      "resourcemanager.projects.get",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/recommender.computeAdmin": {
    "name": "roles/recommender.computeAdmin",
    "title": "Compute Recommender Admin",
    "description": "Admin of compute recommendations.",
    "includedPermissions": [
      "recommender.computeInstanceGroupManagerMachineTypeRecommendations.get",
      "recommender.computeInstanceGroupManagerMachineTypeRecommendations.list",
      "recommender.computeInstanceGroupManagerMachineTypeRecommendations.update",
      "recommender.computeInstanceMachineTypeRecommendations.get",
      "recommender.computeInstanceMachineTypeRecommendations.list",
      "recommender.computeInstanceMachineTypeRecommendations.update",
      "recommender.locations.get",
      "recommender.locations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/recommender.computeViewer": {
    "name": "roles/recommender.computeViewer",
    "title": "Compute Recommender Viewer",
    "description": "Viewer of compute recommendations.",
    "includedPermissions": [
      "recommender.computeInstanceGroupManagerMachineTypeRecommendations.get",
      "recommender.computeInstanceGroupManagerMachineTypeRecommendations.list",
      "recommender.computeInstanceMachineTypeRecommendations.get",
      "recommender.computeInstanceMachineTypeRecommendations.list",
      "recommender.locations.get",
      "recommender.locations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/recommender.iamAdmin": {
    "name": "roles/recommender.iamAdmin",
    "title": "IAM Recommender Admin",
    "description": "Admin of IAM recommendations.",
    "includedPermissions": [
      "recommender.iamPolicyRecommendations.get",
      "recommender.iamPolicyRecommendations.list",
      "recommender.iamPolicyRecommendations.update",
      "recommender.locations.get",
      "recommender.locations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/recommender.iamViewer": {
    "name": "roles/recommender.iamViewer",
    "title": "IAM Recommender Viewer",
    "description": "Viewer of IAM recommendations.",
    "includedPermissions": [
      "recommender.iamPolicyRecommendations.get",
      "recommender.iamPolicyRecommendations.list",
      "recommender.locations.get",
      "recommender.locations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/redis.admin": {
    "name": "roles/redis.admin",
    "title": "Cloud Memorystore Redis Admin",
    "description": "Full access to Redis instances and related resources.",
    "includedPermissions": [
      "compute.networks.list",
      "redis.instances.create",
      "redis.instances.delete",
      "redis.instances.export",
      "redis.instances.get",
      "redis.instances.import",
      "redis.instances.list",
      "redis.instances.update",
      "redis.locations.get",
      "redis.locations.list",
      "redis.operations.cancel",
      "redis.operations.delete",
      "redis.operations.get",
      "redis.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.use"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/redis.editor": {
    "name": "roles/redis.editor",
    "title": "Cloud Memorystore Redis Editor",
    "description": "Read-Write access to Redis instances and related resources.",
    "includedPermissions": [
      "compute.networks.list",
      "redis.instances.get",
      "redis.instances.list",
      "redis.instances.update",
      "redis.locations.get",
      "redis.locations.list",
      "redis.operations.cancel",
      "redis.operations.delete",
      "redis.operations.get",
      "redis.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.use"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/redis.viewer": {
    "name": "roles/redis.viewer",
    "title": "Cloud Memorystore Redis Viewer",
    "description": "Read-only access to Redis instances and related resources.",
    "includedPermissions": [
      "redis.instances.get",
      "redis.instances.list",
      "redis.locations.get",
      "redis.locations.list",
      "redis.operations.get",
      "redis.operations.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.use"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/redisenterprisecloud.admin": {
    "name": "roles/redisenterprisecloud.admin",
    "title": "Redis Enterprise Cloud Admin",
    "description": "This role is managed by Redis Labs, not Google.",
    "includedPermissions": [
      "redisenterprisecloud.databases.create",
      "redisenterprisecloud.databases.delete",
      "redisenterprisecloud.databases.get",
      "redisenterprisecloud.databases.list",
      "redisenterprisecloud.databases.update",
      "redisenterprisecloud.subscriptions.create",
      "redisenterprisecloud.subscriptions.delete",
      "redisenterprisecloud.subscriptions.get",
      "redisenterprisecloud.subscriptions.list",
      "redisenterprisecloud.subscriptions.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/redisenterprisecloud.viewer": {
    "name": "roles/redisenterprisecloud.viewer",
    "title": "Redis Enterprise Cloud Viewer",
    "description": "This role is managed by Redis Labs, not Google.",
    "includedPermissions": [
      "redisenterprisecloud.databases.get",
      "redisenterprisecloud.databases.list",
      "redisenterprisecloud.subscriptions.get",
      "redisenterprisecloud.subscriptions.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/remotebuildexecution.actionCacheWriter": {
    "name": "roles/remotebuildexecution.actionCacheWriter",
    "title": "Remote Build Execution Action Cache Writer",
    "description": "Remote Build Execution Action Cache Writer",
    "includedPermissions": [
      "remotebuildexecution.actions.set",
      "remotebuildexecution.blobs.create"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/remotebuildexecution.artifactAdmin": {
    "name": "roles/remotebuildexecution.artifactAdmin",
    "title": "Remote Build Execution Artifact Admin",
    "description": "Remote Build Execution Artifact Admin",
    "includedPermissions": [
      "remotebuildexecution.actions.create",
      "remotebuildexecution.actions.delete",
      "remotebuildexecution.actions.get",
      "remotebuildexecution.blobs.create",
      "remotebuildexecution.blobs.get",
      "remotebuildexecution.logstreams.create",
      "remotebuildexecution.logstreams.get",
      "remotebuildexecution.logstreams.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/remotebuildexecution.artifactCreator": {
    "name": "roles/remotebuildexecution.artifactCreator",
    "title": "Remote Build Execution Artifact Creator",
    "description": "Remote Build Execution Artifact Creator",
    "includedPermissions": [
      "remotebuildexecution.actions.create",
      "remotebuildexecution.actions.get",
      "remotebuildexecution.blobs.create",
      "remotebuildexecution.blobs.get",
      "remotebuildexecution.logstreams.create",
      "remotebuildexecution.logstreams.get",
      "remotebuildexecution.logstreams.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/remotebuildexecution.artifactViewer": {
    "name": "roles/remotebuildexecution.artifactViewer",
    "title": "Remote Build Execution Artifact Viewer",
    "description": "Remote Build Execution Artifact Viewer",
    "includedPermissions": [
      "remotebuildexecution.actions.get",
      "remotebuildexecution.blobs.get",
      "remotebuildexecution.logstreams.get"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/remotebuildexecution.configurationAdmin": {
    "name": "roles/remotebuildexecution.configurationAdmin",
    "title": "Remote Build Execution Configuration Admin",
    "description": "Remote Build Execution Configuration Admin",
    "includedPermissions": [
      "remotebuildexecution.instances.create",
      "remotebuildexecution.instances.delete",
      "remotebuildexecution.instances.get",
      "remotebuildexecution.instances.list",
      "remotebuildexecution.workerpools.create",
      "remotebuildexecution.workerpools.delete",
      "remotebuildexecution.workerpools.get",
      "remotebuildexecution.workerpools.list",
      "remotebuildexecution.workerpools.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/remotebuildexecution.configurationViewer": {
    "name": "roles/remotebuildexecution.configurationViewer",
    "title": "Remote Build Execution Configuration Viewer",
    "description": "Remote Build Execution Configuration Viewer",
    "includedPermissions": [
      "remotebuildexecution.instances.get",
      "remotebuildexecution.instances.list",
      "remotebuildexecution.workerpools.get",
      "remotebuildexecution.workerpools.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/remotebuildexecution.logstreamWriter": {
    "name": "roles/remotebuildexecution.logstreamWriter",
    "title": "Remote Build Execution Logstream Writer",
    "description": "Remote Build Execution Logstream Writer",
    "includedPermissions": [
      "remotebuildexecution.logstreams.create",
      "remotebuildexecution.logstreams.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/remotebuildexecution.reservationAdmin": {
    "name": "roles/remotebuildexecution.reservationAdmin",
    "title": "Remote Build Execution Reservation Admin",
    "description": "Remote Build Execution Reservation Admin",
    "includedPermissions": [
      "remotebuildexecution.actions.create",
      "remotebuildexecution.actions.delete",
      "remotebuildexecution.actions.get"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/remotebuildexecution.worker": {
    "name": "roles/remotebuildexecution.worker",
    "title": "Remote Build Execution Worker",
    "description": "Remote Build Execution Worker",
    "includedPermissions": [
      "remotebuildexecution.actions.update",
      "remotebuildexecution.blobs.create",
      "remotebuildexecution.blobs.get",
      "remotebuildexecution.botsessions.create",
      "remotebuildexecution.botsessions.update",
      "remotebuildexecution.logstreams.create",
      "remotebuildexecution.logstreams.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/resourcemanager.folderAdmin": {
    "name": "roles/resourcemanager.folderAdmin",
    "title": "Folder Admin",
    "description": "Access and administer a folder and all of its sub-resources.",
    "includedPermissions": [
      "orgpolicy.policy.get",
      "resourcemanager.folders.create",
      "resourcemanager.folders.delete",
      "resourcemanager.folders.get",
      "resourcemanager.folders.getIamPolicy",
      "resourcemanager.folders.list",
      "resourcemanager.folders.move",
      "resourcemanager.folders.setIamPolicy",
      "resourcemanager.folders.undelete",
      "resourcemanager.folders.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "resourcemanager.projects.move",
      "resourcemanager.projects.setIamPolicy"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/resourcemanager.folderCreator": {
    "name": "roles/resourcemanager.folderCreator",
    "title": "Folder Creator",
    "description": "Create folder and view all of its sub-resources.",
    "includedPermissions": [
      "orgpolicy.policy.get",
      "resourcemanager.folders.create",
      "resourcemanager.folders.get",
      "resourcemanager.folders.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/resourcemanager.folderEditor": {
    "name": "roles/resourcemanager.folderEditor",
    "title": "Folder Editor",
    "description": "Edit, delete, and undelete a folder and all of its child resources.",
    "includedPermissions": [
      "orgpolicy.policy.get",
      "resourcemanager.folders.delete",
      "resourcemanager.folders.get",
      "resourcemanager.folders.getIamPolicy",
      "resourcemanager.folders.list",
      "resourcemanager.folders.undelete",
      "resourcemanager.folders.update",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/resourcemanager.folderIamAdmin": {
    "name": "roles/resourcemanager.folderIamAdmin",
    "title": "Folder IAM Admin",
    "description": "Access and administer a folder IAM policies.",
    "includedPermissions": [
      "resourcemanager.folders.get",
      "resourcemanager.folders.getIamPolicy",
      "resourcemanager.folders.setIamPolicy"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/resourcemanager.folderMover": {
    "name": "roles/resourcemanager.folderMover",
    "title": "Folder Mover",
    "description": "Move a folder and all of its child resources.",
    "includedPermissions": [
      "resourcemanager.folders.move",
      "resourcemanager.projects.move"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/resourcemanager.folderViewer": {
    "name": "roles/resourcemanager.folderViewer",
    "title": "Folder Viewer",
    "description": "Access to view a folder and all of its child resources.",
    "includedPermissions": [
      "orgpolicy.policy.get",
      "resourcemanager.folders.get",
      "resourcemanager.folders.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/resourcemanager.lienModifier": {
    "name": "roles/resourcemanager.lienModifier",
    "title": "Project Lien Modifier",
    "description": "Access to modify Liens on projects.",
    "includedPermissions": [
      "resourcemanager.projects.updateLiens"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/resourcemanager.organizationAdmin": {
    "name": "roles/resourcemanager.organizationAdmin",
    "title": "Organization Administrator",
    "description": "Access to administer all resources belonging to the organization.",
    "includedPermissions": [
      "orgpolicy.policy.get",
      "resourcemanager.folders.get",
      "resourcemanager.folders.getIamPolicy",
      "resourcemanager.folders.list",
      "resourcemanager.folders.setIamPolicy",
      "resourcemanager.organizations.get",
      "resourcemanager.organizations.getIamPolicy",
      "resourcemanager.organizations.setIamPolicy",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "resourcemanager.projects.setIamPolicy"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/resourcemanager.organizationCreator": {
    "name": "roles/resourcemanager.organizationCreator",
    "title": "Organization Creator",
    "description": "Access to create and list organizations.",
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/resourcemanager.organizationViewer": {
    "name": "roles/resourcemanager.organizationViewer",
    "title": "Organization Viewer",
    "description": "Access only to view an Organization.",
    "includedPermissions": [
      "resourcemanager.organizations.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/resourcemanager.projectCreator": {
    "name": "roles/resourcemanager.projectCreator",
    "title": "Project Creator",
    "description": "Access to create new GCP projects.",
    "includedPermissions": [
      "resourcemanager.organizations.get",
      "resourcemanager.projects.create"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/resourcemanager.projectDeleter": {
    "name": "roles/resourcemanager.projectDeleter",
    "title": "Project Deleter",
    "description": "Access to delete GCP projects.",
    "includedPermissions": [
      "resourcemanager.projects.delete"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/resourcemanager.projectIamAdmin": {
    "name": "roles/resourcemanager.projectIamAdmin",
    "title": "Project IAM Admin",
    "description": "Access and administer a project IAM policies.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.setIamPolicy"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/resourcemanager.projectMover": {
    "name": "roles/resourcemanager.projectMover",
    "title": "Project Mover",
    "description": "Access to update and move a project",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.move",
      "resourcemanager.projects.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/run.admin": {
    "name": "roles/run.admin",
    "title": "Cloud Run Admin",
    "description": "Full control over all Cloud Run resources.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "run.configurations.get",
      "run.configurations.list",
      "run.locations.list",
      "run.revisions.delete",
      "run.revisions.get",
      "run.revisions.list",
      "run.routes.get",
      "run.routes.invoke",
      "run.routes.list",
      "run.services.create",
      "run.services.delete",
      "run.services.get",
      "run.services.getIamPolicy",
      "run.services.list",
      "run.services.setIamPolicy",
      "run.services.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/run.invoker": {
    "name": "roles/run.invoker",
    "title": "Cloud Run Invoker",
    "description": "Can invoke a Cloud Run service.",
    "includedPermissions": [
      "run.routes.invoke"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/run.viewer": {
    "name": "roles/run.viewer",
    "title": "Cloud Run Viewer",
    "description": "Can view the state of all Cloud Run resources, including IAM policies.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "run.configurations.get",
      "run.configurations.list",
      "run.locations.list",
      "run.revisions.get",
      "run.revisions.list",
      "run.routes.get",
      "run.routes.list",
      "run.services.get",
      "run.services.getIamPolicy",
      "run.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/runtimeconfig.admin": {
    "name": "roles/runtimeconfig.admin",
    "title": "Cloud RuntimeConfig Admin",
    "description": "Full access to RuntimeConfig resources.",
    "includedPermissions": [
      "runtimeconfig.configs.create",
      "runtimeconfig.configs.delete",
      "runtimeconfig.configs.get",
      "runtimeconfig.configs.getIamPolicy",
      "runtimeconfig.configs.list",
      "runtimeconfig.configs.setIamPolicy",
      "runtimeconfig.configs.update",
      "runtimeconfig.operations.get",
      "runtimeconfig.operations.list",
      "runtimeconfig.variables.create",
      "runtimeconfig.variables.delete",
      "runtimeconfig.variables.get",
      "runtimeconfig.variables.getIamPolicy",
      "runtimeconfig.variables.list",
      "runtimeconfig.variables.setIamPolicy",
      "runtimeconfig.variables.update",
      "runtimeconfig.variables.watch",
      "runtimeconfig.waiters.create",
      "runtimeconfig.waiters.delete",
      "runtimeconfig.waiters.get",
      "runtimeconfig.waiters.getIamPolicy",
      "runtimeconfig.waiters.list",
      "runtimeconfig.waiters.setIamPolicy",
      "runtimeconfig.waiters.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/secretmanager.admin": {
    "name": "roles/secretmanager.admin",
    "title": "Secret Manager Admin",
    "description": "Full access to administrate Secret Manager resources.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "secretmanager.locations.get",
      "secretmanager.locations.list",
      "secretmanager.secrets.create",
      "secretmanager.secrets.delete",
      "secretmanager.secrets.get",
      "secretmanager.secrets.getIamPolicy",
      "secretmanager.secrets.list",
      "secretmanager.secrets.setIamPolicy",
      "secretmanager.secrets.update",
      "secretmanager.versions.access",
      "secretmanager.versions.add",
      "secretmanager.versions.destroy",
      "secretmanager.versions.disable",
      "secretmanager.versions.enable",
      "secretmanager.versions.get",
      "secretmanager.versions.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/secretmanager.secretAccessor": {
    "name": "roles/secretmanager.secretAccessor",
    "title": "Secret Manager Secret Accessor",
    "description": "Allows accessing the payload of secrets.",
    "includedPermissions": [
      "secretmanager.versions.access"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/secretmanager.viewer": {
    "name": "roles/secretmanager.viewer",
    "title": "Secret Manager Viewer",
    "description": "Allows viewing metadata of all Secret Manager resources",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "secretmanager.locations.get",
      "secretmanager.locations.list",
      "secretmanager.secrets.get",
      "secretmanager.secrets.getIamPolicy",
      "secretmanager.secrets.list",
      "secretmanager.versions.get",
      "secretmanager.versions.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/securitycenter.admin": {
    "name": "roles/securitycenter.admin",
    "title": "Security Center Admin",
    "description": "Admin(super user) access to security center",
    "includedPermissions": [
      "resourcemanager.organizations.get",
      "securitycenter.assets.group",
      "securitycenter.assets.list",
      "securitycenter.assets.listAssetPropertyNames",
      "securitycenter.assets.runDiscovery",
      "securitycenter.assetsecuritymarks.update",
      "securitycenter.findings.group",
      "securitycenter.findings.list",
      "securitycenter.findings.listFindingPropertyNames",
      "securitycenter.findings.setState",
      "securitycenter.findings.update",
      "securitycenter.findingsecuritymarks.update",
      "securitycenter.notificationconfig.create",
      "securitycenter.notificationconfig.delete",
      "securitycenter.notificationconfig.get",
      "securitycenter.notificationconfig.list",
      "securitycenter.notificationconfig.update",
      "securitycenter.organizationsettings.get",
      "securitycenter.organizationsettings.update",
      "securitycenter.sources.get",
      "securitycenter.sources.getIamPolicy",
      "securitycenter.sources.list",
      "securitycenter.sources.setIamPolicy",
      "securitycenter.sources.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/securitycenter.adminEditor": {
    "name": "roles/securitycenter.adminEditor",
    "title": "Security Center Admin Editor",
    "description": "Admin Read-write access to security center",
    "includedPermissions": [
      "resourcemanager.organizations.get",
      "securitycenter.assets.group",
      "securitycenter.assets.list",
      "securitycenter.assets.listAssetPropertyNames",
      "securitycenter.assets.runDiscovery",
      "securitycenter.assetsecuritymarks.update",
      "securitycenter.findings.group",
      "securitycenter.findings.list",
      "securitycenter.findings.listFindingPropertyNames",
      "securitycenter.findings.setState",
      "securitycenter.findings.update",
      "securitycenter.findingsecuritymarks.update",
      "securitycenter.notificationconfig.create",
      "securitycenter.notificationconfig.delete",
      "securitycenter.notificationconfig.get",
      "securitycenter.notificationconfig.list",
      "securitycenter.notificationconfig.update",
      "securitycenter.sources.get",
      "securitycenter.sources.list",
      "securitycenter.sources.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/securitycenter.adminViewer": {
    "name": "roles/securitycenter.adminViewer",
    "title": "Security Center Admin Viewer",
    "description": "Admin Read access to security center",
    "includedPermissions": [
      "resourcemanager.organizations.get",
      "securitycenter.assets.group",
      "securitycenter.assets.list",
      "securitycenter.assets.listAssetPropertyNames",
      "securitycenter.findings.group",
      "securitycenter.findings.list",
      "securitycenter.findings.listFindingPropertyNames",
      "securitycenter.notificationconfig.get",
      "securitycenter.notificationconfig.list",
      "securitycenter.sources.get",
      "securitycenter.sources.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/securitycenter.assetSecurityMarksWriter": {
    "name": "roles/securitycenter.assetSecurityMarksWriter",
    "title": "Security Center Asset Security Marks Writer",
    "description": "Write access to asset security marks",
    "includedPermissions": [
      "securitycenter.assetsecuritymarks.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/securitycenter.assetsDiscoveryRunner": {
    "name": "roles/securitycenter.assetsDiscoveryRunner",
    "title": "Security Center Assets Discovery Runner",
    "description": "Run asset discovery access to assets",
    "includedPermissions": [
      "securitycenter.assets.runDiscovery"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/securitycenter.assetsViewer": {
    "name": "roles/securitycenter.assetsViewer",
    "title": "Security Center Assets Viewer",
    "description": "Read access to assets",
    "includedPermissions": [
      "resourcemanager.organizations.get",
      "securitycenter.assets.group",
      "securitycenter.assets.list",
      "securitycenter.assets.listAssetPropertyNames"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/securitycenter.findingSecurityMarksWriter": {
    "name": "roles/securitycenter.findingSecurityMarksWriter",
    "title": "Security Center Finding Security Marks Writer",
    "description": "Write access to finding security marks",
    "includedPermissions": [
      "securitycenter.findingsecuritymarks.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/securitycenter.findingsEditor": {
    "name": "roles/securitycenter.findingsEditor",
    "title": "Security Center Findings Editor",
    "description": "Read-write access to findings",
    "includedPermissions": [
      "resourcemanager.organizations.get",
      "securitycenter.findings.group",
      "securitycenter.findings.list",
      "securitycenter.findings.listFindingPropertyNames",
      "securitycenter.findings.setState",
      "securitycenter.findings.update",
      "securitycenter.sources.get",
      "securitycenter.sources.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/securitycenter.findingsStateSetter": {
    "name": "roles/securitycenter.findingsStateSetter",
    "title": "Security Center Findings State Setter",
    "description": "Set state access to findings",
    "includedPermissions": [
      "securitycenter.findings.setState"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/securitycenter.findingsViewer": {
    "name": "roles/securitycenter.findingsViewer",
    "title": "Security Center Findings Viewer",
    "description": "Read access to findings",
    "includedPermissions": [
      "resourcemanager.organizations.get",
      "securitycenter.findings.group",
      "securitycenter.findings.list",
      "securitycenter.findings.listFindingPropertyNames",
      "securitycenter.sources.get",
      "securitycenter.sources.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/securitycenter.notificationConfigEditor": {
    "name": "roles/securitycenter.notificationConfigEditor",
    "title": "Security Center Notification Configurations Editor",
    "description": "Write access to notification configurations",
    "includedPermissions": [
      "securitycenter.notificationconfig.create",
      "securitycenter.notificationconfig.delete",
      "securitycenter.notificationconfig.get",
      "securitycenter.notificationconfig.list",
      "securitycenter.notificationconfig.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/securitycenter.notificationConfigViewer": {
    "name": "roles/securitycenter.notificationConfigViewer",
    "title": "Security Center Notification Configurations Viewer",
    "description": "Read access to notification configurations",
    "includedPermissions": [
      "securitycenter.notificationconfig.get",
      "securitycenter.notificationconfig.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/securitycenter.sourcesAdmin": {
    "name": "roles/securitycenter.sourcesAdmin",
    "title": "Security Center Sources Admin",
    "description": "Admin access to sources",
    "includedPermissions": [
      "resourcemanager.organizations.get",
      "securitycenter.sources.get",
      "securitycenter.sources.getIamPolicy",
      "securitycenter.sources.list",
      "securitycenter.sources.setIamPolicy",
      "securitycenter.sources.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/securitycenter.sourcesEditor": {
    "name": "roles/securitycenter.sourcesEditor",
    "title": "Security Center Sources Editor",
    "description": "Read-write access to sources",
    "includedPermissions": [
      "resourcemanager.organizations.get",
      "securitycenter.sources.get",
      "securitycenter.sources.list",
      "securitycenter.sources.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/securitycenter.sourcesViewer": {
    "name": "roles/securitycenter.sourcesViewer",
    "title": "Security Center Sources Viewer",
    "description": "Read access to sources",
    "includedPermissions": [
      "resourcemanager.organizations.get",
      "securitycenter.sources.get",
      "securitycenter.sources.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/serverless.serviceAgent": {
    "name": "roles/serverless.serviceAgent",
    "title": "Cloud Run Service Agent",
    "description": "Gives Cloud Run service account access to managed resources.",
    "includedPermissions": [
      "clientauthconfig.clients.list",
      "cloudbuild.builds.create",
      "cloudbuild.builds.get",
      "iam.serviceAccounts.actAs",
      "iam.serviceAccounts.getAccessToken",
      "iam.serviceAccounts.getOpenIdToken",
      "iam.serviceAccounts.signBlob",
      "pubsub.subscriptions.create",
      "pubsub.subscriptions.delete",
      "pubsub.subscriptions.get",
      "pubsub.subscriptions.list",
      "pubsub.topics.attachSubscription",
      "pubsub.topics.create",
      "pubsub.topics.delete",
      "pubsub.topics.get",
      "pubsub.topics.list",
      "pubsub.topics.publish",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "run.routes.invoke",
      "storage.objects.get",
      "storage.objects.list"
    ],
    "etag": "AA=="
  },
  "roles/servicebroker.admin": {
    "name": "roles/servicebroker.admin",
    "title": "Service Broker Admin",
    "description": "Full access to ServiceBroker resources.",
    "includedPermissions": [
      "servicebroker.bindingoperations.get",
      "servicebroker.bindingoperations.list",
      "servicebroker.bindings.create",
      "servicebroker.bindings.delete",
      "servicebroker.bindings.get",
      "servicebroker.bindings.getIamPolicy",
      "servicebroker.bindings.list",
      "servicebroker.bindings.setIamPolicy",
      "servicebroker.catalogs.create",
      "servicebroker.catalogs.delete",
      "servicebroker.catalogs.get",
      "servicebroker.catalogs.getIamPolicy",
      "servicebroker.catalogs.list",
      "servicebroker.catalogs.setIamPolicy",
      "servicebroker.catalogs.validate",
      "servicebroker.instanceoperations.get",
      "servicebroker.instanceoperations.list",
      "servicebroker.instances.create",
      "servicebroker.instances.delete",
      "servicebroker.instances.get",
      "servicebroker.instances.getIamPolicy",
      "servicebroker.instances.list",
      "servicebroker.instances.setIamPolicy",
      "servicebroker.instances.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/servicebroker.operator": {
    "name": "roles/servicebroker.operator",
    "title": "Service Broker Operator",
    "description": "Operational access to the ServiceBroker resources.",
    "includedPermissions": [
      "servicebroker.bindingoperations.get",
      "servicebroker.bindingoperations.list",
      "servicebroker.bindings.create",
      "servicebroker.bindings.delete",
      "servicebroker.bindings.get",
      "servicebroker.bindings.list",
      "servicebroker.catalogs.create",
      "servicebroker.catalogs.delete",
      "servicebroker.catalogs.get",
      "servicebroker.catalogs.list",
      "servicebroker.instanceoperations.get",
      "servicebroker.instanceoperations.list",
      "servicebroker.instances.create",
      "servicebroker.instances.delete",
      "servicebroker.instances.get",
      "servicebroker.instances.list",
      "servicebroker.instances.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/serviceconsumermanagement.tenancyUnitsAdmin": {
    "name": "roles/serviceconsumermanagement.tenancyUnitsAdmin",
    "title": "Admin of Tenancy Units",
    "description": "Administrate tenancy units",
    "includedPermissions": [
      "serviceconsumermanagement.tenancyu.addResource",
      "serviceconsumermanagement.tenancyu.create",
      "serviceconsumermanagement.tenancyu.delete",
      "serviceconsumermanagement.tenancyu.list",
      "serviceconsumermanagement.tenancyu.removeResource"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/serviceconsumermanagement.tenancyUnitsViewer": {
    "name": "roles/serviceconsumermanagement.tenancyUnitsViewer",
    "title": "Viewer of Tenancy Units",
    "description": "View tenancy units",
    "includedPermissions": [
      "serviceconsumermanagement.tenancyu.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/servicemanagement.admin": {
    "name": "roles/servicemanagement.admin",
    "title": "Service Management Administrator",
    "description": "Full control of Google Service Management resources.",
    "includedPermissions": [
      "monitoring.timeSeries.list",
      "resourcemanager.folders.get",
      "resourcemanager.folders.list",
      "resourcemanager.organizations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceconsumermanagement.consumers.get",
      "serviceconsumermanagement.quota.get",
      "serviceconsumermanagement.quota.update",
      "serviceconsumermanagement.tenancyu.addResource",
      "serviceconsumermanagement.tenancyu.create",
      "serviceconsumermanagement.tenancyu.delete",
      "serviceconsumermanagement.tenancyu.list",
      "serviceconsumermanagement.tenancyu.removeResource",
      "servicemanagement.services.bind",
      "servicemanagement.services.check",
      "servicemanagement.services.create",
      "servicemanagement.services.delete",
      "servicemanagement.services.get",
      "servicemanagement.services.getIamPolicy",
      "servicemanagement.services.list",
      "servicemanagement.services.quota",
      "servicemanagement.services.report",
      "servicemanagement.services.setIamPolicy",
      "servicemanagement.services.update",
      "serviceusage.quotas.get",
      "serviceusage.services.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/servicemanagement.configEditor": {
    "name": "roles/servicemanagement.configEditor",
    "title": "Service Config Editor",
    "description": "Access to update the service config and create rollouts.",
    "includedPermissions": [
      "servicemanagement.services.get",
      "servicemanagement.services.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/servicemanagement.quotaAdmin": {
    "name": "roles/servicemanagement.quotaAdmin",
    "title": "Quota Administrator",
    "description": "Access to administer service quotas.",
    "includedPermissions": [
      "monitoring.timeSeries.list",
      "resourcemanager.organizations.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "servicemanagement.consumerSettings.get",
      "servicemanagement.consumerSettings.getIamPolicy",
      "servicemanagement.consumerSettings.list",
      "servicemanagement.consumerSettings.setIamPolicy",
      "servicemanagement.consumerSettings.update",
      "serviceusage.quotas.get",
      "serviceusage.quotas.update",
      "serviceusage.services.disable",
      "serviceusage.services.enable",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/servicemanagement.quotaViewer": {
    "name": "roles/servicemanagement.quotaViewer",
    "title": "Quota Viewer",
    "description": "Access to view service quotas.",
    "includedPermissions": [
      "monitoring.timeSeries.list",
      "servicemanagement.consumerSettings.get",
      "servicemanagement.consumerSettings.getIamPolicy",
      "servicemanagement.consumerSettings.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/servicemanagement.serviceConsumer": {
    "name": "roles/servicemanagement.serviceConsumer",
    "title": "Service Consumer",
    "description": "Can enable the service.",
    "includedPermissions": [
      "servicemanagement.services.bind"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/servicemanagement.serviceController": {
    "name": "roles/servicemanagement.serviceController",
    "title": "Service Controller",
    "description": "Can check preconditions and report usage of a service during runtime.",
    "includedPermissions": [
      "servicemanagement.services.check",
      "servicemanagement.services.get",
      "servicemanagement.services.quota",
      "servicemanagement.services.report"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/servicenetworking.networksAdmin": {
    "name": "roles/servicenetworking.networksAdmin",
    "title": "Service Networking Admin",
    "description": "Full control of service networking with projects.",
    "includedPermissions": [
      "servicenetworking.operations.cancel",
      "servicenetworking.operations.delete",
      "servicenetworking.operations.get",
      "servicenetworking.operations.list",
      "servicenetworking.services.addPeering",
      "servicenetworking.services.addSubnetwork",
      "servicenetworking.services.get"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/serviceusage.apiKeysAdmin": {
    "name": "roles/serviceusage.apiKeysAdmin",
    "title": "API Keys Admin",
    "description": "Ability to create, delete, update, get and list API keys for a project.",
    "includedPermissions": [
      "serviceusage.apiKeys.create",
      "serviceusage.apiKeys.delete",
      "serviceusage.apiKeys.get",
      "serviceusage.apiKeys.getProjectForKey",
      "serviceusage.apiKeys.list",
      "serviceusage.apiKeys.regenerate",
      "serviceusage.apiKeys.revert",
      "serviceusage.apiKeys.update",
      "serviceusage.operations.get"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/serviceusage.apiKeysViewer": {
    "name": "roles/serviceusage.apiKeysViewer",
    "title": "API Keys Viewer",
    "description": "Ability to get and list API keys for a project.",
    "includedPermissions": [
      "serviceusage.apiKeys.get",
      "serviceusage.apiKeys.getProjectForKey",
      "serviceusage.apiKeys.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/serviceusage.serviceUsageAdmin": {
    "name": "roles/serviceusage.serviceUsageAdmin",
    "title": "Service Usage Admin",
    "description": "Ability to enable, disable, and inspect service states, inspect operations, and consume quota and billing for a consumer project.",
    "includedPermissions": [
      "monitoring.timeSeries.list",
      "serviceusage.operations.cancel",
      "serviceusage.operations.delete",
      "serviceusage.operations.get",
      "serviceusage.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.quotas.update",
      "serviceusage.services.disable",
      "serviceusage.services.enable",
      "serviceusage.services.get",
      "serviceusage.services.list",
      "serviceusage.services.use"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/serviceusage.serviceUsageConsumer": {
    "name": "roles/serviceusage.serviceUsageConsumer",
    "title": "Service Usage Consumer",
    "description": "Ability to inspect service states and operations, and consume quota and billing for a consumer project.",
    "includedPermissions": [
      "monitoring.timeSeries.list",
      "serviceusage.operations.get",
      "serviceusage.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list",
      "serviceusage.services.use"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/serviceusage.serviceUsageViewer": {
    "name": "roles/serviceusage.serviceUsageViewer",
    "title": "Service Usage Viewer",
    "description": "Ability to inspect service states and operations for a consumer project.",
    "includedPermissions": [
      "monitoring.timeSeries.list",
      "serviceusage.operations.get",
      "serviceusage.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/source.admin": {
    "name": "roles/source.admin",
    "title": "Source Repository Administrator",
    "description": "Admin access to repositories",
    "includedPermissions": [
      "source.repos.create",
      "source.repos.delete",
      "source.repos.get",
      "source.repos.getIamPolicy",
      "source.repos.getProjectConfig",
      "source.repos.list",
      "source.repos.setIamPolicy",
      "source.repos.update",
      "source.repos.updateProjectConfig",
      "source.repos.updateRepoConfig"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/source.reader": {
    "name": "roles/source.reader",
    "title": "Source Repository Reader",
    "description": "Read access to repositories",
    "includedPermissions": [
      "source.repos.get",
      "source.repos.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/source.writer": {
    "name": "roles/source.writer",
    "title": "Source Repository Writer",
    "description": "Read / Write access to repositories",
    "includedPermissions": [
      "source.repos.get",
      "source.repos.list",
      "source.repos.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/spanner.admin": {
    "name": "roles/spanner.admin",
    "title": "Cloud Spanner Admin",
    "description": "Full control of Cloud Spanner resources.",
    "includedPermissions": [
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "spanner.databaseOperations.cancel",
      "spanner.databaseOperations.delete",
      "spanner.databaseOperations.get",
      "spanner.databaseOperations.list",
      "spanner.databases.beginOrRollbackReadWriteTransaction",
      "spanner.databases.beginReadOnlyTransaction",
      "spanner.databases.create",
      "spanner.databases.drop",
      "spanner.databases.get",
      "spanner.databases.getDdl",
      "spanner.databases.getIamPolicy",
      "spanner.databases.list",
      "spanner.databases.read",
      "spanner.databases.select",
      "spanner.databases.setIamPolicy",
      "spanner.databases.update",
      "spanner.databases.updateDdl",
      "spanner.databases.write",
      "spanner.instanceConfigs.get",
      "spanner.instanceConfigs.list",
      "spanner.instanceOperations.cancel",
      "spanner.instanceOperations.delete",
      "spanner.instanceOperations.get",
      "spanner.instanceOperations.list",
      "spanner.instances.create",
      "spanner.instances.delete",
      "spanner.instances.get",
      "spanner.instances.getIamPolicy",
      "spanner.instances.list",
      "spanner.instances.setIamPolicy",
      "spanner.instances.update",
      "spanner.sessions.create",
      "spanner.sessions.delete",
      "spanner.sessions.get",
      "spanner.sessions.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/spanner.databaseAdmin": {
    "name": "roles/spanner.databaseAdmin",
    "title": "Cloud Spanner Database Admin",
    "description": "Full control of Cloud Spanner databases.",
    "includedPermissions": [
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "spanner.databaseOperations.cancel",
      "spanner.databaseOperations.delete",
      "spanner.databaseOperations.get",
      "spanner.databaseOperations.list",
      "spanner.databases.beginOrRollbackReadWriteTransaction",
      "spanner.databases.beginReadOnlyTransaction",
      "spanner.databases.create",
      "spanner.databases.drop",
      "spanner.databases.get",
      "spanner.databases.getDdl",
      "spanner.databases.getIamPolicy",
      "spanner.databases.list",
      "spanner.databases.read",
      "spanner.databases.select",
      "spanner.databases.setIamPolicy",
      "spanner.databases.update",
      "spanner.databases.updateDdl",
      "spanner.databases.write",
      "spanner.instances.get",
      "spanner.instances.getIamPolicy",
      "spanner.instances.list",
      "spanner.sessions.create",
      "spanner.sessions.delete",
      "spanner.sessions.get",
      "spanner.sessions.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/spanner.databaseReader": {
    "name": "roles/spanner.databaseReader",
    "title": "Cloud Spanner Database Reader",
    "description": "Access to read and/or query a Cloud Spanner database.",
    "includedPermissions": [
      "spanner.databases.beginReadOnlyTransaction",
      "spanner.databases.getDdl",
      "spanner.databases.read",
      "spanner.databases.select",
      "spanner.instances.get",
      "spanner.sessions.create",
      "spanner.sessions.delete",
      "spanner.sessions.get",
      "spanner.sessions.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/spanner.databaseUser": {
    "name": "roles/spanner.databaseUser",
    "title": "Cloud Spanner Database User",
    "description": "Access to read, query, write and view and change the schema of Cloud Spanner databases",
    "includedPermissions": [
      "spanner.databaseOperations.cancel",
      "spanner.databaseOperations.delete",
      "spanner.databaseOperations.get",
      "spanner.databaseOperations.list",
      "spanner.databases.beginOrRollbackReadWriteTransaction",
      "spanner.databases.beginReadOnlyTransaction",
      "spanner.databases.getDdl",
      "spanner.databases.read",
      "spanner.databases.select",
      "spanner.databases.updateDdl",
      "spanner.databases.write",
      "spanner.instances.get",
      "spanner.sessions.create",
      "spanner.sessions.delete",
      "spanner.sessions.get",
      "spanner.sessions.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/spanner.viewer": {
    "name": "roles/spanner.viewer",
    "title": "Cloud Spanner Viewer",
    "description": "Viewer access to Cloud Spanner resources.",
    "includedPermissions": [
      "monitoring.timeSeries.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "spanner.databases.list",
      "spanner.instanceConfigs.get",
      "spanner.instanceConfigs.list",
      "spanner.instances.get",
      "spanner.instances.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/stackdriver.accounts.editor": {
    "name": "roles/stackdriver.accounts.editor",
    "title": "Stackdriver Accounts Editor",
    "description": "Read/write access to manage Stackdriver account structure.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "serviceusage.services.enable",
      "stackdriver.projects.edit",
      "stackdriver.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/stackdriver.accounts.viewer": {
    "name": "roles/stackdriver.accounts.viewer",
    "title": "Stackdriver Accounts Viewer",
    "description": "Read-only access to get and list information about Stackdriver account structure.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "stackdriver.projects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/stackdriver.resourceMaintenanceWindow.editor": {
    "name": "roles/stackdriver.resourceMaintenanceWindow.editor",
    "title": "Stackdriver Resource Maintenance Window Editor",
    "description": "Read/write access to manage Stackdriver resource maintenance windows.",
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/stackdriver.resourceMaintenanceWindow.viewer": {
    "name": "roles/stackdriver.resourceMaintenanceWindow.viewer",
    "title": "Stackdriver Resource Maintenance Window Viewer",
    "description": "Read-only access to information about Stackdriver resource maintenance windows.",
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/stackdriver.resourceMetadata.writer": {
    "name": "roles/stackdriver.resourceMetadata.writer",
    "title": "Stackdriver Resource Metadata Writer",
    "description": "Write-only access to resource metadata.  This provides exactly the permissions needed by the Stackdriver metadata agent and other systems that send metadata.",
    "includedPermissions": [
      "stackdriver.resourceMetadata.write"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/storage.admin": {
    "name": "roles/storage.admin",
    "title": "Storage Admin",
    "description": "Full control of GCS resources.",
    "includedPermissions": [
      "firebase.projects.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "storage.buckets.create",
      "storage.buckets.delete",
      "storage.buckets.get",
      "storage.buckets.getIamPolicy",
      "storage.buckets.list",
      "storage.buckets.setIamPolicy",
      "storage.buckets.update",
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.get",
      "storage.objects.getIamPolicy",
      "storage.objects.list",
      "storage.objects.setIamPolicy",
      "storage.objects.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/storage.hmacKeyAdmin": {
    "name": "roles/storage.hmacKeyAdmin",
    "title": "Storage HMAC Key Admin",
    "description": "Full control of GCS HMAC Keys.",
    "includedPermissions": [
      "firebase.projects.get",
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "storage.hmacKeys.create",
      "storage.hmacKeys.delete",
      "storage.hmacKeys.get",
      "storage.hmacKeys.list",
      "storage.hmacKeys.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/storage.legacyBucketOwner": {
    "name": "roles/storage.legacyBucketOwner",
    "title": "Storage Legacy Bucket Owner",
    "description": "Read and write access to existing buckets with object listing/creation/deletion.",
    "includedPermissions": [
      "storage.buckets.get",
      "storage.buckets.getIamPolicy",
      "storage.buckets.setIamPolicy",
      "storage.buckets.update",
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/storage.legacyBucketReader": {
    "name": "roles/storage.legacyBucketReader",
    "title": "Storage Legacy Bucket Reader",
    "description": "Read access to buckets with object listing.",
    "includedPermissions": [
      "storage.buckets.get",
      "storage.objects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/storage.legacyBucketWriter": {
    "name": "roles/storage.legacyBucketWriter",
    "title": "Storage Legacy Bucket Writer",
    "description": "Read access to buckets with object listing/creation/deletion.",
    "includedPermissions": [
      "storage.buckets.get",
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/storage.legacyObjectOwner": {
    "name": "roles/storage.legacyObjectOwner",
    "title": "Storage Legacy Object Owner",
    "description": "Read/write access to existing objects without listing.",
    "includedPermissions": [
      "storage.objects.get",
      "storage.objects.getIamPolicy",
      "storage.objects.setIamPolicy",
      "storage.objects.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/storage.legacyObjectReader": {
    "name": "roles/storage.legacyObjectReader",
    "title": "Storage Legacy Object Reader",
    "description": "Read access to objects without listing.",
    "includedPermissions": [
      "storage.objects.get"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/storage.objectAdmin": {
    "name": "roles/storage.objectAdmin",
    "title": "Storage Object Admin",
    "description": "Full control of GCS objects.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "storage.objects.create",
      "storage.objects.delete",
      "storage.objects.get",
      "storage.objects.getIamPolicy",
      "storage.objects.list",
      "storage.objects.setIamPolicy",
      "storage.objects.update"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/storage.objectCreator": {
    "name": "roles/storage.objectCreator",
    "title": "Storage Object Creator",
    "description": "Access to create objects in GCS.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "storage.objects.create"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/storage.objectViewer": {
    "name": "roles/storage.objectViewer",
    "title": "Storage Object Viewer",
    "description": "Read access to GCS objects.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "storage.objects.get",
      "storage.objects.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/storagetransfer.admin": {
    "name": "roles/storagetransfer.admin",
    "title": "Storage Transfer Admin",
    "description": "Create, update and manage transfer jobs and operations.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "storagetransfer.jobs.create",
      "storagetransfer.jobs.delete",
      "storagetransfer.jobs.get",
      "storagetransfer.jobs.list",
      "storagetransfer.jobs.update",
      "storagetransfer.operations.cancel",
      "storagetransfer.operations.get",
      "storagetransfer.operations.list",
      "storagetransfer.operations.pause",
      "storagetransfer.operations.resume",
      "storagetransfer.projects.getServiceAccount"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/storagetransfer.user": {
    "name": "roles/storagetransfer.user",
    "title": "Storage Transfer User",
    "description": "Create and update storage transfer jobs and operations.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "storagetransfer.jobs.create",
      "storagetransfer.jobs.get",
      "storagetransfer.jobs.list",
      "storagetransfer.jobs.update",
      "storagetransfer.operations.cancel",
      "storagetransfer.operations.get",
      "storagetransfer.operations.list",
      "storagetransfer.operations.pause",
      "storagetransfer.operations.resume",
      "storagetransfer.projects.getServiceAccount"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/storagetransfer.viewer": {
    "name": "roles/storagetransfer.viewer",
    "title": "Storage Transfer Viewer",
    "description": "Read access to storage transfer jobs and operations.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "storagetransfer.jobs.get",
      "storagetransfer.jobs.list",
      "storagetransfer.operations.get",
      "storagetransfer.operations.list",
      "storagetransfer.projects.getServiceAccount"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/subscribewithgoogledeveloper.developer": {
    "name": "roles/subscribewithgoogledeveloper.developer",
    "title": "Subscribe with Google Developer",
    "description": "Access DevTools for Subscribe with Google",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "subscribewithgoogledeveloper.tools.get"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/threatdetection.editor": {
    "name": "roles/threatdetection.editor",
    "title": "Threat Detection Settings Editor",
    "description": "Read-write access to all Threat Detection settings",
    "includedPermissions": [
      "threatdetection.detectorSettings.clear",
      "threatdetection.detectorSettings.get",
      "threatdetection.detectorSettings.update",
      "threatdetection.sinkSettings.get",
      "threatdetection.sinkSettings.update",
      "threatdetection.sourceSettings.get",
      "threatdetection.sourceSettings.update"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/threatdetection.viewer": {
    "name": "roles/threatdetection.viewer",
    "title": "Threat Detection Settings Viewer",
    "description": "Read access to all Threat Detection settings",
    "includedPermissions": [
      "threatdetection.detectorSettings.get",
      "threatdetection.sinkSettings.get",
      "threatdetection.sourceSettings.get"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/tpu.admin": {
    "name": "roles/tpu.admin",
    "title": "TPU Admin",
    "description": "Full access to TPU nodes and related resources.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "tpu.acceleratortypes.get",
      "tpu.acceleratortypes.list",
      "tpu.locations.get",
      "tpu.locations.list",
      "tpu.nodes.create",
      "tpu.nodes.delete",
      "tpu.nodes.get",
      "tpu.nodes.list",
      "tpu.nodes.reimage",
      "tpu.nodes.reset",
      "tpu.nodes.start",
      "tpu.nodes.stop",
      "tpu.operations.get",
      "tpu.operations.list",
      "tpu.tensorflowversions.get",
      "tpu.tensorflowversions.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/tpu.viewer": {
    "name": "roles/tpu.viewer",
    "title": "TPU Viewer",
    "description": "Read-only access to TPU nodes and related resources.",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "tpu.acceleratortypes.get",
      "tpu.acceleratortypes.list",
      "tpu.locations.get",
      "tpu.locations.list",
      "tpu.nodes.get",
      "tpu.nodes.list",
      "tpu.operations.get",
      "tpu.operations.list",
      "tpu.tensorflowversions.get",
      "tpu.tensorflowversions.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/viewer": {
    "name": "roles/viewer",
    "title": "Viewer",
    "description": "Read access to all resources.",
    "includedPermissions": [
      "accessapproval.requests.get",
      "accessapproval.requests.list",
      "accessapproval.settings.get",
      "accesscontextmanager.accessLevels.get",
      "accesscontextmanager.accessLevels.list",
      "accesscontextmanager.accessPolicies.get",
      "accesscontextmanager.accessPolicies.getIamPolicy",
      "accesscontextmanager.accessPolicies.list",
      "accesscontextmanager.accessZones.get",
      "accesscontextmanager.accessZones.list",
      "accesscontextmanager.policies.get",
      "accesscontextmanager.policies.getIamPolicy",
      "accesscontextmanager.policies.list",
      "accesscontextmanager.servicePerimeters.get",
      "accesscontextmanager.servicePerimeters.list",
      "actions.agent.get",
      "actions.agentVersions.get",
      "actions.agentVersions.list",
      "apigee.apiproductattributes.get",
      "apigee.apiproductattributes.list",
      "apigee.apiproducts.get",
      "apigee.apiproducts.list",
      "apigee.appkeys.create",
      "apigee.appkeys.get",
      "apigee.apps.get",
      "apigee.apps.list",
      "apigee.deployments.get",
      "apigee.deployments.list",
      "apigee.developerappattributes.get",
      "apigee.developerappattributes.list",
      "apigee.developerapps.get",
      "apigee.developerapps.list",
      "apigee.developerattributes.get",
      "apigee.developerattributes.list",
      "apigee.developers.get",
      "apigee.developers.list",
      "apigee.environments.get",
      "apigee.environments.getDataLocation",
      "apigee.environments.getIamPolicy",
      "apigee.environments.list",
      "apigee.flowhooks.getSharedFlow",
      "apigee.flowhooks.list",
      "apigee.keystorealiases.generateCSR",
      "apigee.keystorealiases.get",
      "apigee.keystorealiases.list",
      "apigee.keystores.export",
      "apigee.keystores.get",
      "apigee.keystores.list",
      "apigee.keyvaluemaps.list",
      "apigee.maskconfigs.get",
      "apigee.organizations.get",
      "apigee.organizations.list",
      "apigee.proxies.get",
      "apigee.proxies.list",
      "apigee.proxyrevisions.get",
      "apigee.proxyrevisions.list",
      "apigee.queries.get",
      "apigee.queries.list",
      "apigee.references.get",
      "apigee.references.list",
      "apigee.reports.get",
      "apigee.reports.list",
      "apigee.resourcefiles.get",
      "apigee.resourcefiles.list",
      "apigee.sharedflowrevisions.get",
      "apigee.sharedflowrevisions.list",
      "apigee.sharedflows.get",
      "apigee.sharedflows.list",
      "apigee.targetservers.get",
      "apigee.targetservers.list",
      "apigee.tracesessions.get",
      "apigee.tracesessions.list",
      "appengine.applications.get",
      "appengine.instances.get",
      "appengine.instances.list",
      "appengine.memcache.get",
      "appengine.memcache.getKey",
      "appengine.memcache.list",
      "appengine.operations.get",
      "appengine.operations.list",
      "appengine.runtimes.actAsAdmin",
      "appengine.services.get",
      "appengine.services.list",
      "appengine.versions.get",
      "appengine.versions.list",
      "artifactregistry.files.get",
      "artifactregistry.files.list",
      "artifactregistry.packages.get",
      "artifactregistry.packages.list",
      "artifactregistry.repositories.downloadArtifacts",
      "artifactregistry.repositories.get",
      "artifactregistry.repositories.getIamPolicy",
      "artifactregistry.repositories.list",
      "artifactregistry.tags.get",
      "artifactregistry.tags.list",
      "artifactregistry.versions.get",
      "artifactregistry.versions.list",
      "automl.annotationSpecs.get",
      "automl.annotationSpecs.list",
      "automl.annotations.list",
      "automl.columnSpecs.get",
      "automl.columnSpecs.list",
      "automl.datasets.export",
      "automl.datasets.get",
      "automl.datasets.getIamPolicy",
      "automl.datasets.list",
      "automl.examples.get",
      "automl.examples.list",
      "automl.humanAnnotationTasks.get",
      "automl.humanAnnotationTasks.list",
      "automl.locations.get",
      "automl.locations.getIamPolicy",
      "automl.locations.list",
      "automl.modelEvaluations.get",
      "automl.modelEvaluations.list",
      "automl.models.export",
      "automl.models.get",
      "automl.models.getIamPolicy",
      "automl.models.list",
      "automl.models.predict",
      "automl.operations.get",
      "automl.operations.list",
      "automl.tableSpecs.get",
      "automl.tableSpecs.list",
      "automlrecommendations.catalogItems.get",
      "automlrecommendations.catalogItems.list",
      "automlrecommendations.catalogs.getStats",
      "automlrecommendations.catalogs.list",
      "automlrecommendations.eventStores.getStats",
      "automlrecommendations.events.list",
      "automlrecommendations.placements.getStats",
      "automlrecommendations.placements.list",
      "automlrecommendations.recommendations.list",
      "bigquery.config.get",
      "bigquery.connections.get",
      "bigquery.connections.getIamPolicy",
      "bigquery.connections.list",
      "bigquery.connections.use",
      "bigquery.datasets.get",
      "bigquery.datasets.getIamPolicy",
      "bigquery.jobs.create",
      "bigquery.jobs.get",
      "bigquery.jobs.list",
      "bigquery.models.getData",
      "bigquery.models.getMetadata",
      "bigquery.models.list",
      "bigquery.readsessions.create",
      "bigquery.routines.get",
      "bigquery.routines.list",
      "bigquery.savedqueries.get",
      "bigquery.savedqueries.list",
      "bigquery.transfers.get",
      "bigtable.appProfiles.get",
      "bigtable.appProfiles.list",
      "bigtable.clusters.get",
      "bigtable.clusters.list",
      "bigtable.instances.get",
      "bigtable.instances.getIamPolicy",
      "bigtable.instances.list",
      "bigtable.locations.list",
      "bigtable.tables.checkConsistency",
      "bigtable.tables.generateConsistencyToken",
      "bigtable.tables.get",
      "bigtable.tables.getIamPolicy",
      "bigtable.tables.list",
      "bigtable.tables.readRows",
      "bigtable.tables.sampleRowKeys",
      "billing.resourceCosts.get",
      "binaryauthorization.attestors.get",
      "binaryauthorization.attestors.getIamPolicy",
      "binaryauthorization.attestors.list",
      "binaryauthorization.attestors.verifyImageAttested",
      "binaryauthorization.policy.get",
      "binaryauthorization.policy.getIamPolicy",
      "chat.bots.get",
      "clientauthconfig.brands.get",
      "clientauthconfig.brands.list",
      "clientauthconfig.clients.get",
      "clientauthconfig.clients.list",
      "cloudasset.assets.exportAppengineApplications",
      "cloudasset.assets.exportAppengineServices",
      "cloudasset.assets.exportAppengineVersions",
      "cloudasset.assets.exportBigqueryDatasets",
      "cloudasset.assets.exportBigqueryTables",
      "cloudasset.assets.exportCloudbillingBillingAccounts",
      "cloudasset.assets.exportCloudkmsCryptoKeyVersions",
      "cloudasset.assets.exportCloudkmsCryptoKeys",
      "cloudasset.assets.exportCloudkmsKeyRings",
      "cloudasset.assets.exportCloudresourcemanagerFolders",
      "cloudasset.assets.exportCloudresourcemanagerOrganizations",
      "cloudasset.assets.exportCloudresourcemanagerProjects",
      "cloudasset.assets.exportComputeAddress",
      "cloudasset.assets.exportComputeAutoscalers",
      "cloudasset.assets.exportComputeBackendBuckets",
      "cloudasset.assets.exportComputeBackendServices",
      "cloudasset.assets.exportComputeDisks",
      "cloudasset.assets.exportComputeFirewalls",
      "cloudasset.assets.exportComputeForwardingRules",
      "cloudasset.assets.exportComputeGlobalForwardingRules",
      "cloudasset.assets.exportComputeHealthChecks",
      "cloudasset.assets.exportComputeHttpHealthChecks",
      "cloudasset.assets.exportComputeHttpsHealthChecks",
      "cloudasset.assets.exportComputeImages",
      "cloudasset.assets.exportComputeInstanceGroupManagers",
      "cloudasset.assets.exportComputeInstanceGroups",
      "cloudasset.assets.exportComputeInstanceTemplates",
      "cloudasset.assets.exportComputeInstances",
      "cloudasset.assets.exportComputeInterconnect",
      "cloudasset.assets.exportComputeInterconnectAttachment",
      "cloudasset.assets.exportComputeLicenses",
      "cloudasset.assets.exportComputeNetworks",
      "cloudasset.assets.exportComputeProjects",
      "cloudasset.assets.exportComputeRegionBackendServices",
      "cloudasset.assets.exportComputeRouters",
      "cloudasset.assets.exportComputeRoutes",
      "cloudasset.assets.exportComputeSecurityPolicy",
      "cloudasset.assets.exportComputeSnapshots",
      "cloudasset.assets.exportComputeSslCertificates",
      "cloudasset.assets.exportComputeSubnetworks",
      "cloudasset.assets.exportComputeTargetHttpProxies",
      "cloudasset.assets.exportComputeTargetHttpsProxies",
      "cloudasset.assets.exportComputeTargetInstances",
      "cloudasset.assets.exportComputeTargetPools",
      "cloudasset.assets.exportComputeTargetSslProxies",
      "cloudasset.assets.exportComputeTargetTcpProxies",
      "cloudasset.assets.exportComputeTargetVpnGateways",
      "cloudasset.assets.exportComputeUrlMaps",
      "cloudasset.assets.exportComputeVpnTunnels",
      "cloudasset.assets.exportContainerClusters",
      "cloudasset.assets.exportDataprocClusters",
      "cloudasset.assets.exportDataprocJobs",
      "cloudasset.assets.exportDnsManagedZones",
      "cloudasset.assets.exportDnsPolicies",
      "cloudasset.assets.exportIamRoles",
      "cloudasset.assets.exportIamServiceAccountKeys",
      "cloudasset.assets.exportIamServiceAccounts",
      "cloudasset.assets.exportPubsubSubscriptions",
      "cloudasset.assets.exportPubsubTopics",
      "cloudasset.assets.exportServicemanagementServices",
      "cloudasset.assets.exportSpannerDatabases",
      "cloudasset.assets.exportSpannerInstances",
      "cloudasset.assets.exportSqladminInstances",
      "cloudasset.assets.exportStorageBuckets",
      "cloudbuild.builds.get",
      "cloudbuild.builds.list",
      "cloudconfig.configs.get",
      "cloudfunctions.functions.get",
      "cloudfunctions.functions.getIamPolicy",
      "cloudfunctions.functions.list",
      "cloudfunctions.functions.sourceCodeGet",
      "cloudfunctions.locations.list",
      "cloudfunctions.operations.get",
      "cloudfunctions.operations.list",
      "cloudiot.devices.get",
      "cloudiot.devices.list",
      "cloudiot.registries.get",
      "cloudiot.registries.getIamPolicy",
      "cloudiot.registries.list",
      "cloudiottoken.tokensettings.get",
      "cloudjobdiscovery.companies.get",
      "cloudjobdiscovery.companies.list",
      "cloudjobdiscovery.jobs.get",
      "cloudjobdiscovery.jobs.search",
      "cloudjobdiscovery.profiles.get",
      "cloudjobdiscovery.profiles.search",
      "cloudjobdiscovery.tenants.get",
      "cloudkms.cryptoKeyVersions.get",
      "cloudkms.cryptoKeyVersions.list",
      "cloudkms.cryptoKeys.get",
      "cloudkms.cryptoKeys.getIamPolicy",
      "cloudkms.cryptoKeys.list",
      "cloudkms.importJobs.get",
      "cloudkms.importJobs.getIamPolicy",
      "cloudkms.importJobs.list",
      "cloudkms.keyRings.get",
      "cloudkms.keyRings.getIamPolicy",
      "cloudkms.keyRings.list",
      "cloudnotifications.activities.list",
      "cloudprivatecatalog.targets.get",
      "cloudprivatecatalogproducer.associations.get",
      "cloudprivatecatalogproducer.associations.list",
      "cloudprivatecatalogproducer.catalogs.get",
      "cloudprivatecatalogproducer.catalogs.getIamPolicy",
      "cloudprivatecatalogproducer.catalogs.list",
      "cloudprofiler.profiles.list",
      "cloudscheduler.jobs.fullView",
      "cloudscheduler.jobs.get",
      "cloudscheduler.jobs.list",
      "cloudscheduler.locations.get",
      "cloudscheduler.locations.list",
      "cloudsql.backupRuns.get",
      "cloudsql.backupRuns.list",
      "cloudsql.databases.get",
      "cloudsql.databases.list",
      "cloudsql.instances.export",
      "cloudsql.instances.get",
      "cloudsql.instances.list",
      "cloudsql.instances.listServerCas",
      "cloudsql.sslCerts.get",
      "cloudsql.sslCerts.list",
      "cloudsql.users.list",
      "cloudsupport.accounts.get",
      "cloudsupport.accounts.getIamPolicy",
      "cloudsupport.accounts.getUserRoles",
      "cloudsupport.accounts.list",
      "cloudsupport.operations.get",
      "cloudtasks.locations.get",
      "cloudtasks.locations.list",
      "cloudtasks.queues.get",
      "cloudtasks.queues.list",
      "cloudtasks.tasks.fullView",
      "cloudtasks.tasks.get",
      "cloudtasks.tasks.list",
      "cloudtestservice.environmentcatalog.get",
      "cloudtestservice.matrices.get",
      "cloudtoolresults.executions.get",
      "cloudtoolresults.executions.list",
      "cloudtoolresults.histories.get",
      "cloudtoolresults.histories.list",
      "cloudtoolresults.settings.get",
      "cloudtoolresults.steps.get",
      "cloudtoolresults.steps.list",
      "cloudtrace.insights.get",
      "cloudtrace.insights.list",
      "cloudtrace.stats.get",
      "cloudtrace.tasks.create",
      "cloudtrace.tasks.get",
      "cloudtrace.tasks.list",
      "cloudtrace.traces.get",
      "cloudtrace.traces.list",
      "cloudtranslate.generalModels.batchPredict",
      "cloudtranslate.generalModels.get",
      "cloudtranslate.generalModels.predict",
      "cloudtranslate.glossaries.batchPredict",
      "cloudtranslate.glossaries.get",
      "cloudtranslate.glossaries.list",
      "cloudtranslate.glossaries.predict",
      "cloudtranslate.languageDetectionModels.predict",
      "cloudtranslate.locations.get",
      "cloudtranslate.locations.list",
      "cloudtranslate.operations.get",
      "cloudtranslate.operations.list",
      "cloudtranslate.operations.wait",
      "composer.environments.get",
      "composer.environments.list",
      "composer.imageversions.list",
      "composer.operations.get",
      "composer.operations.list",
      "compute.acceleratorTypes.get",
      "compute.acceleratorTypes.list",
      "compute.addresses.get",
      "compute.addresses.list",
      "compute.autoscalers.get",
      "compute.autoscalers.list",
      "compute.backendBuckets.get",
      "compute.backendBuckets.list",
      "compute.backendServices.get",
      "compute.backendServices.list",
      "compute.commitments.get",
      "compute.commitments.list",
      "compute.diskTypes.get",
      "compute.diskTypes.list",
      "compute.disks.createSnapshot",
      "compute.disks.get",
      "compute.disks.getIamPolicy",
      "compute.disks.list",
      "compute.disks.useReadOnly",
      "compute.externalVpnGateways.get",
      "compute.externalVpnGateways.list",
      "compute.firewalls.get",
      "compute.firewalls.list",
      "compute.forwardingRules.get",
      "compute.forwardingRules.list",
      "compute.globalAddresses.get",
      "compute.globalAddresses.list",
      "compute.globalForwardingRules.get",
      "compute.globalForwardingRules.list",
      "compute.globalOperations.get",
      "compute.globalOperations.getIamPolicy",
      "compute.globalOperations.list",
      "compute.healthChecks.get",
      "compute.healthChecks.list",
      "compute.healthChecks.useReadOnly",
      "compute.httpHealthChecks.get",
      "compute.httpHealthChecks.list",
      "compute.httpHealthChecks.useReadOnly",
      "compute.httpsHealthChecks.get",
      "compute.httpsHealthChecks.list",
      "compute.httpsHealthChecks.useReadOnly",
      "compute.images.get",
      "compute.images.getFromFamily",
      "compute.images.getIamPolicy",
      "compute.images.list",
      "compute.images.useReadOnly",
      "compute.instanceGroupManagers.get",
      "compute.instanceGroupManagers.list",
      "compute.instanceGroups.get",
      "compute.instanceGroups.list",
      "compute.instanceTemplates.get",
      "compute.instanceTemplates.getIamPolicy",
      "compute.instanceTemplates.list",
      "compute.instanceTemplates.useReadOnly",
      "compute.instances.get",
      "compute.instances.getGuestAttributes",
      "compute.instances.getIamPolicy",
      "compute.instances.getSerialPortOutput",
      "compute.instances.getShieldedInstanceIdentity",
      "compute.instances.getShieldedVmIdentity",
      "compute.instances.list",
      "compute.instances.listReferrers",
      "compute.interconnectAttachments.get",
      "compute.interconnectAttachments.list",
      "compute.interconnectLocations.get",
      "compute.interconnectLocations.list",
      "compute.interconnects.get",
      "compute.interconnects.list",
      "compute.licenseCodes.get",
      "compute.licenseCodes.getIamPolicy",
      "compute.licenseCodes.list",
      "compute.licenses.get",
      "compute.licenses.getIamPolicy",
      "compute.licenses.list",
      "compute.machineTypes.get",
      "compute.machineTypes.list",
      "compute.maintenancePolicies.get",
      "compute.maintenancePolicies.getIamPolicy",
      "compute.maintenancePolicies.list",
      "compute.networkEndpointGroups.get",
      "compute.networkEndpointGroups.getIamPolicy",
      "compute.networkEndpointGroups.list",
      "compute.networks.get",
      "compute.networks.list",
      "compute.networks.listPeeringRoutes",
      "compute.nodeGroups.get",
      "compute.nodeGroups.getIamPolicy",
      "compute.nodeGroups.list",
      "compute.nodeTemplates.get",
      "compute.nodeTemplates.getIamPolicy",
      "compute.nodeTemplates.list",
      "compute.nodeTypes.get",
      "compute.nodeTypes.list",
      "compute.projects.get",
      "compute.regionBackendServices.get",
      "compute.regionBackendServices.list",
      "compute.regionOperations.get",
      "compute.regionOperations.getIamPolicy",
      "compute.regionOperations.list",
      "compute.regions.get",
      "compute.regions.list",
      "compute.reservations.get",
      "compute.reservations.list",
      "compute.resourcePolicies.get",
      "compute.resourcePolicies.list",
      "compute.routers.get",
      "compute.routers.list",
      "compute.routes.get",
      "compute.routes.list",
      "compute.securityPolicies.get",
      "compute.securityPolicies.getIamPolicy",
      "compute.securityPolicies.list",
      "compute.snapshots.get",
      "compute.snapshots.getIamPolicy",
      "compute.snapshots.list",
      "compute.snapshots.useReadOnly",
      "compute.sslCertificates.get",
      "compute.sslCertificates.list",
      "compute.sslPolicies.get",
      "compute.sslPolicies.list",
      "compute.sslPolicies.listAvailableFeatures",
      "compute.subnetworks.get",
      "compute.subnetworks.getIamPolicy",
      "compute.subnetworks.list",
      "compute.targetHttpProxies.get",
      "compute.targetHttpProxies.list",
      "compute.targetHttpsProxies.get",
      "compute.targetHttpsProxies.list",
      "compute.targetInstances.get",
      "compute.targetInstances.list",
      "compute.targetPools.get",
      "compute.targetPools.list",
      "compute.targetSslProxies.get",
      "compute.targetSslProxies.list",
      "compute.targetTcpProxies.get",
      "compute.targetTcpProxies.list",
      "compute.targetVpnGateways.get",
      "compute.targetVpnGateways.list",
      "compute.urlMaps.get",
      "compute.urlMaps.list",
      "compute.urlMaps.validate",
      "compute.vpnGateways.get",
      "compute.vpnGateways.list",
      "compute.vpnTunnels.get",
      "compute.vpnTunnels.list",
      "compute.zoneOperations.get",
      "compute.zoneOperations.getIamPolicy",
      "compute.zoneOperations.list",
      "compute.zones.get",
      "compute.zones.list",
      "container.apiServices.get",
      "container.apiServices.list",
      "container.backendConfigs.get",
      "container.backendConfigs.list",
      "container.bindings.get",
      "container.bindings.list",
      "container.certificateSigningRequests.get",
      "container.certificateSigningRequests.list",
      "container.clusterRoleBindings.get",
      "container.clusterRoleBindings.list",
      "container.clusterRoles.get",
      "container.clusterRoles.list",
      "container.clusters.get",
      "container.clusters.list",
      "container.componentStatuses.get",
      "container.componentStatuses.list",
      "container.configMaps.get",
      "container.configMaps.list",
      "container.controllerRevisions.get",
      "container.controllerRevisions.list",
      "container.cronJobs.get",
      "container.cronJobs.getStatus",
      "container.cronJobs.list",
      "container.csiDrivers.get",
      "container.csiDrivers.list",
      "container.csiNodes.get",
      "container.csiNodes.list",
      "container.customResourceDefinitions.get",
      "container.customResourceDefinitions.list",
      "container.daemonSets.get",
      "container.daemonSets.getStatus",
      "container.daemonSets.list",
      "container.deployments.get",
      "container.deployments.getStatus",
      "container.deployments.list",
      "container.endpoints.get",
      "container.endpoints.list",
      "container.events.get",
      "container.events.list",
      "container.horizontalPodAutoscalers.get",
      "container.horizontalPodAutoscalers.getStatus",
      "container.horizontalPodAutoscalers.list",
      "container.ingresses.get",
      "container.ingresses.getStatus",
      "container.ingresses.list",
      "container.initializerConfigurations.get",
      "container.initializerConfigurations.list",
      "container.jobs.get",
      "container.jobs.getStatus",
      "container.jobs.list",
      "container.limitRanges.get",
      "container.limitRanges.list",
      "container.localSubjectAccessReviews.list",
      "container.namespaces.get",
      "container.namespaces.getStatus",
      "container.namespaces.list",
      "container.networkPolicies.get",
      "container.networkPolicies.list",
      "container.nodes.get",
      "container.nodes.getStatus",
      "container.nodes.list",
      "container.operations.get",
      "container.operations.list",
      "container.persistentVolumeClaims.get",
      "container.persistentVolumeClaims.getStatus",
      "container.persistentVolumeClaims.list",
      "container.persistentVolumes.get",
      "container.persistentVolumes.getStatus",
      "container.persistentVolumes.list",
      "container.petSets.get",
      "container.petSets.list",
      "container.podDisruptionBudgets.get",
      "container.podDisruptionBudgets.getStatus",
      "container.podDisruptionBudgets.list",
      "container.podPresets.get",
      "container.podPresets.list",
      "container.podSecurityPolicies.get",
      "container.podSecurityPolicies.list",
      "container.podTemplates.get",
      "container.podTemplates.list",
      "container.pods.get",
      "container.pods.getLogs",
      "container.pods.getStatus",
      "container.pods.list",
      "container.replicaSets.get",
      "container.replicaSets.getScale",
      "container.replicaSets.getStatus",
      "container.replicaSets.list",
      "container.replicationControllers.get",
      "container.replicationControllers.getScale",
      "container.replicationControllers.getStatus",
      "container.replicationControllers.list",
      "container.resourceQuotas.get",
      "container.resourceQuotas.getStatus",
      "container.resourceQuotas.list",
      "container.roleBindings.get",
      "container.roleBindings.list",
      "container.roles.get",
      "container.roles.list",
      "container.runtimeClasses.get",
      "container.runtimeClasses.list",
      "container.scheduledJobs.get",
      "container.scheduledJobs.list",
      "container.selfSubjectAccessReviews.create",
      "container.selfSubjectAccessReviews.list",
      "container.serviceAccounts.get",
      "container.serviceAccounts.list",
      "container.services.get",
      "container.services.getStatus",
      "container.services.list",
      "container.statefulSets.get",
      "container.statefulSets.getScale",
      "container.statefulSets.getStatus",
      "container.statefulSets.list",
      "container.storageClasses.get",
      "container.storageClasses.list",
      "container.subjectAccessReviews.list",
      "container.thirdPartyObjects.get",
      "container.thirdPartyObjects.list",
      "container.thirdPartyResources.get",
      "container.thirdPartyResources.list",
      "container.tokenReviews.create",
      "datacatalog.categories.getIamPolicy",
      "datacatalog.entries.get",
      "datacatalog.entries.getIamPolicy",
      "datacatalog.entries.list",
      "datacatalog.entryGroups.get",
      "datacatalog.entryGroups.getIamPolicy",
      "datacatalog.tagTemplates.get",
      "datacatalog.tagTemplates.getIamPolicy",
      "datacatalog.tagTemplates.getTag",
      "datacatalog.taxonomies.get",
      "datacatalog.taxonomies.getIamPolicy",
      "datacatalog.taxonomies.list",
      "dataflow.jobs.get",
      "dataflow.jobs.list",
      "dataflow.messages.list",
      "dataflow.metrics.get",
      "datafusion.instances.get",
      "datafusion.instances.getIamPolicy",
      "datafusion.instances.list",
      "datafusion.locations.get",
      "datafusion.locations.list",
      "datafusion.operations.get",
      "datafusion.operations.list",
      "datalabeling.annotateddatasets.get",
      "datalabeling.annotateddatasets.label",
      "datalabeling.annotateddatasets.list",
      "datalabeling.annotationspecsets.get",
      "datalabeling.annotationspecsets.list",
      "datalabeling.dataitems.get",
      "datalabeling.dataitems.list",
      "datalabeling.datasets.export",
      "datalabeling.datasets.get",
      "datalabeling.datasets.list",
      "datalabeling.examples.get",
      "datalabeling.examples.list",
      "datalabeling.instructions.get",
      "datalabeling.instructions.list",
      "datalabeling.operations.get",
      "datalabeling.operations.list",
      "dataproc.agents.get",
      "dataproc.agents.list",
      "dataproc.autoscalingPolicies.get",
      "dataproc.autoscalingPolicies.getIamPolicy",
      "dataproc.autoscalingPolicies.list",
      "dataproc.autoscalingPolicies.use",
      "dataproc.clusters.get",
      "dataproc.clusters.getIamPolicy",
      "dataproc.clusters.list",
      "dataproc.jobs.get",
      "dataproc.jobs.getIamPolicy",
      "dataproc.jobs.list",
      "dataproc.operations.get",
      "dataproc.operations.getIamPolicy",
      "dataproc.operations.list",
      "dataproc.tasks.listInvalidatedLeases",
      "dataproc.workflowTemplates.get",
      "dataproc.workflowTemplates.getIamPolicy",
      "dataproc.workflowTemplates.list",
      "dataprocessing.featurecontrols.get",
      "dataprocessing.featurecontrols.list",
      "datastore.databases.get",
      "datastore.databases.getIamPolicy",
      "datastore.databases.list",
      "datastore.entities.get",
      "datastore.entities.list",
      "datastore.indexes.get",
      "datastore.indexes.list",
      "datastore.namespaces.get",
      "datastore.namespaces.getIamPolicy",
      "datastore.namespaces.list",
      "datastore.statistics.get",
      "datastore.statistics.list",
      "deploymentmanager.compositeTypes.get",
      "deploymentmanager.compositeTypes.list",
      "deploymentmanager.deployments.get",
      "deploymentmanager.deployments.list",
      "deploymentmanager.manifests.get",
      "deploymentmanager.manifests.list",
      "deploymentmanager.operations.get",
      "deploymentmanager.operations.list",
      "deploymentmanager.resources.get",
      "deploymentmanager.resources.list",
      "deploymentmanager.typeProviders.get",
      "deploymentmanager.typeProviders.getType",
      "deploymentmanager.typeProviders.list",
      "deploymentmanager.typeProviders.listTypes",
      "deploymentmanager.types.get",
      "deploymentmanager.types.list",
      "dialogflow.agents.export",
      "dialogflow.agents.get",
      "dialogflow.agents.search",
      "dialogflow.contexts.get",
      "dialogflow.contexts.list",
      "dialogflow.documents.get",
      "dialogflow.documents.list",
      "dialogflow.entityTypes.get",
      "dialogflow.entityTypes.list",
      "dialogflow.intents.get",
      "dialogflow.intents.list",
      "dialogflow.knowledgeBases.get",
      "dialogflow.knowledgeBases.list",
      "dialogflow.operations.get",
      "dialogflow.sessionEntityTypes.get",
      "dialogflow.sessionEntityTypes.list",
      "dialogflow.sessions.detectIntent",
      "dialogflow.sessions.streamingDetectIntent",
      "dlp.analyzeRiskTemplates.get",
      "dlp.analyzeRiskTemplates.list",
      "dlp.deidentifyTemplates.get",
      "dlp.deidentifyTemplates.list",
      "dlp.inspectTemplates.get",
      "dlp.inspectTemplates.list",
      "dlp.jobTriggers.get",
      "dlp.jobTriggers.list",
      "dlp.storedInfoTypes.get",
      "dlp.storedInfoTypes.list",
      "dns.changes.get",
      "dns.changes.list",
      "dns.dnsKeys.get",
      "dns.dnsKeys.list",
      "dns.managedZoneOperations.get",
      "dns.managedZoneOperations.list",
      "dns.managedZones.get",
      "dns.managedZones.list",
      "dns.policies.get",
      "dns.policies.list",
      "dns.projects.get",
      "dns.resourceRecordSets.list",
      "endpoints.portals.listCustomDomains",
      "errorreporting.applications.list",
      "errorreporting.errorEvents.list",
      "errorreporting.groupMetadata.get",
      "errorreporting.groups.list",
      "file.instances.get",
      "file.instances.list",
      "file.locations.get",
      "file.locations.list",
      "file.operations.get",
      "file.operations.list",
      "file.snapshots.get",
      "file.snapshots.list",
      "firebase.billingPlans.get",
      "firebase.clients.get",
      "firebase.links.list",
      "firebase.projects.get",
      "firebaseabt.experimentresults.get",
      "firebaseabt.experiments.get",
      "firebaseabt.experiments.list",
      "firebaseabt.projectmetadata.get",
      "firebaseanalytics.resources.googleAnalyticsReadAndAnalyze",
      "firebaseappdistro.groups.list",
      "firebaseappdistro.releases.list",
      "firebaseappdistro.testers.list",
      "firebaseauth.configs.get",
      "firebaseauth.users.get",
      "firebasecrash.reports.get",
      "firebasecrashlytics.config.get",
      "firebasecrashlytics.data.get",
      "firebasecrashlytics.issues.get",
      "firebasecrashlytics.issues.list",
      "firebasecrashlytics.sessions.get",
      "firebasedatabase.instances.get",
      "firebasedatabase.instances.list",
      "firebasedynamiclinks.destinations.list",
      "firebasedynamiclinks.domains.get",
      "firebasedynamiclinks.domains.list",
      "firebasedynamiclinks.links.get",
      "firebasedynamiclinks.links.list",
      "firebasedynamiclinks.stats.get",
      "firebaseextensions.configs.list",
      "firebasehosting.sites.get",
      "firebasehosting.sites.list",
      "firebaseinappmessaging.campaigns.get",
      "firebaseinappmessaging.campaigns.list",
      "firebaseml.compressionjobs.get",
      "firebaseml.compressionjobs.list",
      "firebaseml.models.get",
      "firebaseml.models.list",
      "firebaseml.modelversions.get",
      "firebaseml.modelversions.list",
      "firebasenotifications.messages.get",
      "firebasenotifications.messages.list",
      "firebaseperformance.data.get",
      "firebasepredictions.predictions.list",
      "firebaserules.releases.get",
      "firebaserules.releases.getExecutable",
      "firebaserules.releases.list",
      "firebaserules.rulesets.list",
      "gameservices.gameServerClusters.get",
      "gameservices.gameServerClusters.list",
      "gameservices.gameServerConfigs.get",
      "gameservices.gameServerConfigs.list",
      "gameservices.gameServerDeployments.get",
      "gameservices.gameServerDeployments.list",
      "gameservices.locations.get",
      "gameservices.locations.list",
      "gameservices.operations.get",
      "gameservices.operations.list",
      "gameservices.realms.get",
      "gameservices.realms.list",
      "genomics.datasets.get",
      "genomics.datasets.list",
      "genomics.operations.get",
      "genomics.operations.list",
      "gkehub.locations.get",
      "gkehub.locations.list",
      "gkehub.memberships.generateConnectManifest",
      "gkehub.memberships.get",
      "gkehub.memberships.getIamPolicy",
      "gkehub.memberships.list",
      "gkehub.operations.get",
      "gkehub.operations.list",
      "healthcare.datasets.get",
      "healthcare.datasets.getIamPolicy",
      "healthcare.datasets.list",
      "healthcare.dicomStores.dicomWebRead",
      "healthcare.dicomStores.export",
      "healthcare.dicomStores.get",
      "healthcare.dicomStores.getIamPolicy",
      "healthcare.dicomStores.list",
      "healthcare.fhirResources.get",
      "healthcare.fhirStores.export",
      "healthcare.fhirStores.get",
      "healthcare.fhirStores.getIamPolicy",
      "healthcare.fhirStores.list",
      "healthcare.fhirStores.searchResources",
      "healthcare.hl7V2Messages.get",
      "healthcare.hl7V2Messages.list",
      "healthcare.hl7V2Stores.get",
      "healthcare.hl7V2Stores.getIamPolicy",
      "healthcare.hl7V2Stores.list",
      "healthcare.operations.get",
      "healthcare.operations.list",
      "iam.roles.get",
      "iam.roles.list",
      "iam.serviceAccountKeys.get",
      "iam.serviceAccountKeys.list",
      "iam.serviceAccounts.get",
      "iam.serviceAccounts.getIamPolicy",
      "iam.serviceAccounts.list",
      "iap.projects.getSettings",
      "iap.web.getSettings",
      "iap.webServiceVersions.getSettings",
      "iap.webServices.getSettings",
      "iap.webTypes.getSettings",
      "lifesciences.operations.get",
      "lifesciences.operations.list",
      "logging.cmekSettings.get",
      "logging.exclusions.get",
      "logging.exclusions.list",
      "logging.logEntries.list",
      "logging.logMetrics.get",
      "logging.logMetrics.list",
      "logging.logServiceIndexes.list",
      "logging.logServices.list",
      "logging.logs.list",
      "logging.sinks.get",
      "logging.sinks.list",
      "logging.usage.get",
      "managedidentities.domains.get",
      "managedidentities.domains.getIamPolicy",
      "managedidentities.domains.list",
      "managedidentities.domains.validateTrust",
      "managedidentities.locations.get",
      "managedidentities.locations.list",
      "managedidentities.operations.get",
      "managedidentities.operations.list",
      "ml.jobs.get",
      "ml.jobs.getIamPolicy",
      "ml.jobs.list",
      "ml.locations.get",
      "ml.locations.list",
      "ml.models.get",
      "ml.models.getIamPolicy",
      "ml.models.list",
      "ml.models.predict",
      "ml.operations.get",
      "ml.operations.list",
      "ml.projects.getConfig",
      "ml.versions.get",
      "ml.versions.list",
      "ml.versions.predict",
      "monitoring.alertPolicies.get",
      "monitoring.alertPolicies.list",
      "monitoring.dashboards.get",
      "monitoring.dashboards.list",
      "monitoring.groups.get",
      "monitoring.groups.list",
      "monitoring.metricDescriptors.get",
      "monitoring.metricDescriptors.list",
      "monitoring.monitoredResourceDescriptors.get",
      "monitoring.monitoredResourceDescriptors.list",
      "monitoring.notificationChannelDescriptors.get",
      "monitoring.notificationChannelDescriptors.list",
      "monitoring.notificationChannels.get",
      "monitoring.notificationChannels.list",
      "monitoring.publicWidgets.get",
      "monitoring.publicWidgets.list",
      "monitoring.timeSeries.list",
      "monitoring.uptimeCheckConfigs.get",
      "monitoring.uptimeCheckConfigs.list",
      "netappcloudvolumes.activeDirectories.get",
      "netappcloudvolumes.activeDirectories.list",
      "netappcloudvolumes.ipRanges.list",
      "netappcloudvolumes.jobs.get",
      "netappcloudvolumes.jobs.list",
      "netappcloudvolumes.regions.list",
      "netappcloudvolumes.serviceLevels.list",
      "netappcloudvolumes.snapshots.get",
      "netappcloudvolumes.snapshots.list",
      "netappcloudvolumes.volumes.get",
      "netappcloudvolumes.volumes.list",
      "networkmanagement.connectivitytests.get",
      "networkmanagement.connectivitytests.getIamPolicy",
      "networkmanagement.connectivitytests.list",
      "networkmanagement.locations.get",
      "networkmanagement.locations.list",
      "networkmanagement.operations.get",
      "networkmanagement.operations.list",
      "notebooks.environments.get",
      "notebooks.environments.getIamPolicy",
      "notebooks.environments.list",
      "notebooks.instances.get",
      "notebooks.instances.getIamPolicy",
      "notebooks.instances.list",
      "notebooks.locations.get",
      "notebooks.locations.list",
      "notebooks.operations.get",
      "notebooks.operations.list",
      "orgpolicy.policy.get",
      "proximitybeacon.attachments.get",
      "proximitybeacon.attachments.list",
      "proximitybeacon.beacons.get",
      "proximitybeacon.beacons.list",
      "proximitybeacon.namespaces.get",
      "proximitybeacon.namespaces.list",
      "pubsub.snapshots.get",
      "pubsub.snapshots.list",
      "pubsub.snapshots.seek",
      "pubsub.subscriptions.get",
      "pubsub.subscriptions.list",
      "pubsub.topics.get",
      "pubsub.topics.list",
      "recommender.computeInstanceGroupManagerMachineTypeRecommendations.get",
      "recommender.computeInstanceGroupManagerMachineTypeRecommendations.list",
      "recommender.computeInstanceMachineTypeRecommendations.get",
      "recommender.computeInstanceMachineTypeRecommendations.list",
      "recommender.iamPolicyRecommendations.get",
      "recommender.iamPolicyRecommendations.list",
      "recommender.locations.get",
      "recommender.locations.list",
      "redis.instances.get",
      "redis.instances.list",
      "redis.locations.get",
      "redis.locations.list",
      "redis.operations.get",
      "redis.operations.list",
      "redisenterprisecloud.databases.get",
      "redisenterprisecloud.databases.list",
      "redisenterprisecloud.subscriptions.get",
      "redisenterprisecloud.subscriptions.list",
      "remotebuildexecution.actions.get",
      "remotebuildexecution.blobs.get",
      "remotebuildexecution.instances.get",
      "remotebuildexecution.instances.list",
      "remotebuildexecution.logstreams.get",
      "remotebuildexecution.workerpools.get",
      "remotebuildexecution.workerpools.list",
      "resourcemanager.projects.get",
      "resourcemanager.projects.getIamPolicy",
      "resourcemanager.projects.list",
      "run.configurations.get",
      "run.configurations.list",
      "run.locations.list",
      "run.revisions.get",
      "run.revisions.list",
      "run.routes.get",
      "run.routes.list",
      "run.services.get",
      "run.services.getIamPolicy",
      "run.services.list",
      "runtimeconfig.configs.get",
      "runtimeconfig.configs.list",
      "runtimeconfig.operations.get",
      "runtimeconfig.operations.list",
      "runtimeconfig.variables.get",
      "runtimeconfig.variables.list",
      "runtimeconfig.variables.watch",
      "runtimeconfig.waiters.get",
      "runtimeconfig.waiters.list",
      "secretmanager.locations.get",
      "secretmanager.locations.list",
      "secretmanager.secrets.get",
      "secretmanager.secrets.getIamPolicy",
      "secretmanager.secrets.list",
      "secretmanager.versions.get",
      "secretmanager.versions.list",
      "securitycenter.assets.group",
      "securitycenter.assets.list",
      "securitycenter.assets.listAssetPropertyNames",
      "securitycenter.findings.group",
      "securitycenter.findings.list",
      "securitycenter.findings.listFindingPropertyNames",
      "securitycenter.notificationconfig.get",
      "securitycenter.notificationconfig.list",
      "securitycenter.organizationsettings.get",
      "securitycenter.sources.get",
      "securitycenter.sources.getIamPolicy",
      "securitycenter.sources.list",
      "servicebroker.bindingoperations.get",
      "servicebroker.bindingoperations.list",
      "servicebroker.bindings.get",
      "servicebroker.bindings.getIamPolicy",
      "servicebroker.bindings.list",
      "servicebroker.catalogs.get",
      "servicebroker.catalogs.getIamPolicy",
      "servicebroker.catalogs.list",
      "servicebroker.instanceoperations.get",
      "servicebroker.instanceoperations.list",
      "servicebroker.instances.get",
      "servicebroker.instances.getIamPolicy",
      "servicebroker.instances.list",
      "serviceconsumermanagement.consumers.get",
      "serviceconsumermanagement.quota.get",
      "serviceconsumermanagement.tenancyu.list",
      "servicemanagement.consumerSettings.get",
      "servicemanagement.consumerSettings.list",
      "servicemanagement.services.get",
      "servicemanagement.services.list",
      "servicenetworking.operations.get",
      "servicenetworking.operations.list",
      "servicenetworking.services.get",
      "serviceusage.apiKeys.get",
      "serviceusage.apiKeys.getProjectForKey",
      "serviceusage.apiKeys.list",
      "serviceusage.operations.get",
      "serviceusage.operations.list",
      "serviceusage.quotas.get",
      "serviceusage.services.get",
      "serviceusage.services.list",
      "source.repos.get",
      "source.repos.getIamPolicy",
      "source.repos.list",
      "spanner.databaseOperations.get",
      "spanner.databaseOperations.list",
      "spanner.databases.beginReadOnlyTransaction",
      "spanner.databases.get",
      "spanner.databases.getDdl",
      "spanner.databases.getIamPolicy",
      "spanner.databases.list",
      "spanner.databases.read",
      "spanner.databases.select",
      "spanner.instanceConfigs.get",
      "spanner.instanceConfigs.list",
      "spanner.instanceOperations.get",
      "spanner.instanceOperations.list",
      "spanner.instances.get",
      "spanner.instances.getIamPolicy",
      "spanner.instances.list",
      "spanner.sessions.create",
      "spanner.sessions.delete",
      "spanner.sessions.get",
      "spanner.sessions.list",
      "stackdriver.projects.get",
      "storage.buckets.list",
      "storage.hmacKeys.get",
      "storage.hmacKeys.list",
      "storagetransfer.jobs.get",
      "storagetransfer.jobs.list",
      "storagetransfer.operations.get",
      "storagetransfer.operations.list",
      "storagetransfer.projects.getServiceAccount",
      "subscribewithgoogledeveloper.tools.get",
      "tpu.acceleratortypes.get",
      "tpu.acceleratortypes.list",
      "tpu.locations.get",
      "tpu.locations.list",
      "tpu.nodes.get",
      "tpu.nodes.list",
      "tpu.operations.get",
      "tpu.operations.list",
      "tpu.tensorflowversions.get",
      "tpu.tensorflowversions.list",
      "vmmigration.deployments.get",
      "vmmigration.deployments.list",
      "vpcaccess.connectors.get",
      "vpcaccess.connectors.list",
      "vpcaccess.connectors.use",
      "vpcaccess.locations.list",
      "vpcaccess.operations.get",
      "vpcaccess.operations.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/vmmigration.admin": {
    "name": "roles/vmmigration.admin",
    "title": "VM Migration Administrator",
    "description": "Ability to view and edit all VM Migration objects",
    "includedPermissions": [
      "vmmigration.deployments.create",
      "vmmigration.deployments.get",
      "vmmigration.deployments.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/vmmigration.viewer": {
    "name": "roles/vmmigration.viewer",
    "title": "VM Migration Viewer",
    "description": "Ability to view all VM Migration objects",
    "includedPermissions": [
      "vmmigration.deployments.get",
      "vmmigration.deployments.list"
    ],
    "stage": "BETA",
    "etag": "AA=="
  },
  "roles/vpaccess.user": {
    "name": "roles/vpaccess.user",
    "title": "Serverless VPC Access User",
    "description": "User of Serverless VPC Access connectors",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "vpcaccess.connectors.get",
      "vpcaccess.connectors.list",
      "vpcaccess.connectors.use",
      "vpcaccess.locations.list",
      "vpcaccess.operations.get",
      "vpcaccess.operations.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/vpaccess.viewer": {
    "name": "roles/vpaccess.viewer",
    "title": "Serverless VPC Access Viewer",
    "description": "Viewer of all Serverless VPC Access resources",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "vpcaccess.connectors.get",
      "vpcaccess.connectors.list",
      "vpcaccess.locations.list",
      "vpcaccess.operations.get",
      "vpcaccess.operations.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  },
  "roles/vpcaccess.admin": {
    "name": "roles/vpcaccess.admin",
    "title": "Serverless VPC Access Admin",
    "description": "Full access to all Serverless VPC Access resources",
    "includedPermissions": [
      "resourcemanager.projects.get",
      "resourcemanager.projects.list",
      "vpcaccess.connectors.create",
      "vpcaccess.connectors.delete",
      "vpcaccess.connectors.get",
      "vpcaccess.connectors.list",
      "vpcaccess.connectors.use",
      "vpcaccess.locations.list",
      "vpcaccess.operations.get",
      "vpcaccess.operations.list"
    ],
    "stage": "GA",
    "etag": "AA=="
  }
}